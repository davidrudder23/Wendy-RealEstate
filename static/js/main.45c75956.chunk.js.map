{"version":3,"sources":["components/FormFields/FormStyled.js","components/FormFields/InputFieldStyled.js","hooks/useCheckFieldValue.js","components/FormFields/InputField.js","components/FormFields/FormHeaderStyled.js","components/FormFields/FormHeader.js","components/FormFields/DropDownListStyled.js","components/FormFields/DropDownList.js","components/FormFields/SliderStyled.js","components/FormFields/Slider.js","shared.js","components/FormFields/AutoCompleteStyled.js","components/FormFields/AutoComplete.js","components/FormFields/Address.js","components/FormFields/PropertyInfo.js","components/FormFields/DatePicker.js","components/FormFields/RadioSelectorStyled.js","components/FormFields/RadioSelector.js","validation/index.js","components/FormFields/SharedButtons.js","state/updateState.js","hooks/useCustomFormHook.js","components/Forms/Property.js","hooks/useLoadGoogleSheetInfo.js","components/Forms/Broker.js","components/Forms/Agent.js","components/Result.js","components/Forms/ListingBroker.js","components/Forms/Lenders.js","components/Forms/Attorney.js","components/Forms/ForSaleByOwner.js","components/Forms/Mortgage.js","components/Forms/AgentType.js","components/Forms/AdditionalInformation.js","components/Forms/Testing.js","components/FormFields/GeneralClientInformation.js","components/Forms/Client.js","components/Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","FieldTitle","FieldWrapper","props","error","Button","Input","input","MultiContainer","AddressWrapper","InputField","disablePadding","isEmpty","useCheckFieldValue","name","getValues","React","useState","setIsEmpty","useEffect","componentIsMounted","isFieldEmpty","value","undefined","memo","label","className","style","required","register","errors","onKeyDown","classVal","ref","onKeyPress","e","handleonkeypress","onBlur","target","handleonblur","onChange","message","Title","p","FormHeader","Select","select","DropDownList","placeholder","options","setValue","isValue","rest","defaultValue","event","preventDefault","disabled","hidden","map","key","Label","Span","span","checked","Slider","isChecked","setIsChecked","type","onClick","handleDeploymentPath","params","process","concat","MORTGAGE_TYPES","CONVENTIONAL","FHA","VA","CASH","AGENT_TYPES","SELLERS","BUYERS","BOTH","PROPERTY_TYPES","SINGLE_FAMILY","MULTI_FAMILY","CONDO","ordinal_suffix_of","i","j","k","AutoCompleteWrapper","AutoComplete","suggestions","howToFilter","status","onSelect","useDefaultFilter","useOnclickOutside","handleOnBlur","activeSuggestion","filteredSuggestions","showSuggestions","userInput","suggestionState","setSuggestionState","state","handleSelect","stopPropagation","text","currentTarget","innerText","indexOf","noSuggestions","persist","filter","suggestion","toLowerCase","keyCode","length","onFocus","some","index","suggestionsListComponent","Address","disable","usePlacesAutocomplete","ready","data","clearSuggestions","getDescriptions","description","PropertyInfo","agentType","propertyInformation","mlsNumber","deedReference","address","mapReferences","handleConditionalFields","CustomDatePicker","control","showYearPicker","dateFormat","render","placeholderText","startDate","selected","Date","optionWrapper","InputRadio","OtherWrapper","RadioSelector","array","other","defaultVal","watch","watchVal","textFieldHasValue","includes","otherVal","setOtherVal","Fragment","defaultChecked","marginTop","float","mapRules","rule","Object","keys","reduce","newMap","PHONE_REG_EXP","REQUIRED","VALID_EMAIL","AgentTypeValidation","yup","shape","PropertyValidation","property","notRequired","test","val","propertyType","oneOf","values","condoManagementCompany","when","is","then","vacentOrOccupied","dateHouseBuilt","titleOrTownSewer","publicOrTownWater","inspectionDeadline","buyerhasSubmittedAdditionalOffer","loxBoxCode","typeError","MortgageValidation","mortgage","typeOfMortgage","purchasePrice","firstDeposit","secondDeposit","areConcessions","concessions","mortgageCommitmentDeadline","houseClosingDate","TestAttorneyValidation","obj","firstName","lastName","emailAddress","email","emailAddressVerification","firmName","phoneNumber","matches","FSBOValidation","forSaleByOwner","sellerFirstName","sellerLastName","sellerEmail","sellerEmailVerification","attorneyfirstName","attorneylastName","attorneyEmail","attorneyEmailVerification","attorneyPhoneNumber","ListingBrokerValidation","listingBroker","company","listingAgent","emailVerification","mlsID","LendersValidation","lender","companyName","ClientValidation","client","obj2","fullAddress","AgentAndBrokerValidation","broker","agent","MLSNumber","compensationPerMLS","Back","history","useHistory","goBack","Next","updateAction","payload","details","useCustomFormHook","validationRules","useStateMachine","action","push","useForm","defaultValues","mode","reValidateMode","resolver","yupResolver","handleSubmit","Property","currPropertyType","setCurrentPropertyType","additionalOffer","setAdditionalOffer","inspectionWaved","setInspectionWaved","onSubmit","buyerHasSubmittedAdditionalOffer","useLoadGoogleSheetInfo","sheetKey","sheetIndex","cellRange","handleSheetData","valuesObj","setReady","sheet","setSheet","setValues","arrayData","setArrayData","loadSpreadSheetInformation","catch","console","log","a","doc","GoogleSpreadsheet","useServiceAccountAuth","require","loadInfo","sheetsByIndex","loadCells","Broker","represents","brokerSheet","getCell","CompanyName","Company","Agent","useParams","agentSheet","emails","names","mlsNumbers","organizations","phoneNumbers","Emails","EmailVerifications","Names","PhoneNumbers","Organizations","MLSNumbers","Email","EmailVerification","Name","PhoneNumber","Organization","handleOnSelect","loadAgentPhoneNumber","loadFieldsBasedOnAgent","Result","JSON","stringify","ListingBroker","phoneNumberField","listing","Lenders","Attorney","hasAttorney","sethasAttorney","wantsRecommendation","setWantsRecommendation","addresses","firmNames","FirmNames","Addresses","FirmName","askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot","attorney","attorneyInformation","ForSaleByOwner","isFSBO","setIsFSBO","Mortgage","currMortgageType","setCurrMortgageType","isConcessions","setIsConcessions","AgentType","AdditionalInformation","withTracyGagne","setWithTracyGagne","hasReferral","setHasReferral","renderHasReferral","Testing","controlData","setControlData","GeneralClientInformation","title","count","setCount","newCount","parseInt","display","fields","fieldCount","Client","clientType","exact","path","component","createStore","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.45c75956.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #e7ecee;\r\n    padding-top: .5rem;\r\n    min-height: 99vh;\r\n    height: 100%;\r\n\r\n    form {\r\n        width: 40rem;\r\n        margin: 0 auto;\r\n        background: transparent;\r\n\r\n        @media only screen and (max-device-width : 640px) {\r\n            width: 95%;\r\n        }\r\n\r\n    }\r\n`;\r\n\r\nexport const FieldTitle = styled.div`\r\n    font-family: Helvetica, Arial, sans-serif; \r\n    position: relative;\r\n    margin-bottom: .5rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    position: relative;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    padding: 1.5rem;\r\n    border-radius: .75rem;\r\n    border: ${props => props.error ? \"1px solid #d93025\" : \"1px solid #d3d3d3\" };\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const Button = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n    margin-right: .5rem;\r\n`;\r\n\r\nexport const MultiContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    \r\n    @media only screen and (max-device-width : 425px) {\r\n        flex-direction: column;\r\n    }\r\n    \r\n`;\r\n\r\n//****Should only be used when inside MultiContainer****\r\nexport const AddressWrapper = styled.div`\r\n    padding-left: 1rem;\r\n    @media only screen and (max-device-width : 425px) {\r\n        padding-left: 0;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nconst highlightColor = \"#16abf0\";\r\nconst paddingHorizontal = \"8px\";\r\n\r\nexport const InputField = styled.div`\r\n    position: relative;\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    /* This is so there can be multiple fields side by side \r\n        Start-block\r\n    */\r\n    padding-left: ${props => props.disablePadding ? 0 : \"1rem\"};\r\n\r\n    @media only screen and (max-device-width : 425px) {\r\n        padding-left: 0;\r\n    }\r\n\r\n    :last-child label {\r\n        padding-left: ${props => props.disablePadding ? 0 : \"1rem\"};\r\n        \r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n\r\n    :first-child {\r\n        padding-left: 0;\r\n        label {\r\n            padding-left: 0;\r\n        }\r\n\r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n    /* end-block */\r\n\r\n    input {\r\n        font-family: Helvetica, Arial, sans-serif;\r\n        font-size: 12pt;\r\n        width: 15.4375rem;\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 2.6em;\r\n        line-height: 2.6em;\r\n        margin-top: .5em;\r\n        border: none;\r\n        outline: none;\r\n        position: relative;\r\n        top: 0;\r\n        left: 0;\r\n        display: block;\r\n        background: transparent;\r\n        z-index: 2;\r\n        border-bottom: 1px solid #ccc;\r\n        text-indent: ${paddingHorizontal};\r\n    }\r\n\r\n    input:focus+label {\r\n        color: ${highlightColor}\r\n    }\r\n\r\n    label {\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        left: ${ props => props.isEmpty ? \"0px\" : paddingHorizontal};\r\n        font-size: 12pt;\r\n        z-index: 1;\r\n        transform-origin: 0, 0.0em;\r\n        transition: transform 500ms, color 300ms;\r\n        transform: ${props => props.isEmpty ? 'scale(0.85, 0.85) rotateY(0)' :  'scale(1,1) rotateY(0)'};\r\n        line-height: ${props => props.isEmpty ? '.25em' : '3em'};\r\n        color: #696969;\r\n    }\r\n\r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n\r\n    .react-datepicker-popper {\r\n        z-index: 4;\r\n    }\r\n\r\n    ::has(> input[type=\"hidden\"]) {\r\n        margin-bottom: 0 !important;\r\n        padding-bottom: 0 !important;\r\n    }\r\n\r\n    /* input[type=\"hidden\"]:(> div.active) {\r\n        margin-bottom: 0 !important;\r\n        padding-bottom: 0 !important;\r\n    } */\r\n\r\n`;\r\n\r\n","import React from \"react\";\r\n\r\nconst useCheckFieldValue = (name, getValues) => {\r\n    \r\n    const [isEmpty, setIsEmpty] = React.useState(false);\r\n    \r\n    const isFieldEmpty = (value) => {\r\n        if(value === \"\" || value === undefined || value === null){\r\n            setIsEmpty(false);\r\n        }else{\r\n            setIsEmpty(true);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let componentIsMounted = true;\r\n        \r\n        if(componentIsMounted && getValues && getValues(`${name}`)) {\r\n            setIsEmpty(true);\r\n        }\r\n\r\n        return () => (componentIsMounted = false);\r\n    }, [name, getValues]);\r\n\r\n    return {\r\n        isFieldEmpty,\r\n        setIsEmpty,\r\n        isEmpty\r\n    }\r\n}\r\n\r\nexport default useCheckFieldValue","import React from 'react'\r\nimport * as S from \"./InputFieldStyled\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\";\r\n\r\nconst InputField = React.memo(({ name, label, className, style, required, register, getValues, errors, onKeyDown, ...props }) => {\r\n    const classVal = required ? `${className} required-field` : className;\r\n    const { isEmpty, isFieldEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n\r\n    const handleOnKeyPress = e => {\r\n        setIsEmpty(true)\r\n        if (props.handleonkeypress) {\r\n            props.handleonkeypress(e);\r\n        }\r\n    }\r\n\r\n    const handleOnBlur = e => {\r\n        isFieldEmpty(e.target.value);\r\n        if (props.handleonblur) {\r\n            props.handleonblur(e);\r\n        }\r\n    }\r\n\r\n    const handleOnChange = e => {\r\n        setIsEmpty(true);\r\n        if (props.onChange) {\r\n            props.onChange(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.InputField style={style} isEmpty={isEmpty}>\r\n            <input\r\n                name={name}\r\n                ref={register}\r\n                onKeyPress={handleOnKeyPress}\r\n                onBlur={handleOnBlur}\r\n                onChange={handleOnChange}\r\n                onKeyDown={onKeyDown}\r\n                {...props}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {errors ? <span>{errors?.message}</span> : null}\r\n        </S.InputField>\r\n    )\r\n})\r\n\r\nexport default InputField\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.div`\r\n    margin: 0 0 .125rem 0;\r\n    padding: 0px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 16pt;\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const message = styled.p`\r\n    margin: 0;\r\n    padding: 0;\r\n    /* text-align: left; */\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    padding: 1rem;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    border-radius: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n`;","import React from 'react';\r\nimport * as S from \"./FormHeaderStyled\";\r\n\r\nconst FormHeader = React.memo(() => {\r\n    return (\r\n        <S.FieldWrapper>\r\n            <S.Title>Massachusetts Real Estate Transaction Form </S.Title>\r\n            <S.message>Please ensure that all information is filled out correctly as this information will be utilized throughout the transaction process.</S.message>\r\n        </S.FieldWrapper>\r\n    )\r\n})\r\n\r\nexport default FormHeader\r\n","import styled from \"styled-components\";\r\n\r\nexport const Select = styled.select`\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    font-size: 12pt;\r\n    width: 12.4375rem;\r\n    border: none;\r\n    border-bottom: 1px solid #ccc;\r\n    margin: 1rem 0 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./DropDownListStyled\"\r\n\r\nconst DropDownList = React.memo(({ placeholder, options, register, setValue, isValue, errors, ...rest }) => {\r\n    \r\n    const handleChange = (event) => {\r\n        event.preventDefault();\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Select defaultValue={isValue} onChange={handleChange} ref={register} {...rest}>\r\n                <option value=\"\" disabled hidden>{placeholder}</option>\r\n                {options.map(value => (\r\n                    <option key={value} value={value}>\r\n                        {value}\r\n                    </option>\r\n                ))}\r\n            </S.Select>\r\n            {errors && \r\n            ( errors.message !== null || errors.message !== undefined \r\n            ? <span>{errors.message}</span>\r\n            : null\r\n            )}\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default DropDownList\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    position: relative;\r\n    display: inline-block;\r\n    margin-left: 1rem;\r\n    top: .25rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 2.625rem;\r\n    height: 1.25rem;\r\n    /* line-height: 1.5rem; */\r\n\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n    display: none;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: ${ props => props.checked ? \"#16abf0\" : \"#c9c9c9\"};\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n    border-radius: 30px;\r\n\r\n    ::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        border-radius: 50%;\r\n        height: .8125rem;\r\n        width: .8125rem;\r\n        left: 4px;\r\n        bottom: 4px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 50%;\r\n        -webkit-transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n        -ms-transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n        transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n    }\r\n\r\n    ::after {\r\n        /* content: \"\" + ; */\r\n        content: '${props => props.checked ? \"YES\" : \"NO\"}';\r\n        color: ${ props => props.checked ? \"#ccc\" : \"#16abf0\"};\r\n        display: block;\r\n        position: absolute;\r\n        transform: translate(-50%, -50%);\r\n        top: 50%;\r\n        left: ${props => props.checked ? \"30%\" : \"70%\"};\r\n        font-size: 10px;\r\n        font-family: Arial, Helvetica, sans-serif;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./SliderStyled\";\r\n\r\nconst Slider = React.memo(({ isChecked, setIsChecked, name, required, register }) => {\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Label>\r\n                <S.Input value={isChecked} type=\"checkbox\" name={name} ref={register} />\r\n                <S.Span checked={isChecked} onClick={() => setIsChecked(isChecked => !isChecked)} />\r\n            </S.Label>\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default Slider\r\n","export const deploy = process.env.REACT_APP_DEPLOY_TO_GITHUB_PAGES;\r\nexport const path = process.env.REACT_APP_BASE_PATH;\r\n\r\nexport const handleDeploymentPath = (params) => {\r\n    return deploy === \"true\" ? path.concat(params) : params;\r\n}\r\n\r\nexport const MORTGAGE_TYPES = {\r\n    CONVENTIONAL: \"Conventional\",\r\n    FHA: \"FHA\",\r\n    VA: \"VA\",\r\n    CASH: \"Cash\",\r\n}\r\nexport const AGENT_TYPES = {\r\n    SELLERS: \"Seller\",\r\n    BUYERS: \"Buyer\",\r\n    BOTH: \"Both\"\r\n}\r\n\r\nexport const PROPERTY_TYPES = {\r\n    SINGLE_FAMILY: \"Single Family\",\r\n    MULTI_FAMILY: \"Multi Family\",\r\n    CONDO: \"Condo\"\r\n}\r\n\r\n// What an ordinal suffix is: https://en.wikipedia.org/wiki/Ordinal_numeral\r\nexport function ordinal_suffix_of(i) {\r\n    var j = i % 10,\r\n        k = i % 100;\r\n    if (j === 1 && k !== 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j === 2 && k !== 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j === 3 && k !== 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}","import styled from \"styled-components\";\r\n// TODO update styles\r\n\r\nexport const AutoCompleteWrapper = styled.div`\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    && > div {\r\n        margin-bottom: 0;\r\n        padding-bottom: 0;\r\n    }\r\n\r\n  .no-suggestions {\r\n    color: #999;\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestions {\r\n    position: absolute;\r\n    border: 1px solid #999;\r\n    border-top-width: 0;\r\n    list-style: none;\r\n    margin-top: 0;\r\n    max-height: 143px;\r\n    overflow-y: auto;\r\n    padding-left: 0;\r\n    width: calc(300px + 1rem);\r\n    z-index: 1000;\r\n    background-color: #FFF;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .suggestions li {\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestion-active,\r\n  .suggestions li:hover {\r\n    background-color: #16abf0;\r\n    color: #FFF;\r\n    cursor: pointer;\r\n    font-weight: 700;\r\n  }\r\n  \r\n  .suggestions li:not(:last-of-type) {\r\n    border-bottom: 1px solid #999;\r\n  }\r\n`","import React from 'react'\r\nimport InputField from './InputField';\r\nimport * as S from \"./AutoCompleteStyled\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\n\r\n// TODO: Add auto scrolling to keep active item into focus\r\nconst AutoComplete = ({\r\n\r\n  /** A list of items to sort and display as suggestions */\r\n  suggestions = [],\r\n\r\n  /** Can be a custom filter function that with params (suggestions) and returns (filteredSuggestions) */\r\n  howToFilter,\r\n\r\n  /** pass a function that uses onBlur and gets the params (event) */\r\n  handleonblur,\r\n\r\n  /** pass a function that uses OnKeyPress and gets the params (event) */\r\n  handleonkeypress,\r\n\r\n  /** Can be used when you want to disable the field during loading or other reasons */\r\n  status,\r\n\r\n  /** Allows for onChange effect with params of (event) */\r\n  onChange,\r\n  \r\n  /** Can pass a function that is triggered on selection of an item in the list of suggestions. The possible params are (event , tuple) */\r\n  onSelect,\r\n  /** If you do not wish to pass a sorting method you can use the default one provided in onChange */\r\n  useDefaultFilter = true,\r\n  value,\r\n  getValues,\r\n  name,\r\n  ...props }) => {\r\n    const ref = useOnclickOutside(() => {\r\n      handleOnBlur();\r\n    });\r\n    \r\n    const [suggestionState, setSuggestionState] = React.useState({\r\n        // The active suggestion's index\r\n        activeSuggestion: 0,\r\n        // The suggestions that match the user's input\r\n        filteredSuggestions: [],\r\n        // Whether or no the suggestion list is shown\r\n        showSuggestions: false,\r\n        // What the user has entered\r\n        userInput: value ? value : \"\",\r\n    });\r\n    \r\n    React.useEffect(() => {\r\n      setSuggestionState(state => {\r\n        return {\r\n          ...state,\r\n          userInput: value\r\n        }\r\n      })\r\n    }, [value])\r\n\r\n    // This is required because AutoComplete is using InputField as a controlled component\r\n    React.useEffect(() => {\r\n      if(getValues && getValues(`${name}`)){\r\n        setSuggestionState({userInput: getValues(`${name}`)})\r\n      }\r\n    }, [name, getValues])\r\n    \r\n    const handleOnBlur = (e) => {\r\n      if(handleonblur){\r\n        handleonblur(e);\r\n      }\r\n      setSuggestionState(state => {\r\n        return {\r\n        ...state,\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n      }});\r\n    }\r\n    \r\n    \r\n    const handleOnChange = e => {\r\n      e.stopPropagation();\r\n      const userInput = e.target.value;\r\n      \r\n      if(onChange){\r\n        onChange(e);\r\n      }\r\n      e.persist();\r\n\r\n      // Filter our suggestions that don't contain the user's input\r\n      let filteredSuggestions;     \r\n      if(howToFilter){\r\n        filteredSuggestions = howToFilter(suggestions);        \r\n      } else {\r\n        filteredSuggestions = suggestions;\r\n      }\r\n      \r\n      if(useDefaultFilter && !howToFilter){\r\n        filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\r\n      }\r\n      \r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions,\r\n        showSuggestions: true,\r\n        userInput: userInput,\r\n      });\r\n      };\r\n\r\n    const handleSelect = (e) => {\r\n      e.stopPropagation();\r\n      let text = e.currentTarget.innerText;\r\n      \r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n        userInput: text,\r\n      });\r\n\r\n      if(onSelect){\r\n        onSelect(e, suggestions.indexOf(text));\r\n      }\r\n    };\r\n\r\n    const handleOnKeyDown = e => {\r\n      const { activeSuggestion, filteredSuggestions } = suggestionState;\r\n\r\n      // User pressed the enter key\r\n      if (e.keyCode === 13) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setSuggestionState(state => { \r\n          return {\r\n            ...state,\r\n            activeSuggestion: 0,\r\n            showSuggestions: false,\r\n            userInput: filteredSuggestions[activeSuggestion]\r\n          }\r\n        });\r\n\r\n        if(onSelect){\r\n          onSelect(e, suggestions.indexOf(filteredSuggestions[activeSuggestion]))\r\n        }\r\n      }\r\n      \r\n      // User pressed the up arrow\r\n      else if (e.keyCode === 38) {\r\n        if (activeSuggestion === 0) {\r\n          return;\r\n        }\r\n        setSuggestionState(state => {\r\n          return { ...state, activeSuggestion: activeSuggestion - 1} \r\n        });\r\n      }\r\n      \r\n\r\n      // User pressed the down arrow\r\n      else if (e.keyCode === 40) {\r\n      \r\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n          return;\r\n        }\r\n      \r\n        \r\n        setSuggestionState(state => {\r\n          return { ...state, activeSuggestion: activeSuggestion + 1} \r\n        });\r\n      };\r\n      e.stopPropagation();\r\n    };\r\n\r\n    const handleOnFocus = () => {\r\n      setSuggestionState(state => {\r\n        return {\r\n        ...state,\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: suggestions,\r\n        showSuggestions: true,\r\n      }});\r\n    }\r\n\r\n    const noSuggestions = () => {\r\n      return (\r\n        <div className=\"no-suggestions\">\r\n          <em>No suggestions</em>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const suggestionsListComponent = () => {\r\n      const { showSuggestions, filteredSuggestions, activeSuggestion } = suggestionState;\r\n\r\n      if (showSuggestions) {\r\n        if (filteredSuggestions.length) {\r\n          if(!filteredSuggestions.some(suggestion => suggestion !== null)){\r\n            return noSuggestions();\r\n          }\r\n          return (\r\n            <ul className=\"suggestions\">\r\n                  {filteredSuggestions.map((suggestion, index) => {\r\n                    if(suggestion) {\r\n                    let className;\r\n\r\n                    if (index === activeSuggestion) {\r\n                      className = \"suggestion-active\";\r\n                    }\r\n      \r\n                    return (\r\n                      <li className={className} key={`${suggestion}.${index}`} onClick={handleSelect}>\r\n                        {suggestion}\r\n                      </li>\r\n                    );\r\n                  }else{\r\n                    return null\r\n                  };\r\n                  })}\r\n                </ul>\r\n              );\r\n          } else {\r\n            noSuggestions();\r\n          }\r\n        }    \r\n    }\r\n    \r\n\r\n    return (\r\n        <S.AutoCompleteWrapper ref={ref}>\r\n          <InputField\r\n            value={suggestionState.userInput}\r\n            onChange={handleOnChange}\r\n            onKeyDown={handleOnKeyDown}\r\n            onFocus={handleOnFocus}\r\n            getValues={getValues}\r\n            name={name}\r\n            {...props}\r\n          />\r\n          {suggestionsListComponent()}\r\n      </S.AutoCompleteWrapper>\r\n    )\r\n}\r\n\r\nexport default AutoComplete\r\n","import React from 'react'\r\nimport usePlacesAutocomplete from \"use-places-autocomplete\";\r\nimport AutoComplete from './AutoComplete';\r\n\r\n/* \r\n  Uses google places api to lookup address and utilizes AutoComplete\r\n  to generate dropdown list of choices to select from.\r\n*/\r\n\r\nconst Address = ({ disable=false, text, name, ...props }) => {\r\n    const {\r\n        ready,\r\n        suggestions: { status, data },\r\n        value,\r\n        setValue,\r\n        clearSuggestions,\r\n      } = usePlacesAutocomplete();\r\n\r\n      React.useEffect(() => {\r\n        if(text){\r\n          setValue(text);\r\n        }\r\n      }, [text, setValue]);\r\n\r\n      const handleInput = (e) => {\r\n        setValue(e.target.value);\r\n      };\r\n     \r\n      const handleSelect = (e) => () => {\r\n        setValue(e.currentTarget.innerText, false);\r\n        clearSuggestions();\r\n      };\r\n\r\n      const handleOnBlur = () => {\r\n        clearSuggestions();\r\n      }\r\n\r\n      const getDescriptions = data.map(({description}) => description);\r\n\r\n      return (\r\n          <AutoComplete\r\n            value={value}\r\n            onSelect={handleSelect}\r\n            onChange={handleInput}\r\n            disabled={disable || !ready}\r\n            handleonblur={handleOnBlur}\r\n            suggestions={getDescriptions}\r\n            status={status}\r\n            useDefaultFilter={false}\r\n            name={name}\r\n            {...props}\r\n          />\r\n      );\r\n}\r\n\r\nexport default Address\r\n","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport InputField from \"./InputField\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst PropertyInfo = ({ \r\n    register, \r\n    errors,\r\n    getValues, \r\n    agentType, \r\n    }) => {\r\n    const propertyInformation =\r\n    errors[\"property\"]?.mlsNumber ||\r\n    errors[\"property\"]?.deedReference ||\r\n    errors[\"property\"]?.address ||\r\n    errors[\"property\"]?.mapReferences;\r\n\r\n    const handleConditionalFields = () => {\r\n        if(agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH){\r\n            return (\r\n                <S.MultiContainer>\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mapReferences\"\r\n                    label=\"Map References (Page)\"\r\n                    errors={errors[\"property\"]?.mapReferences}\r\n                    register={register}\r\n                    required={true} />\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.deedReference\"\r\n                    label=\"Deed Reference (Book)\" \r\n                    errors={errors[\"property\"]?.deedReference} \r\n                    register={register}\r\n                    required={true} />\r\n                </S.MultiContainer>\r\n            )\r\n        }else{\r\n            return (\r\n            <div>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.deedReference\"\r\n                label=\"Deed Reference (Book)\" \r\n                errors={errors[\"property\"]?.deedReference} \r\n                register={register}\r\n                required={true} />\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.FieldWrapper error={propertyInformation}>\r\n            <S.FieldTitle>Property Information</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mlsNumber\"\r\n                    label=\"MLS Number\" \r\n                    errors={errors[\"property\"]?.mlsNumber}\r\n                    register={register} \r\n                    required={true} />\r\n                     <S.AddressWrapper>\r\n                    <Address\r\n                    getValues={getValues}\r\n                    name=\"property.address\"\r\n                    label=\"Address\" \r\n                    errors={errors[\"property\"]?.address}\r\n                    register={register} \r\n                    required={true} />\r\n                    </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n            {handleConditionalFields()}\r\n        </S.FieldWrapper>\r\n    )\r\n}\r\n\r\nexport default PropertyInfo\r\n","import React from 'react';\r\nimport * as S from \"./InputFieldStyled\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\"\r\n\r\nconst CustomDatePicker = ({ control, name, label, errors, required, className, showYearPicker, dateFormat=\"MM/dd/yyyy\", getValues, ...rest }) => {\r\n    const classVal = required ? `${className} required-field`: className;\r\n    const { isEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n    \r\n    return (\r\n        <S.InputField disablePadding={true} isEmpty={isEmpty}>\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                defaultValue={null}\r\n                {...rest}\r\n                render={(props) => {\r\n                return <DatePicker\r\n                    showYearPicker={showYearPicker}\r\n                    dateFormat={dateFormat}\r\n                    defaultValue={null}\r\n                    placeholderText={null}\r\n                    startDate={null}\r\n                    className=\"input\"\r\n                    selected={ props.value !== null ? new Date(props.value) : null}\r\n                    onChange={(e) => {\r\n                        props.onChange(e)\r\n                        setIsEmpty(true);\r\n                        if(e === null){\r\n                            setIsEmpty(false)\r\n                        }\r\n                    }}\r\n                    onBlur={(e) => {\r\n                        if(e.target.value === \"\"){\r\n                            setIsEmpty(false);\r\n                        }\r\n                        e.preventDefault();\r\n                    }}\r\n                    onFocus={(e) => {\r\n                        setIsEmpty(true)\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                    }}\r\n                />\r\n                }}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {required && errors && <span>Required Field</span>}\r\n        </S.InputField>  \r\n    )\r\n}\r\n\r\nexport default CustomDatePicker\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 1em;\r\n`;\r\n\r\nexport const optionWrapper = styled.div`\r\n    margin: .5rem;\r\n`;\r\n\r\nexport const InputRadio = styled.input`\r\n    width: 1rem;\r\n    height: 1rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    margin: .25em;\r\n    font-weight: 450;\r\n    padding-left: .25rem;\r\n`;\r\n\r\nexport const OtherWrapper = styled.div`\r\n    display: inline-block;\r\n    margin: .5rem;\r\n    position: relative;\r\n    top: -1.125rem;\r\n`;","import React from 'react';\r\nimport * as S from \"./RadioSelectorStyled\";\r\nimport InputField from \"./InputField\";\r\n\r\nconst RadioSelector = React.memo(({ register, name, array, other=false, defaultVal, getValues, watch }) => {\r\n    /* \r\n        Lines 9 -> 13 Takes care of the inputfield value on return to the page\r\n        if it was a selected as the option. If it was not selected then it will\r\n        be set to \"\"\r\n    */\r\n    let watchVal = watch ? watch(name) : false;\r\n    let textFieldHasValue = watchVal ? !array.includes(watchVal) : \"\";\r\n    const [otherVal, setOtherVal] = React.useState({\r\n        text: textFieldHasValue ? watchVal : \"\"\r\n    })\r\n\r\n    const handleSetOtherVal = (e) => {\r\n        setOtherVal(state => {\r\n            return {\r\n                text: e.target.value\r\n            }\r\n        });\r\n        e.persist();\r\n    }\r\n\r\n    // TODO: Make Labels Clickable? Improves interaction for older/elderly users\r\n    return (\r\n        <React.Fragment>\r\n            <S.Container>\r\n                {array.map((value) => (\r\n                    <S.optionWrapper key={`input-${value}`}>\r\n                        <S.InputRadio name={name} type=\"radio\" defaultValue={value} defaultChecked={value === defaultVal} ref={register} />\r\n                        <S.Label>\r\n                            {value}\r\n                        </S.Label>\r\n                    </S.optionWrapper>\r\n                ))}\r\n            </S.Container>\r\n            {other ?\r\n                <S.OtherWrapper>\r\n                    <S.InputRadio\r\n                    value={otherVal?.text}\r\n                    name={name}\r\n                    type=\"radio\"\r\n                    style={{marginTop: \"1.825rem\"}}\r\n                    defaultChecked={otherVal?.text === defaultVal}\r\n                    ref={register}\r\n                    />\r\n                    <div style={{float: \"right\"}}>\r\n                        <InputField\r\n                        onChange={handleSetOtherVal}\r\n                        value={otherVal?.text}\r\n                        label=\"Other\"\r\n                        required={false}\r\n                        getValues={getValues}\r\n                         />\r\n                    </div>\r\n                </S.OtherWrapper> \r\n            : null }\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nexport default RadioSelector\r\n","import * as yup from \"yup\";\r\nimport { AGENT_TYPES, MORTGAGE_TYPES, PROPERTY_TYPES } from \"../shared\";\r\n\r\n// This is used in lazy validation rules found here: https://github.com/jquense/yup/issues/130#issuecomment-578392176\r\nconst mapRules = (map, rule) => Object.keys(map).reduce((newMap, key) => ({...newMap, [key]: rule}), {});\r\n\r\n// TODO: Find solution to replace regular expression\r\n// Regular Express to Verify phone numbers taken from: https://www.sitepoint.com/community/t/phone-number-regular-expression-validation/2204/4\r\nconst PHONE_REG_EXP = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\nconst REQUIRED = \"Required\";\r\nconst NOT_REQUIRED = \"Not Required\"\r\nconst VALID_EMAIL = \"Must be a Valid Email!\";\r\nconst NUMBER_ERROR_MESSAGE = \"Can only contain numbers\";\r\n\r\n\r\nexport const AgentTypeValidation = (agentType) => yup.object().shape({\r\n    agentType: yup.string().required(REQUIRED),\r\n});\r\n\r\nexport const PropertyValidation = (agentType) => yup.object().shape({\r\n    property: yup.object().shape({\r\n        mapReferences: (agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH) ?  yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        deedReference: yup.string().required(REQUIRED).test('len', 'Must be in format XXXX-XXXXXXX', val => val.length === 11).required(REQUIRED),\r\n        mlsNumber: yup.string().test('len', 'Must be exactly 7 digits', val => val.length === 7).required(REQUIRED),\r\n        address: yup.string().required(REQUIRED),\r\n        propertyType: yup.string().required(REQUIRED).oneOf([...Object.values(PROPERTY_TYPES)], \"Select a valid Property type.\"),\r\n        condoManagementCompany: yup.string()\r\n        .when(\r\n            \"propertyType\",\r\n        { is: val => val === PROPERTY_TYPES.CONDO,\r\n            then: yup.string().required(REQUIRED)\r\n        }),\r\n        vacentOrOccupied: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        dateHouseBuilt: yup.string().required(REQUIRED),\r\n        titleOrTownSewer: yup.string().required(REQUIRED),\r\n        publicOrTownWater: yup.string().required(REQUIRED),\r\n        inspectionDeadline: yup.string().required(REQUIRED),\r\n        buyerhasSubmittedAdditionalOffer: agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        loxBoxCode: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE) : yup.mixed().notRequired(),\r\n})});\r\n\r\nexport const MortgageValidation = (agentType) => yup.object().shape({\r\n    mortgage: yup.object().shape({\r\n        typeOfMortgage: yup.string().required(REQUIRED),\r\n        purchasePrice: yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE),\r\n        firstDeposit: yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE),\r\n        secondDeposit: yup.string().notRequired(NOT_REQUIRED),\r\n        areConcessions: yup.string().notRequired(NOT_REQUIRED),\r\n        concessions: yup.string()\r\n        .when(\r\n            \"areConcessions\",\r\n            { is: val => val === true,\r\n              then: yup.string().required(REQUIRED)\r\n        }),\r\n        mortgageCommitmentDeadline: yup.string().when(\r\n            \"typeOfMortgage\",\r\n            {\r\n                is: val => val !== MORTGAGE_TYPES.CASH,\r\n                then: yup.string().required(REQUIRED)\r\n            }\r\n        ),\r\n        houseClosingDate: yup.string().required(REQUIRED),\r\n    })\r\n})\r\n\r\nexport const AttorneyValidation = (agentType) => yup.object().shape({\r\n    firstName: yup.string().required(REQUIRED),\r\n    lastName: yup.string().required(REQUIRED),\r\n    emailAddress: yup.string().required(REQUIRED),\r\n    emailAddressVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('emailAddress'), null], \"Email Addresses Must Match\"),\r\n    firmName: yup.string().notRequired(),\r\n    phoneNumber: yup.string().notRequired().matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n});\r\n\r\nexport const TestAttorneyValidation = (agentType) => yup.lazy(obj => \r\n    yup.object(mapRules(obj, yup.object({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        emailAddress: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailAddressVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('emailAddress'), null], \"Email Addresses Must Match\"),\r\n        firmName: yup.string().required(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    })))\r\n)\r\n\r\nexport const FSBOValidation = (agentType) => yup.object().shape({\r\n    forSaleByOwner: yup.string().required(REQUIRED),\r\n    sellerFirstName: yup.string().notRequired(),\r\n    sellerLastName: yup.string().notRequired(),\r\n    sellerEmail: yup.string().notRequired(),\r\n    sellerEmailVerification: yup.string().notRequired().oneOf([yup.ref('sellerEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyfirstName: yup.string().notRequired(),\r\n    attorneylastName: yup.string().notRequired(),\r\n    attorneyEmail: yup.string().notRequired(),\r\n    attorneyEmailVerification: yup.string().notRequired().oneOf([yup.ref('attorneyEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyPhoneNumber: yup.string().notRequired(),\r\n});\r\n\r\nexport const ListingBrokerValidation = (agentType) => yup.object().shape({\r\n    listingBroker: yup.object().shape({\r\n        company: yup.string().required(REQUIRED),\r\n        address: yup.string().notRequired(),\r\n    }),\r\n    listingAgent: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"),\r\n        phoneNumber: yup.string().required(REQUIRED),\r\n        mlsID: yup.string().required(REQUIRED)\r\n    }),\r\n});\r\n\r\nexport const LendersValidation = (agentType) => yup.object().shape({\r\n    lender: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        companyName: yup.string().notRequired(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n    }),\r\n});\r\n\r\nexport const AdditionalInformationValidation = (agentType) => yup.object().shape({\r\n\r\n});\r\n\r\n/* \r\n    This object validation rule can be utilized to define a lazy array\r\n*/\r\nexport const ClientValidation = (agentType) => yup.object().shape({\r\n    client: yup.lazy(obj =>\r\n        yup.object(mapRules(obj, yup.lazy(obj2 =>\r\n                    yup.object(mapRules(obj2,\r\n                        yup.object().shape({\r\n                            firstName: yup.string().required(REQUIRED),\r\n                            lastName: yup.string().required(REQUIRED),\r\n                            fullAddress: yup.string().required(REQUIRED),\r\n                            phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n                            email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n                            emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n                        })\r\n                    ))\r\n                )\r\n            )\r\n        )\r\n    )\r\n})\r\n\r\nexport const AgentAndBrokerValidation = (agentType) =>  yup.object().shape({\r\n    broker: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        companyName: yup.string().required(REQUIRED),\r\n    })))),\r\n    agent: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        MLSNumber: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n        compensationPerMLS: agentType === AGENT_TYPES.SELLERS ? yup.string().required(REQUIRED) : yup.mixed().notRequired(),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    }))))\r\n});","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// TODO: Update button to save state on back\r\nexport const Back = () => {\r\n    const history = useHistory();\r\n    return (<S.Input type=\"button\" value=\"Back\" onClick={() => history.goBack()} />)\r\n}\r\n\r\nexport const Next = () => {\r\n    return (\r\n        <S.Input type=\"submit\" value=\"Next\" />\r\n    )\r\n}\r\n\r\n","export default function updateAction(state, payload) {\r\n    return {\r\n      ...state,\r\n      details: {\r\n        ...state.details,\r\n        ...payload\r\n      }\r\n    };\r\n  }\r\n  ","import { useHistory } from \"react-router-dom\";\r\nimport { useStateMachine } from 'little-state-machine';\r\nimport updateAction from '../state/updateState';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers\";\r\n\r\n\r\nconst useCustomFormHook =  (validationRules ) => {\r\n    const { state, action } = useStateMachine(updateAction);\r\n    const agentType = state.details.agentType ? state.details.agentType : null\r\n    const { push } = useHistory();\r\n    const { register, handleSubmit, getValues, errors, control, watch, setValue } = useForm({\r\n        defaultValues: state.details,\r\n        mode: 'onBlur',\r\n        reValidateMode: 'onBlur',\r\n        resolver: validationRules && process.env.REACT_APP_ENABLE_VALIDATION === 'true' ? yupResolver(validationRules(agentType)) : null\r\n    });\r\n    \r\n    return {\r\n        setValue,\r\n        register,\r\n        control,\r\n        handleSubmit,\r\n        getValues,\r\n        errors,\r\n        action,\r\n        push,\r\n        state,\r\n        agentType,\r\n        watch\r\n    }\r\n} \r\n\r\nexport default useCustomFormHook","import React from 'react';\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport PropertyInfo from \"../FormFields/PropertyInfo\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { PropertyValidation } from \"../../validation\";\r\nimport { PROPERTY_TYPES, AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\nconst Property = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(PropertyValidation);\r\n    const [currPropertyType, setCurrentPropertyType] = React.useState(\"\");\r\n    const [additionalOffer, setAdditionalOffer] = React.useState(false);\r\n    const [inspectionWaved, setInspectionWaved] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Mortgage\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <PropertyInfo agentType={agentType} getValues={getValues} errors={errors} register={register} />\r\n                <S.FieldWrapper error={errors[\"property\"]?.propertyType}>\r\n                    <S.FieldTitle>Property Type</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Property Types\"\r\n                        name=\"property.propertyType\"\r\n                        label=\"Select a Property Type\"\r\n                        errors={errors[\"property\"]?.propertyType}\r\n                        options={Object.values(PROPERTY_TYPES)}\r\n                        register={register}\r\n                        isValue={currPropertyType}\r\n                        setValue={setCurrentPropertyType} />\r\n                </S.FieldWrapper>\r\n                {/* TODO: Multi Family. Are there tenants \r\n                apt1, staying, vaca date (NOT REQUIRED)\r\n                and if there are are they staying. Final vaca date*/}\r\n                {currPropertyType === \"Condo\" ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.condoManagementCompany}>\r\n                        <S.FieldTitle>Who is the Condo Management Company</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.condoManagementCompany\"\r\n                                label=\"Management Company\"\r\n                                errors={errors[\"property\"]?.condoManagementCompany}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null\r\n                }\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.vacentOrOccupied}>\r\n                        <S.FieldTitle>Is the house vacant or occupied?</S.FieldTitle>\r\n                        <RadioSelector\r\n                            register={register}\r\n                            name=\"property.vacentOrOccupied\"\r\n                            array={[\"Vacant\", \"Occupied\"]}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors[\"property\"]?.dateHouseBuilt}>\r\n                    <S.FieldTitle>Year Built</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        getValues={getValues}\r\n                        showYearPicker={true}\r\n                        control={control}\r\n                        name=\"property.dateHouseBuilt\"\r\n                        label=\"Select Date Built\"\r\n                        required={true}\r\n                        dateFormat=\"yyyy\"\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.titleOrTownSewer}>\r\n                    <S.FieldTitle>Is there a Title V or Town Sewer</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.titleOrTownSewer\"\r\n                        array={[\"Title V\", \"Public Sewer\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.publicOrTownWater}>\r\n                    <S.FieldTitle>Public or Town Water</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.publicOrTownWater\"\r\n                        array={[\"Town Water\", \"Private Water\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.inspectionWaved || errors[\"property\"]?.inspectionDeadline}>\r\n                    <S.FieldTitle>Inspection Waved\r\n                            <Slider\r\n                            isChecked={inspectionWaved}\r\n                            setIsChecked={setInspectionWaved}\r\n                            name=\"property.isInspectionWaved\"\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.FieldTitle>\r\n                    {inspectionWaved ? null :\r\n                        <CustomDatePicker\r\n                            getValues={getValues}\r\n                            control={control}\r\n                            name=\"property.inspectionDeadline\"\r\n                            label=\"Select Inspection Deadline\"\r\n                            required={true}\r\n                        />}\r\n                </S.FieldWrapper>\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH\r\n                    ? <S.FieldWrapper error={errors[\"property\"]?.loxBoxCode}>\r\n                        <S.FieldTitle>Lox Box Code</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.loxBoxCode\"\r\n                                label=\"Lox Box Code\"\r\n                                errors={errors[\"property\"]?.loxBoxCode}\r\n                                required={true}\r\n                                register={register}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper> : null}\r\n                {/* TODO: This is currently used to determine what type of email should be sent.\r\n                    Note: Refer to Wendy Email for Message differences.\r\n                */}\r\n                {agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.buyerHasSubmittedAdditionalOffer}>\r\n                        <S.FieldTitle>Has the buyer submitted an offer for another property?\r\n                        <Slider\r\n                                isChecked={additionalOffer}\r\n                                setIsChecked={setAdditionalOffer}\r\n                                name=\"property.buyerHasSubmittedAdditionalOffer\"\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper> : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    );\r\n}\r\n\r\nexport default Property","import React from \"react\";\r\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\r\n\r\nconst useLoadGoogleSheetInfo = (\r\n    /** The key found on a google sheet which will give access to the sheet */\r\n    sheetKey,\r\n    /** What sheet index would you like to load. This correlates to the sheet tabs at the bottom of google sheets */\r\n    sheetIndex,\r\n    /** Defines what cell range to load from the sheet. E.g., 'A:B' while load columns A and B */\r\n    cellRange,\r\n    /** A function is expected here and is passed the sheet object. This allows each component\r\n     *  to decide how it wants to handle the data retrieved from the sheet.\r\n     */\r\n    handleSheetData,\r\n    /**  By defining the values object at initialization we can avoid switching between controlled and uncontrolled components. */\r\n    valuesObj,\r\n) => {\r\n    const [ready, setReady] = React.useState(false);\r\n    const [sheet, setSheet] = React.useState();\r\n    const [values, setValues] = React.useState(valuesObj);\r\n    const [arrayData, setArrayData] = React.useState({});\r\n\r\n    React.useEffect(() => {\r\n        let componentIsMounted = true;\r\n        if (componentIsMounted) {\r\n            loadSpreadSheetInformation(componentIsMounted)\r\n                .then(sheet => componentIsMounted ? setSheet(sheet) : null)\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n            setReady(ready);\r\n        }\r\n\r\n        return () => (componentIsMounted = false);\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const loadSpreadSheetInformation = async (componentIsMounted) => {\r\n        const doc = new GoogleSpreadsheet(sheetKey);\r\n        /** This json is a service account from google developer console: https://console.developers.google.com/ */\r\n        await doc.useServiceAccountAuth(require(\"../wendy-realestate.json\")).catch(error => console.log(error));\r\n        await doc.loadInfo().catch(error => console.log(error));\r\n        const sheet = doc.sheetsByIndex[sheetIndex];\r\n        await sheet.loadCells(cellRange).catch(error => console.log(error));\r\n\r\n        if (handleSheetData) {\r\n            await handleSheetData(sheet, componentIsMounted);\r\n        }\r\n\r\n        return sheet;\r\n    }\r\n\r\n    return {\r\n        ready,\r\n        sheet,\r\n        setSheet,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    }\r\n}\r\n\r\nexport default useLoadGoogleSheetInfo","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\nimport useLoadGoogleSheetInfo from \"../../hooks/useLoadGoogleSheetInfo\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst Broker = React.memo(({ getValues, errors, register, represents, ...props}) => {\r\n    const handleSheetData = (brokerSheet, componentIsMounted) => {\r\n        if(componentIsMounted){\r\n        const companyName = [];\r\n        const address = [];\r\n        let index = 1;\r\n        while(brokerSheet.getCell(index, 0).value !== null){\r\n            companyName.push(brokerSheet.getCell(index,0).value);\r\n            address.push(brokerSheet.getCell(index,1).value);\r\n            index++;\r\n        }\r\n\r\n        setArrayData({\r\n            CompanyName: companyName,\r\n            Address: address\r\n        });}\r\n    }\r\n    const spreadSheetKey = \"1t5vhaok4dHE0H40hDd0B75mRisNf7cHDHa84Vp-aNN4\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData \r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:B',\r\n        handleSheetData,\r\n        {\r\n            Company: \"\",\r\n            Address: \"\"\r\n        }\r\n        );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Company: arrayData.CompanyName[index],\r\n                Address: arrayData.Address[index],\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <S.FieldWrapper>\r\n            <S.FieldTitle>Broker Information</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                <AutoComplete\r\n                    name={`${represents}.broker.company`}\r\n                    errors={errors[`${represents}`]?.broker?.company}\r\n                    register={register}\r\n                    getValues={getValues}\r\n                    label=\"Broker Name\"\r\n                    onSelect={handleOnSelect}\r\n                    useDefaultFilter={true}\r\n                    onChange={(e) => setValues(state => {\r\n                        e.persist();\r\n                        return {\r\n                            ...state,\r\n                            Company: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                        }\r\n                    })}\r\n                    suggestions={arrayData.CompanyName}\r\n                    status={ready}\r\n                    value={values.Company}\r\n                    {...props}\r\n                />\r\n                <S.AddressWrapper>\r\n                <Address\r\n                    name={`${represents}.broker.address`}\r\n                    errors={errors[`${represents}`]?.broker?.address}\r\n                    register={register}\r\n                    getValues={getValues}\r\n                    label=\"Address\"\r\n                    useDefaultFilter={true}\r\n                    status={ready}\r\n                    text={values.Address}\r\n                    {...props}\r\n                />\r\n                </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n        </S.FieldWrapper>\r\n    )\r\n})\r\n\r\nexport default Broker\r\n","import React from 'react'\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Broker from \"./Broker\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { AgentAndBrokerValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useLoadGoogleSheetInfo from '../../hooks/useLoadGoogleSheetInfo';\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\n\r\nconst Agent = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(AgentAndBrokerValidation);\r\n    const { represents } = useParams();\r\n    const handleSheetData = (agentSheet, componentIsMounted) => {\r\n        if(componentIsMounted){\r\n        const emails = [];\r\n        const names = [];\r\n        const mlsNumbers = [];\r\n        const organizations = [];\r\n        const phoneNumbers = [];\r\n\r\n        let index = 1;\r\n        while(agentSheet.getCell(index, 0).value !== null) {\r\n            names.push(agentSheet.getCell(index, 0).value);\r\n            emails.push(agentSheet.getCell(index, 1).value);\r\n            phoneNumbers.push(agentSheet.getCell(index, 2).value);\r\n            organizations.push(agentSheet.getCell(index, 3).value);\r\n            mlsNumbers.push(agentSheet.getCell(index, 4).value);\r\n            index++;\r\n        }\r\n\r\n        const emailVerification = emails;\r\n\r\n        setArrayData({\r\n            Emails: emails,\r\n            EmailVerifications: emailVerification,\r\n            Names: names,\r\n            PhoneNumbers: phoneNumbers,\r\n            Organizations: organizations,\r\n            MLSNumbers: mlsNumbers,\r\n        });\r\n        }\r\n    }\r\n    \r\n    const spreadSheetKey = \"1Ra6DMJkEw0BN_XBShvL-Cs-zKzBtj4ilPK7WNGLbk8Y\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:E',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            PhoneNumber: \"\",\r\n            Organization: \"\",\r\n            MLSNumber: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                PhoneNumber: arrayData.PhoneNumbers[index] ? arrayData.PhoneNumbers[index] : values.PhoneNumber,\r\n                Organization: arrayData.Organizations[index] ? arrayData.Organizations[index] : \"\",\r\n                MLSNumber: arrayData.MLSNumbers[index] ? arrayData.MLSNumbers[index] : \"\",\r\n            }\r\n        });\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(`/Attorney/${AGENT_TYPES.BUYERS}`));\r\n        }\r\n    }\r\n    \r\n    const loadAgentPhoneNumber = () => {\r\n        return (\r\n            <InputField\r\n                value={values.PhoneNumber}\r\n                onChange={(e) => {\r\n                    e.persist();\r\n                    setValues(state => {\r\n                    return {\r\n                        ...state,\r\n                        PhoneNumber: e?.target?.value\r\n                    }\r\n                })}}\r\n                getValues={getValues}\r\n                name={`agent.${represents}.phoneNumber`}\r\n                label=\"Phone Number\"\r\n                errors={errors?.agent?.[represents]?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    const loadFieldsBasedOnAgent = () => {\r\n        if (AGENT_TYPES.BUYERS === agentType) {\r\n            return (\r\n                <div>\r\n                    {loadAgentPhoneNumber()}\r\n                </div>\r\n            )\r\n        } else if (AGENT_TYPES.SELLERS === agentType) {\r\n            return (\r\n                <S.MultiContainer>\r\n                    {loadAgentPhoneNumber()}\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`agent.${represents}.compensationPerMLS`}\r\n                        label=\"Agency Compensation per MLS\"\r\n                        errors={errors?.agent?.[represents]?.compensationPerMLS}\r\n                        register={register}\r\n                        required={true}\r\n                    />\r\n                </S.MultiContainer>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper >\r\n                    <S.FieldTitle>{represents}'s Agent</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            value={values.Email}\r\n                            suggestions={arrayData.Emails}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.email`}\r\n                            label=\"Email Address\"\r\n                            errors={errors?.agent?.[represents]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <S.AddressWrapper>\r\n                        <AutoComplete\r\n                            value={values.EmailVerification}\r\n                            suggestions={arrayData.EmailVerifications}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    EmailVerification: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.emailVerification`}\r\n                            label=\"Email Address Verification\"\r\n                            errors={errors?.agent?.[represents]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.Names}\r\n                            value={values.Name}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.Name`}\r\n                            label=\"Name\"\r\n                            errors={errors?.agent?.[represents]?.Name}\r\n                            required={true}\r\n                            register={register}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <S.AddressWrapper>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.MLSNumbers}\r\n                            value={values.MLSNumber}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    MLSNumber: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.MLSNumber`}\r\n                            label=\"MLS Number\"\r\n                            errors={errors?.agent?.[represents]?.MLSNumber}\r\n                            required={true}\r\n                            register={register}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                    {loadFieldsBasedOnAgent()}\r\n                </S.FieldWrapper>\r\n                <Broker\r\n                    getValues={getValues}\r\n                    errors={errors}\r\n                    register={register}\r\n                    represents={represents}\r\n                />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Agent\r\n","import React from \"react\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"../state/updateState\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Result = props => {\r\n  const { state } = useStateMachine(updateAction);\r\n  const { goBack } = useHistory();\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Result</h2>\r\n      <pre>{JSON.stringify(state, null, 2)}</pre>\r\n      <button onClick={() => goBack()}>Back</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { ListingBrokerValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, MORTGAGE_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport Broker from \"./Broker\";\r\n\r\n// In my notes ListingBroker === ListingBroker and ListingAgent pages\r\nconst ListingBroker = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType, state, setValue } = useCustomFormHook(ListingBrokerValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Attorney/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                if (state.details.mortgage.typeOfMortgage === MORTGAGE_TYPES.CASH) {\r\n                    push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n                } else {\r\n                    push(handleDeploymentPath(\"/Lenders\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // This was done because the field will be wrapped different html elements depending on agentType\r\n    const phoneNumberField = () => {\r\n        return (\r\n            <InputField\r\n                getValues={getValues}\r\n                name=\"listing.agent.phoneNumber\"\r\n                label=\"Phone Number\"\r\n                errors={errors?.listing?.Agent?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <Broker\r\n                    setValue={setValue}\r\n                    represents={AGENT_TYPES.SELLERS}\r\n                    getValues={getValues}\r\n                    register={register}\r\n                    errors={errors}\r\n                />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Listing Agent</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors?.listing?.agent?.firstName}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors?.listing?.agent?.lastName}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.email\"\r\n                            label=\"Email\"\r\n                            errors={errors?.listing?.Agent?.email}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors?.listing?.agent?.emailVerification}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    {state.details.agentType === AGENT_TYPES.SELLERS || state.details.agentType === AGENT_TYPES.BOTH ?\r\n                        <S.MultiContainer>\r\n                            {phoneNumberField()}\r\n                            <InputField\r\n                                required={true}\r\n                                getValues={getValues}\r\n                                name=\"listing.agent.mlsID\"\r\n                                label=\"MLS ID\"\r\n                                errors={errors?.listing?.agent?.mlsID}\r\n                                register={register}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        :\r\n                        <div>\r\n                            {phoneNumberField()}\r\n                        </div>\r\n                    }\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ListingBroker\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { LendersValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useLoadGoogleSheetInfo from \"../../hooks/useLoadGoogleSheetInfo\";\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\n\r\nconst Lenders = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(LendersValidation);\r\n\r\n    const handleSheetData = (agentSheet, componentIsMounted) => {\r\n        if(componentIsMounted){\r\n        const names = [];\r\n        const organizations = [];\r\n        const emails = [];\r\n\r\n        let index = 1;\r\n        while(agentSheet.getCell(index, 0).value !== null) {\r\n            names.push(agentSheet.getCell(index, 0).value);\r\n            emails.push(agentSheet.getCell(index, 1).value);\r\n            organizations.push(agentSheet.getCell(index, 2).value);\r\n            index++;\r\n        }\r\n\r\n        const emailVerifications = emails;\r\n\r\n        setArrayData({\r\n            Emails: emails,\r\n            EmailVerifications: emailVerifications,\r\n            Names: names,\r\n            Organizations: organizations,\r\n        });\r\n        }\r\n    }\r\n    \r\n    const spreadSheetKey = \"1aRrvpEn8Qe-VugV9Qbg9U9eIYPQdku_cWM2eOMkCOj4\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:C',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            Organization: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                Organization: arrayData.Organizations[index] ? arrayData.Organizations[index] : \"\",\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        console.log(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Lender Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.Names}\r\n                            value={values.Name}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name=\"lender.Name\"\r\n                            label=\"Full Name\"\r\n                            errors={errors.lender?.Name}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <InputField\r\n                            value={values.Organization}\r\n                            onChange={(e) => {\r\n                                e.persist();\r\n                                setValues(state => {\r\n                                return {\r\n                                    ...state,\r\n                                    Organization: e?.target?.value\r\n                                }\r\n                            })}}\r\n                            getValues={getValues}\r\n                            name=\"lender.Organization\"\r\n                            label=\"Organization Name\"\r\n                            errors={errors.lender?.Organization}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.Emails}\r\n                            value={values.Email}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name=\"lender.email\"\r\n                            label=\"Email\"\r\n                            errors={errors.lender?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <InputField\r\n                            value={values.EmailVerification}\r\n                            onChange={(e) => {\r\n                                e.persist();\r\n                                setValues(state => {\r\n                                return {\r\n                                    ...state,\r\n                                    EmailVerification: e?.target?.value\r\n                                }\r\n                            })}}\r\n                            getValues={getValues}\r\n                            name=\"lender.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors.lender?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.phoneNumber\"\r\n                            label=\"Phone Number\"\r\n                            errors={errors.lender?.phoneNumber}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Lenders\r\n","import React from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { TestAttorneyValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useLoadGoogleSheetInfo from '../../hooks/useLoadGoogleSheetInfo';\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\n\r\n\r\n// TODO: If introduction give list of attorneys. ( cleint choose and send email to this attorney)\r\n// I think a drop down list would be the best choice\r\nconst Attorney = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(TestAttorneyValidation);\r\n    const { represents } = useParams();\r\n    const [hasAttorney, sethasAttorney] = React.useState(true);\r\n    const [wantsRecommendation, setWantsRecommendation] = React.useState(false);\r\n\r\n    const handleSheetData = (agentSheet, componentIsMounted) => {\r\n        if(componentIsMounted){\r\n        const emails = [];\r\n        const names = [];\r\n        const addresses = [];\r\n        const firmNames = [];\r\n        const phoneNumbers = [];\r\n\r\n        let index = 1;\r\n        while(agentSheet.getCell(index, 0).value !== null) {\r\n            names.push(agentSheet.getCell(index, 0).value);\r\n            emails.push(agentSheet.getCell(index, 1).value);\r\n            phoneNumbers.push(agentSheet.getCell(index, 2).value);\r\n            addresses.push(agentSheet.getCell(index, 3).value);\r\n            firmNames.push(agentSheet.getCell(index, 4).value);\r\n            index++;\r\n        }\r\n\r\n        const emailVerification = emails;\r\n\r\n        setArrayData({\r\n            Emails: emails,\r\n            EmailVerifications: emailVerification,\r\n            Names: names,\r\n            PhoneNumbers: phoneNumbers,\r\n            FirmNames: firmNames,\r\n            Addresses: addresses,\r\n        });\r\n        }\r\n    }\r\n    \r\n    const spreadSheetKey = \"1ffex1Am_wSX_Rebav49Sf2plvujBbPBRkA1wPagvXL8\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:E',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            PhoneNumber: \"\",\r\n            FirmName: \"\",\r\n            Address: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                PhoneNumber: arrayData.PhoneNumbers[index] ? arrayData.PhoneNumbers[index] : \"\",\r\n                FirmName: arrayData.FirmNames[index] ? arrayData.FirmNames[index] : \"\",\r\n                Address: arrayData.Addresses[index] ? arrayData.Addresses[index] : \"\",\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n\r\n            if (represents === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(`/Client/${AGENT_TYPES.BUYERS}`));\r\n\r\n            } else if (represents === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/FSBO\"));\r\n        }\r\n    }\r\n\r\n    const askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot = () => {\r\n        if ((agentType === AGENT_TYPES.SELLERS && represents === AGENT_TYPES.SELLERS) ||\r\n            (agentType === AGENT_TYPES.BUYERS && represents === AGENT_TYPES.BUYERS)) {\r\n            return (\r\n                <React.Fragment>\r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>\r\n                            Do you have an attorney?\r\n                            <Slider\r\n                                isChecked={hasAttorney}\r\n                                setIsChecked={sethasAttorney}\r\n                                name={`attorney.${represents}.hasAttorney`}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper>\r\n                    {hasAttorney ? null : \r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>\r\n                            Would you like a recommendation and introduction?\r\n                            <Slider \r\n                                isChecked={wantsRecommendation}\r\n                                setIsChecked={setWantsRecommendation}\r\n                                name={`attorney.${represents}.wantsRecommendationAndIntroduction`}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper>\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    const attorneyInformation = () => {\r\n        if(hasAttorney){\r\n        return (\r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>{represents}'s Attorney Information</S.FieldTitle>\r\n                <S.MultiContainer>\r\n                    <AutoComplete\r\n                        value={values.Name}\r\n                        suggestions={arrayData.Names}\r\n                        onChange={(e) => setValues(state => {\r\n                            e.persist();\r\n                            return {\r\n                                ...state,\r\n                                Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                            }\r\n                        })}\r\n                        getValues={getValues}\r\n                        name={`attorney.${represents}.Name`}\r\n                        label=\"Full Name\"\r\n                        errors={errors?.attorney?.[represents]?.Name}\r\n                        required={true}\r\n                        register={register}\r\n                        onSelect={handleOnSelect}\r\n                        status={ready}\r\n                    />\r\n                    <InputField\r\n                        value={values.FirmName}\r\n                        onChange={(e) => {\r\n                            e.persist();\r\n                            setValues(state => {\r\n                            return {\r\n                                ...state,\r\n                                FirmName: e?.target?.value\r\n                            }\r\n                        })}}\r\n                        getValues={getValues}\r\n                        name={`attorney.${represents}.firmName`}\r\n                        label=\"Attorney Firm Name\"\r\n                        errors={errors?.attorney?.[represents]?.firmName}\r\n                        required={false}\r\n                        register={register}\r\n                    />\r\n                </S.MultiContainer>\r\n                <S.MultiContainer>\r\n                    <AutoComplete\r\n                        value={values.Email}\r\n                        suggestions={arrayData.Emails}\r\n                        onChange={(e) => setValues(state => {\r\n                            e.persist();\r\n                            return {\r\n                                ...state,\r\n                                Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                            }\r\n                        })}\r\n                        getValues={getValues}\r\n                        name={`attorney.${represents}.emailAddress`}\r\n                        label=\"Email\"\r\n                        errors={errors?.attorney?.[represents]?.emailAddress}\r\n                        required={true}\r\n                        register={register}\r\n                        onSelect={handleOnSelect}\r\n                        status={ready}\r\n                    />\r\n                    <InputField\r\n                        value={values.EmailVerification}\r\n                        onChange={(e) => {\r\n                            e.persist();\r\n                            setValues(state => {\r\n                            return {\r\n                                ...state,\r\n                                EmailVerification: e?.target?.value\r\n                            }\r\n                        })}}\r\n                        getValues={getValues}\r\n                        name={`attorney.${represents}.emailAddressVerification`}\r\n                        label=\"Email Verification\"\r\n                        errors={errors?.attorney?.[represents]?.emailAddressVerification}\r\n                        required={true}\r\n                        register={register}\r\n                    />\r\n                </S.MultiContainer>\r\n                <div>\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`attorney.${represents}.phoneNumber`}\r\n                        label=\"Phone number\"\r\n                        errors={errors?.attorney?.[represents]?.phoneNumber}\r\n                        required={false}\r\n                        register={register}\r\n                    />\r\n                </div>\r\n            </S.FieldWrapper>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)} >\r\n                <FormHeader />\r\n                {askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot()}\r\n                {attorneyInformation()}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Attorney\r\n","import React from 'react';\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { FSBOValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst ForSaleByOwner = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(FSBOValidation);\r\n    const [isFSBO, setIsFSBO] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/ListingBroker\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>For Sale Buy Owner\r\n                        <Slider\r\n                            isChecked={isFSBO}\r\n                            setIsChecked={setIsFSBO}\r\n                            register={register}\r\n                            name=\"FSBO.isForSaleByOwner\"\r\n                            required={false} />\r\n                    </S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {isFSBO ?\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Buyer's Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors[\"FSBO\"]?.firstName}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors[\"FSBO\"]?.sellerLastName}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.email\"\r\n                            label=\"Email Address\"\r\n                            errors={errors[\"FSBO\"]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors[\"FSBO\"]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                : null}\r\n                {isFSBO ?\r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>Attorney Information (This Attorney will be holding Escrow )</S.FieldTitle>\r\n                        <S.MultiContainer>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.firstName\"\r\n                                label=\"First Name\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.firstName}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.lastName\"\r\n                                label=\"Last Name\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.firstName}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        <S.MultiContainer>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.email\"\r\n                                label=\"Email\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.email}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.emailVerification\"\r\n                                label=\"Email Verification\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.emailVerification}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.phoneNumber\"\r\n                                label=\"Phone Number\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.phoneNumber}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ForSaleByOwner\r\n","import React from 'react'\r\nimport { MortgageValidation } from \"../../validation\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport { MORTGAGE_TYPES } from \"../../shared\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Mortgage = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(MortgageValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Client/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Client/Buyer\"))\r\n            }\r\n        }\r\n    }\r\n\r\n    const [currMortgageType, setCurrMortgageType] = React.useState(\"\");\r\n    //TODO: State doesn't persist on return\r\n    const [isConcessions, setIsConcessions] = React.useState(false);\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper error={errors['mortgage']?.typeOfMortgage}>\r\n                    <S.FieldTitle>What Type of Mortgage</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Mortgage Types\"\r\n                        name=\"mortgage.typeOfMortgage\"\r\n                        label=\"Select a Mortgage Type\"\r\n                        errors={errors['mortgage']?.typeOfMortgage}\r\n                        options={Object.values(MORTGAGE_TYPES)}\r\n                        register={register}\r\n                        isValue={currMortgageType}\r\n                        setValue={setCurrMortgageType}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.purchasePrice}>\r\n                    <S.FieldTitle>Purchase Price</S.FieldTitle>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"mortgage.purchasePrice\"\r\n                            label=\"Purchase price?\"\r\n                            errors={errors['mortgage']?.purchasePrice}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors['mortgage']?.firstDeposit}>\r\n                    <S.FieldTitle>Deposit Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"mortgage.firstDeposit\"\r\n                            label=\"First Deposit Amount?\"\r\n                            errors={errors['mortgage']?.firstDeposit}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"mortgage.secondDeposit\"\r\n                            label=\"Second Deposit Amount?\"\r\n                            errors={errors['mortgage']?.secondDeposit}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors['mortgage']?.areConcessions || errors['mortgage']?.concessions}>\r\n                    <S.FieldTitle>Are there concessions?\r\n                        <Slider\r\n                            isChecked={isConcessions}\r\n                            setIsChecked={setIsConcessions}\r\n                            name=\"mortgage.areConcessions\"\r\n                            required={false}\r\n                            register={register}\r\n                        />\r\n                    </S.FieldTitle>\r\n                    {isConcessions ?\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"mortgage.concessions\"\r\n                                label=\"What are the concessions?\"\r\n                                errors={errors['mortgage']?.concessions}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                        : null}\r\n                </S.FieldWrapper>\r\n                {getValues(`mortgage.typeOfMortgage`) !== MORTGAGE_TYPES.CASH ?\r\n                    <S.FieldWrapper error={errors['mortgage']?.mortgageCommitmentDeadline}>\r\n                        <S.FieldTitle>Mortgage Commitment Deadline</S.FieldTitle>\r\n                        <CustomDatePicker\r\n                            control={control}\r\n                            getValues={getValues}\r\n                            name=\"mortgage.mortgageCommitmentDeadline\"\r\n                            label=\"Select Mortgage Commitment Date\"\r\n                            required={true}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors['mortgage']?.houseClosingDate}>\r\n                    <S.FieldTitle>Closing Date</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        control={control}\r\n                        getValues={getValues}\r\n                        name=\"mortgage.houseClosingDate\"\r\n                        label=\"Select Closing Date\"\r\n                        required={true}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Mortgage\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { Next } from \"../FormFields/SharedButtons\";\r\nimport { AgentTypeValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst AgentType = () => {\r\n    const { register, handleSubmit, errors, action, push } = useCustomFormHook(AgentTypeValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Property\"));\r\n        }\r\n    }\r\n\r\n    const handleTestingButton = () => {\r\n        push(handleDeploymentPath(\"/Testing\"));\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper error={errors.agentType}>\r\n                    <S.FieldTitle>Please Select who you will be representing.</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"agentType\"\r\n                        array={Object.values(AGENT_TYPES)}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <button onClick={handleTestingButton}>Testing</button>\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AgentType\r\n","import React, { useState } from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport Slider from \"../FormFields/Slider\";\r\n// import { yupResolver } from '@hookform/resolvers';\r\n// import { AdditionalInformationValidation } from \"../../validation\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\nconst AdditionalInformation = () => {\r\n    const { handleSubmit, action, push, register, getValues, watch } = useCustomFormHook();\r\n    const [withTracyGagne, setWithTracyGagne] = useState(false)\r\n    const [hasReferral, setHasReferral] = useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        }\r\n    }\r\n\r\n    const renderHasReferral = () => {\r\n        if(hasReferral){\r\n            return (\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Referral Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField \r\n                        name=\"referral.Agent\"\r\n                        label=\"Agent that Referred Client\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                        <InputField\r\n                        name=\"referral.broker\"\r\n                        label=\"Agent that Referred Client\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                    <InputField\r\n                        name=\"referral.email\"\r\n                        label=\"Referring Agent Email Address\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                        <InputField\r\n                        name=\"referral.emailVerification\"\r\n                        label=\"Email Address Verification\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <div>\r\n                    <InputField\r\n                        name=\"referral.amount\"\r\n                        label=\"Amount\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Are you with the Tracy Gagne Team? <Slider isChecked={withTracyGagne} setIsChecked={setWithTracyGagne} /></S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {withTracyGagne ? <S.FieldWrapper>\r\n                    <S.FieldTitle>Team lead or Sphere Not split with eXp only with the Tracy Gagne Team</S.FieldTitle>\r\n                    <RadioSelector \r\n                    register={register}\r\n                    array={[\"75/25\", \"100\"]} \r\n                    name=\"additionalInformation.finalPaymentSplit\"\r\n                    other={true}\r\n                    getValues={getValues}\r\n                    watch={watch}\r\n                    />\r\n                </S.FieldWrapper> : null}\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Is there a referral to be paid for the transaction? \r\n                        <Slider isChecked={hasReferral} setIsChecked={setHasReferral} />\r\n                    </S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {renderHasReferral()}\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Is there any additional information I should know?</S.FieldTitle>\r\n                    <div>\r\n                        <InputField \r\n                            register={register}\r\n                            getValues={getValues}\r\n                            name=\"additionalInformation.additionalNotes\"\r\n                            label=\"Notes\"\r\n                            required={false}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AdditionalInformation","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from '../../hooks/useCustomFormHook';\r\nimport { ClientValidation } from \"../../validation\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport AutoComplete from '../FormFields/AutoComplete';\r\nimport Address from '../FormFields/Address';\r\nimport InputField from \"../FormFields/InputField\"\r\n\r\nconst Testing = () => {\r\n    const { handleSubmit, action, push, getValues, errors, register } = useCustomFormHook(ClientValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        push(handleDeploymentPath(\"/result\"));\r\n    }\r\n\r\n    const [controlData, setControlData] = React.useState(\"\")\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Google Sheet AutoComplete Test</S.FieldTitle>\r\n                    <div>\r\n                        <AutoComplete\r\n                            label=\"control group\"\r\n                            suggestions={[\"george\", \"kate\", \"luna\", \"finnick\"]}\r\n                            useDefaultFilter={true}\r\n                            value={controlData}\r\n                            onChange={(e) => setControlData(e.currentTarget.value)}\r\n                        />\r\n                    </div>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                        getValues={getValues}\r\n                        name=\"property.mlsNumber\"\r\n                        label=\"MLS Number\" \r\n                        errors={errors[\"property\"]?.mlsNumber}\r\n                        register={register} \r\n                        required={true} />\r\n                        <S.AddressWrapper>\r\n                        <Address\r\n                        getValues={getValues}\r\n                        name=\"property.address\"\r\n                        label=\"Address\" \r\n                        errors={errors[\"property\"]?.address}\r\n                        register={register} \r\n                        required={true} />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <br />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Testing\r\n","import React from 'react';\r\nimport InputField from \"./InputField\";\r\nimport * as S from \"./FormStyled\"\r\nimport { ordinal_suffix_of } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst MAX_BUYERS = 5;\r\nconst GeneralClientInformation = ({ errors, register, getValues, title }) => {\r\n    const [count, setCount] = React.useState(1);\r\n\r\n    React.useEffect(() => {\r\n        let newCount;\r\n        if (getValues && (newCount = parseInt(getValues(`client.${title}.count`))) !== undefined) {\r\n            setCount(newCount);\r\n        }\r\n    }, [getValues, title]);\r\n\r\n    const increaseCount = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (count < MAX_BUYERS) {\r\n            setCount(count => count + 1);\r\n        }\r\n    }\r\n\r\n    const decreaseCount = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setCount(count => count - 1);\r\n    }\r\n\r\n    const fieldCount = () => {\r\n        let fields = [];\r\n        for (let i = 0; i < count; i++) {\r\n            if (i === MAX_BUYERS) break;\r\n\r\n            let error =\r\n                errors?.client?.[title]?.[i]?.firstName ||\r\n                errors?.client?.[title]?.[i]?.lastName ||\r\n                errors?.client?.[title]?.[i]?.email ||\r\n                errors?.client?.[title]?.[i]?.emailVerification ||\r\n                errors?.client?.[title]?.[i]?.phoneNumber ||\r\n                errors?.client?.[title]?.[i]?.fullAddress;\r\n\r\n            fields.push(\r\n                <S.FieldWrapper key={i} error={error}>\r\n                    <S.FieldTitle>{ordinal_suffix_of(i + 1)} {title}</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.firstName`}\r\n                            label=\"First Name\"\r\n                            errors={errors?.client?.[title]?.[i]?.firstName}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <InputField\r\n                            name={`client.${title}.${i}.lastName`}\r\n                            label=\"Last Name\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.lastName}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.email`}\r\n                            label=\"Email Address\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <InputField\r\n                            name={`client.${title}.${i}.emailVerification`}\r\n                            label=\"Email Address Verification\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.phoneNumber`}\r\n                            label=\"Phone Number\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.phoneNumber}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <S.AddressWrapper>\r\n                            <Address\r\n                                name={`client.${title}.${i}.address`}\r\n                                label=\"Full Address\"\r\n                                errors={errors[`client`]?.[title]?.[i]?.address}\r\n                                register={register}\r\n                                required={true}\r\n                                getValues={getValues}\r\n                            />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n            )\r\n        }\r\n        return fields;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: \"none\" }}>\r\n                <input\r\n                    value={count}\r\n                    onChange={(e) => {\r\n                        e.stopPropagation();\r\n                    }}\r\n                    name={`client.${title}.count`}\r\n                    ref={register}\r\n                />\r\n            </div>\r\n            {fieldCount().map(value => value)}\r\n            { count === MAX_BUYERS ? <S.Button>Max Buyer Count Reached</S.Button> : <S.Button onClick={increaseCount}>Add {title}</S.Button>}\r\n            { count > 0 || MAX_BUYERS === count ? <S.Button style={{ float: \"right\" }} onClick={decreaseCount}>Remove {title}</S.Button> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GeneralClientInformation","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport GeneralClientInformation from \"../FormFields/GeneralClientInformation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { ClientValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Client = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(ClientValidation);\r\n    const { clientType } = useParams();\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n            if (clientType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/ListingBroker\"));\r\n            } else if (clientType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n            }\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <GeneralClientInformation title={clientType} getValues={getValues} errors={errors} register={register} />\r\n                <br />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Client\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Property from \"../Forms/Property\";\r\nimport Agent from \"../Forms/Agent\";\r\nimport Result from \"../Result\";\r\nimport ListingBroker from \"../Forms/ListingBroker\";\r\nimport Lenders from \"../Forms/Lenders\";\r\nimport Attorney from '../Forms/Attorney';\r\nimport ForSaleByOwner from '../Forms/ForSaleByOwner';\r\nimport Mortgage from \"../Forms/Mortgage\";\r\nimport AgentType from \"../Forms/AgentType\";\r\nimport AdditionalInformation from \"../Forms/AdditionalInformation\";\r\nimport Testing from \"../Forms/Testing\";\r\nimport Client from \"../Forms/Client\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst index = () => {\r\n    return (\r\n        <Router>\r\n            <Route exact path={handleDeploymentPath(\"/\")} component={AgentType} />\r\n            <Route path={handleDeploymentPath(\"/Client/:clientType\")} component={Client} />\r\n            <Route path={handleDeploymentPath(\"/Property\")} component={Property} />\r\n            <Route path={handleDeploymentPath(\"/Agent/:represents\")} component={Agent} />\r\n            <Route path={handleDeploymentPath(\"/Attorney/:represents\")} component={Attorney} />\r\n            <Route path={handleDeploymentPath(\"/FSBO\")} component={ForSaleByOwner} />\r\n            <Route path={handleDeploymentPath(\"/ListingBroker\")} component={ListingBroker} />\r\n            <Route path={handleDeploymentPath(\"/Lenders\")} component={Lenders} />\r\n            <Route path={handleDeploymentPath(\"/Mortgage\")} component={Mortgage} />\r\n            <Route path={handleDeploymentPath(\"/AdditionalInformation\")} component={AdditionalInformation} />\r\n            <Route path={handleDeploymentPath(\"/result\")} component={Result} />\r\n            <Route path={handleDeploymentPath(\"/Testing\")} component={Testing} />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default index\r\n","import React from 'react';\r\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\r\nimport { DevTool } from \"little-state-machine-devtools\";\r\nimport Route from \"./components/Routes\";\r\n\r\ncreateStore({\r\n  details: {}\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <StateMachineProvider>\r\n      <DevTool />\r\n      <Route />\r\n    </StateMachineProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}