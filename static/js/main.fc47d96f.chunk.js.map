{"version":3,"sources":["components/FormFields/FormStyled.js","components/FormFields/InputFieldStyled.js","hooks/useCheckFieldValue.js","components/FormFields/InputField.js","components/FormFields/FormHeaderStyled.js","components/FormFields/FormHeader.js","components/FormFields/DropDownListStyled.js","components/FormFields/DropDownList.js","components/FormFields/SliderStyled.js","components/FormFields/Slider.js","shared.js","components/FormFields/AutoCompleteStyled.js","components/FormFields/AutoComplete.js","components/FormFields/Address.js","components/FormFields/PropertyInfo.js","components/FormFields/DatePicker.js","components/FormFields/RadioSelectorStyled.js","components/FormFields/RadioSelector.js","validation/index.js","components/FormFields/SharedButtons.js","state/updateState.js","hooks/useCustomFormHook.js","components/Forms/Property.js","hooks/useLoadGoogleSheetInfo.js","components/Forms/Broker.js","components/Forms/Agent.js","components/Result.js","components/Forms/ListingBroker.js","components/Forms/Lenders.js","components/Forms/Attorney.js","components/Forms/ForSaleByOwner.js","components/Forms/Mortgage.js","components/Forms/AgentType.js","components/Forms/AdditionalInformation.js","components/Forms/Testing.js","components/FormFields/GeneralClientInformation.js","components/Forms/Client.js","components/Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","FieldTitle","FieldWrapper","props","error","Button","Input","input","MultiContainer","AddressWrapper","InputField","disablePadding","isEmpty","useCheckFieldValue","name","getValues","React","useState","setIsEmpty","useEffect","isFieldEmpty","value","undefined","memo","label","className","style","required","register","errors","onKeyDown","classVal","ref","onKeyPress","e","handleonkeypress","onBlur","target","handleonblur","onChange","message","Title","p","FormHeader","Select","select","DropDownList","placeholder","options","setValue","isValue","rest","defaultValue","event","preventDefault","disabled","hidden","map","key","Label","Span","span","checked","Slider","isChecked","setIsChecked","type","onClick","handleDeploymentPath","params","process","concat","MORTGAGE_TYPES","CONVENTIONAL","FHA","VA","CASH","AGENT_TYPES","SELLERS","BUYERS","BOTH","PROPERTY_TYPES","SINGLE_FAMILY","MULTI_FAMILY","CONDO","ordinal_suffix_of","i","j","k","AutoCompleteWrapper","AutoComplete","suggestions","howToFilter","status","onSelect","useDefaultFilter","setTupleIndex","useOnclickOutside","handleOnBlur","activeSuggestion","filteredSuggestions","showSuggestions","userInput","suggestionState","setSuggestionState","state","handleSelect","stopPropagation","text","currentTarget","innerText","indexOf","noSuggestions","filter","suggestion","toLowerCase","persist","keyCode","length","onFocus","some","index","suggestionsListComponent","Address","disable","usePlacesAutocomplete","ready","data","clearSuggestions","getDescriptions","description","PropertyInfo","agentType","propertyInformation","mlsNumber","deedReference","address","mapReferences","handleConditionalFields","CustomDatePicker","control","showYearPicker","dateFormat","render","placeholderText","startDate","selected","Date","optionWrapper","InputRadio","OtherWrapper","RadioSelector","array","other","defaultVal","watch","watchVal","textFieldHasValue","includes","otherVal","setOtherVal","Fragment","defaultChecked","marginTop","float","mapRules","rule","Object","keys","reduce","newMap","PHONE_REG_EXP","REQUIRED","VALID_EMAIL","AgentTypeValidation","yup","shape","BuyerFormOneValidation","property","test","val","propertyType","oneOf","values","condoManagementCompany","when","is","then","dateHouseBuilt","titleOrTownSewer","publicOrTownWater","inspectionDeadline","buyerhasSubmittedAdditionalOffer","notRequired","loxBoxCode","typeError","vacentOrOccupied","TestAttorneyValidation","obj","firstName","lastName","emailAddress","email","emailAddressVerification","firmName","phoneNumber","matches","FSBOValidation","forSaleByOwner","sellerFirstName","sellerLastName","sellerEmail","sellerEmailVerification","attorneyfirstName","attorneylastName","attorneyEmail","attorneyEmailVerification","attorneyPhoneNumber","ListingBrokerValidation","listingBroker","company","listingAgent","emailVerification","mlsID","LendersValidation","lender","companyName","ClientValidation","obj2","Array","isArray","of","fullAddress","AgentAndBrokerValidation","broker","agent","MLSNumber","compensationPerMLS","Back","history","useHistory","goBack","Next","updateAction","payload","details","useCustomFormHook","validationRules","useStateMachine","action","push","useForm","defaultValues","mode","reValidateMode","resolver","handleSubmit","Property","currPropertyType","setCurrentPropertyType","additionalOffer","setAdditionalOffer","inspectionWaved","setInspectionWaved","onSubmit","buyerHasSubmittedAdditionalOffer","useLoadGoogleSheetInfo","sheetKey","sheetIndex","cellRange","handleSheetData","valuesObj","setReady","sheet","setSheet","setValues","arrayData","setArrayData","loadSpreadSheetInformation","a","doc","GoogleSpreadsheet","useServiceAccountAuth","require","loadInfo","sheetsByIndex","loadCells","Broker","represents","brokerSheet","getCell","CompanyName","Company","Agent","useParams","agentSheet","emails","names","mlsNumbers","organizations","phoneNumbers","Emails","EmailVerifications","Names","PhoneNumbers","Organizations","MLSNumbers","Email","EmailVerification","Name","PhoneNumber","Organization","handleOnSelect","loadAgentPhoneNumber","loadFieldsBasedOnAgent","Result","JSON","stringify","ListingBroker","phoneNumberField","listing","mortgage","typeOfMortgage","Lenders","Attorney","hasAttorney","sethasAttorney","wantsRecommendation","setWantsRecommendation","addresses","firmNames","FirmNames","Addresses","FirmName","attorney","askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot","attorneyInformation","ForSaleByOwner","isFSBO","setIsFSBO","Mortgage","currMortgageType","setCurrMortgageType","isConcessions","setIsConcessions","purchasePrice","firstDeposit","secondDeposit","areConcessions","concessions","mortgageCommitmentDeadline","houseClosingDate","AgentType","AdditionalInformation","withTracyGagne","setWithTracyGagne","hasReferral","setHasReferral","renderHasReferral","Testing","controlData","setControlData","GeneralClientInformation","title","count","setCount","newCount","parseInt","display","fields","fieldCount","Client","clientType","exact","path","component","createStore","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.fc47d96f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #e7ecee;\r\n    padding-top: .5rem;\r\n    min-height: 99vh;\r\n    height: 100%;\r\n\r\n    form {\r\n        width: 40rem;\r\n        margin: 0 auto;\r\n        background: transparent;\r\n\r\n        @media only screen and (max-device-width : 640px) {\r\n            width: 95%;\r\n        }\r\n\r\n    }\r\n`;\r\n\r\nexport const FieldTitle = styled.div`\r\n    font-family: Helvetica, Arial, sans-serif; \r\n    position: relative;\r\n    margin-bottom: .5rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    position: relative;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    padding: 1.5rem;\r\n    border-radius: .75rem;\r\n    border: ${props => props.error ? \"1px solid #d93025\" : \"1px solid #d3d3d3\" };\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const Button = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n    margin-right: .5rem;\r\n`;\r\n\r\nexport const MultiContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    \r\n    @media only screen and (max-device-width : 425px) {\r\n        flex-direction: column;\r\n    }\r\n    \r\n`;\r\n\r\n//****Should only be used when inside MultiContainer****\r\nexport const AddressWrapper = styled.div`\r\n    padding-left: 1rem;\r\n    @media only screen and (max-device-width : 425px) {\r\n        padding-left: 0;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nconst highlightColor = \"#16abf0\";\r\nconst paddingHorizontal = \"8px\";\r\n\r\nexport const InputField = styled.div`\r\n    position: relative;\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    /* This is so there can be multiple fields side by side \r\n        Start-block\r\n    */\r\n    padding-left: ${props => props.disablePadding ? 0 : \"1rem\"};\r\n\r\n    @media only screen and (max-device-width : 425px) {\r\n        padding-left: 0;\r\n    }\r\n\r\n    :last-child label {\r\n        padding-left: ${props => props.disablePadding ? 0 : \"1rem\"};\r\n        \r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n\r\n    :first-child {\r\n        padding-left: 0;\r\n        label {\r\n            padding-left: 0;\r\n        }\r\n\r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n    /* end-block */\r\n\r\n    input {\r\n        font-family: Helvetica, Arial, sans-serif;\r\n        font-size: 12pt;\r\n        width: 15.4375rem;\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 2.6em;\r\n        line-height: 2.6em;\r\n        margin-top: .5em;\r\n        border: none;\r\n        outline: none;\r\n        position: relative;\r\n        top: 0;\r\n        left: 0;\r\n        display: block;\r\n        background: transparent;\r\n        z-index: 2;\r\n        border-bottom: 1px solid #ccc;\r\n        text-indent: ${paddingHorizontal};\r\n    }\r\n\r\n    input:focus+label {\r\n        color: ${highlightColor}\r\n    }\r\n\r\n    label {\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        left: ${ props => props.isEmpty ? \"0px\" : paddingHorizontal};\r\n        font-size: 12pt;\r\n        z-index: 1;\r\n        transform-origin: 0, 0.0em;\r\n        transition: transform 500ms, color 300ms;\r\n        transform: ${props => props.isEmpty ? 'scale(0.85, 0.85) rotateY(0)' :  'scale(1,1) rotateY(0)'};\r\n        line-height: ${props => props.isEmpty ? '.25em' : '3em'};\r\n        color: #696969;\r\n    }\r\n\r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n\r\n    .react-datepicker-popper {\r\n        z-index: 4;\r\n    }\r\n\r\n    ::has(> input[type=\"hidden\"]) {\r\n        margin-bottom: 0 !important;\r\n        padding-bottom: 0 !important;\r\n    }\r\n\r\n    /* input[type=\"hidden\"]:(> div.active) {\r\n        margin-bottom: 0 !important;\r\n        padding-bottom: 0 !important;\r\n    } */\r\n\r\n`;\r\n\r\n","import React from \"react\";\r\n\r\nconst useCheckFieldValue = (name, getValues) => {\r\n    \r\n    const [isEmpty, setIsEmpty] = React.useState(false);\r\n    \r\n    const isFieldEmpty = (value) => {\r\n        if(value === \"\" || value === undefined || value === null){\r\n            setIsEmpty(false);\r\n        }else{\r\n            setIsEmpty(true);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if(getValues && getValues(`${name}`)) {\r\n            setIsEmpty(true);\r\n        }\r\n    }, [name, getValues]);\r\n\r\n    return {\r\n        isFieldEmpty,\r\n        setIsEmpty,\r\n        isEmpty\r\n    }\r\n}\r\n\r\nexport default useCheckFieldValue","import React from 'react'\r\nimport * as S from \"./InputFieldStyled\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\";\r\n\r\nconst InputField = React.memo(({ name, label, className, style, required, register, getValues, errors, value, onKeyDown, ...props }) => {\r\n    const classVal = required ? `${className} required-field` : className;\r\n    const { isEmpty, isFieldEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n    \r\n    const handleOnKeyPress = e => {\r\n        setIsEmpty(true)\r\n        if (props.handleonkeypress) {\r\n            props.handleonkeypress(e);\r\n        }\r\n    }\r\n\r\n    const handleOnBlur = e => {\r\n        isFieldEmpty(e.target.value);\r\n        if (props.handleonblur) {\r\n            props.handleonblur(e);\r\n        }\r\n    }\r\n\r\n    const handleOnChange = e => {\r\n        setIsEmpty(true);\r\n        if (props.onChange) {\r\n            props.onChange(e)\r\n        }\r\n    }\r\n\r\n    // See Docs for Details: https://reactjs.org/docs/forms.html#controlled-components\r\n    return (\r\n        <S.InputField style={style} isEmpty={isEmpty || value}>\r\n            <input\r\n                value={value}\r\n                name={name}\r\n                ref={register}\r\n                onKeyPress={handleOnKeyPress}\r\n                onBlur={handleOnBlur}\r\n                onChange={handleOnChange}\r\n                onKeyDown={onKeyDown}\r\n                {...props}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {errors ? <span>{errors?.message}</span> : null}\r\n        </S.InputField>\r\n    )\r\n})\r\n\r\nexport default InputField\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.div`\r\n    margin: 0 0 .125rem 0;\r\n    padding: 0px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 16pt;\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const message = styled.p`\r\n    margin: 0;\r\n    padding: 0;\r\n    /* text-align: left; */\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    padding: 1rem;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    border-radius: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n`;","import React from 'react';\r\nimport * as S from \"./FormHeaderStyled\";\r\n\r\nconst FormHeader = React.memo(() => {\r\n    return (\r\n        <S.FieldWrapper>\r\n            <S.Title>Massachusetts Real Estate Transaction Form </S.Title>\r\n            <S.message>Please ensure that all information is filled out correctly as this information will be utilized throughout the transaction process.</S.message>\r\n        </S.FieldWrapper>\r\n    )\r\n})\r\n\r\nexport default FormHeader\r\n","import styled from \"styled-components\";\r\n\r\nexport const Select = styled.select`\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    font-size: 12pt;\r\n    width: 12.4375rem;\r\n    border: none;\r\n    border-bottom: 1px solid #ccc;\r\n    margin: 1rem 0 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./DropDownListStyled\"\r\n\r\nconst DropDownList = React.memo(({ placeholder, options, register, setValue, isValue, errors, ...rest }) => {\r\n    \r\n    const handleChange = (event) => {\r\n        event.preventDefault();\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Select defaultValue={isValue} onChange={handleChange} ref={register} {...rest}>\r\n                <option value=\"\" disabled hidden>{placeholder}</option>\r\n                {options.map(value => (\r\n                    <option key={value} value={value}>\r\n                        {value}\r\n                    </option>\r\n                ))}\r\n            </S.Select>\r\n            {errors && \r\n            ( errors.message !== null || errors.message !== undefined \r\n            ? <span>{errors.message}</span>\r\n            : null\r\n            )}\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default DropDownList\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    position: relative;\r\n    display: inline-block;\r\n    margin-left: 1rem;\r\n    top: .25rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 2.625rem;\r\n    height: 1.25rem;\r\n    /* line-height: 1.5rem; */\r\n\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n    display: none;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: ${ props => props.checked ? \"#16abf0\" : \"#c9c9c9\"};\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n    border-radius: 30px;\r\n\r\n    ::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        border-radius: 50%;\r\n        height: .8125rem;\r\n        width: .8125rem;\r\n        left: 4px;\r\n        bottom: 4px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 50%;\r\n        -webkit-transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n        -ms-transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n        transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n    }\r\n\r\n    ::after {\r\n        /* content: \"\" + ; */\r\n        content: '${props => props.checked ? \"YES\" : \"NO\"}';\r\n        color: ${ props => props.checked ? \"#ccc\" : \"#16abf0\"};\r\n        display: block;\r\n        position: absolute;\r\n        transform: translate(-50%, -50%);\r\n        top: 50%;\r\n        left: ${props => props.checked ? \"30%\" : \"70%\"};\r\n        font-size: 10px;\r\n        font-family: Arial, Helvetica, sans-serif;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./SliderStyled\";\r\n\r\nconst Slider = React.memo(({ isChecked, setIsChecked, name, required, register }) => {\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Label>\r\n                <S.Input value={isChecked} type=\"checkbox\" name={name} ref={register} />\r\n                <S.Span checked={isChecked} onClick={() => setIsChecked(isChecked => !isChecked)} />\r\n            </S.Label>\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default Slider\r\n","export const deploy = process.env.REACT_APP_DEPLOY_TO_GITHUB_PAGES;\r\nexport const path = process.env.REACT_APP_BASE_PATH;\r\n\r\nexport const handleDeploymentPath = (params) => {\r\n    return deploy === \"true\" ? path.concat(params) : params;\r\n}\r\n\r\nexport const MORTGAGE_TYPES = {\r\n    CONVENTIONAL: \"Conventional\",\r\n    FHA: \"FHA\",\r\n    VA: \"VA\",\r\n    CASH: \"Cash\",\r\n}\r\nexport const AGENT_TYPES = {\r\n    SELLERS: \"Seller\",\r\n    BUYERS: \"Buyer\",\r\n    BOTH: \"Both\"\r\n}\r\n\r\nexport const PROPERTY_TYPES = {\r\n    SINGLE_FAMILY: \"Single Family\",\r\n    MULTI_FAMILY: \"Multi Family\",\r\n    CONDO: \"Condo\"\r\n}\r\n\r\n// What an ordinal suffix is: https://en.wikipedia.org/wiki/Ordinal_numeral\r\nexport function ordinal_suffix_of(i) {\r\n    var j = i % 10,\r\n        k = i % 100;\r\n    if (j === 1 && k !== 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j === 2 && k !== 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j === 3 && k !== 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}","import styled from \"styled-components\";\r\n// TODO update styles\r\n\r\nexport const AutoCompleteWrapper = styled.div`\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    && > div {\r\n        margin-bottom: 0;\r\n        padding-bottom: 0;\r\n    }\r\n\r\n  .no-suggestions {\r\n    color: #999;\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestions {\r\n    position: absolute;\r\n    border: 1px solid #999;\r\n    border-top-width: 0;\r\n    list-style: none;\r\n    margin-top: 0;\r\n    max-height: 143px;\r\n    overflow-y: auto;\r\n    padding-left: 0;\r\n    width: calc(300px + 1rem);\r\n    z-index: 1000;\r\n    background-color: #FFF;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .suggestions li {\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestion-active,\r\n  .suggestions li:hover {\r\n    background-color: #16abf0;\r\n    color: #FFF;\r\n    cursor: pointer;\r\n    font-weight: 700;\r\n  }\r\n  \r\n  .suggestions li:not(:last-of-type) {\r\n    border-bottom: 1px solid #999;\r\n  }\r\n`","import React from 'react'\r\nimport InputField from './InputField';\r\nimport * as S from \"./AutoCompleteStyled\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\n\r\n// TODO: Add auto scrolling to keep active item into focus\r\nconst AutoComplete = ({\r\n\r\n  /** A list of items to sort and display as suggestions */\r\n  suggestions = [],\r\n\r\n  /** Can be a custom filter function that with params (suggestions) and returns (filteredSuggestions) */\r\n  howToFilter,\r\n\r\n  /** pass a function that uses onBlur and gets the params (event) */\r\n  handleonblur,\r\n\r\n  /** pass a function that uses OnKeyPress and gets the params (event) */\r\n  handleonkeypress,\r\n\r\n  /** Can be used when you want to disable the field during loading or other reasons */\r\n  status = true,\r\n\r\n  /** Allows for onChange effect with params of (event) */\r\n  onChange,\r\n  \r\n  /** Can pass a function that is triggered on selection of an item in the list of suggestions. The possible params are (event , tuple) */\r\n  onSelect,\r\n  /** If you do not wish to pass a sorting method you can use the default one provided in onChange */\r\n  useDefaultFilter = true,\r\n  /* If the array that was passed is a tuple you can indicate which column in the tuple you which to search and sort with */\r\n  setTupleIndex = 0,\r\n  value,\r\n  getValues,\r\n  name,\r\n  ...props }) => {\r\n    const ref = useOnclickOutside(() => {\r\n      handleOnBlur();\r\n    });\r\n    \r\n    const [suggestionState, setSuggestionState] = React.useState({\r\n        // The active suggestion's index\r\n        activeSuggestion: 0,\r\n        // The suggestions that match the user's input\r\n        filteredSuggestions: [],\r\n        // Whether or no the suggestion list is shown\r\n        showSuggestions: false,\r\n        // What the user has entered\r\n        userInput: value? value :\"\",\r\n    });\r\n\r\n    React.useEffect(() => {\r\n      setSuggestionState(state => {\r\n        return{\r\n          ...state,\r\n          userInput: value\r\n        }\r\n      })\r\n    }, [value])\r\n\r\n    // This is required because AutoComplete is using InputField as a controlled component\r\n    React.useEffect(() => {\r\n      if(getValues && getValues(`${name}`)){\r\n        setSuggestionState({userInput: getValues(`${name}`)})\r\n      }\r\n    }, [name, getValues])\r\n    \r\n    const handleOnBlur = (e) => {\r\n      if(handleonblur){\r\n        handleonblur(e);\r\n      }\r\n      setSuggestionState(state => {\r\n        return {\r\n        ...state,\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n      }});\r\n    }\r\n\r\n    const handleOnChange = e => {\r\n      e.stopPropagation();\r\n      const userInput = e.currentTarget.value;\r\n\r\n      // Filter our suggestions that don't contain the user's input\r\n      let filteredSuggestions;     \r\n      if(howToFilter){\r\n        filteredSuggestions = howToFilter(suggestions);        \r\n      } else {\r\n        filteredSuggestions = suggestions;\r\n      }\r\n      \r\n      if(useDefaultFilter && !howToFilter){\r\n        filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\r\n      }\r\n      \r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions,\r\n        showSuggestions: true,\r\n        userInput: userInput,\r\n      });\r\n      \r\n      if(onChange){\r\n        onChange(e);\r\n      }\r\n      e.persist();\r\n      };\r\n\r\n    const handleSelect = (e) => {\r\n      e.stopPropagation();\r\n      let text = e.currentTarget.innerText;\r\n      \r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n        userInput: text,\r\n      });\r\n\r\n      if(onSelect){\r\n        onSelect(e, suggestions.indexOf(text));\r\n      }\r\n    };\r\n\r\n    const handleOnKeyDown = e => {\r\n      const { activeSuggestion, filteredSuggestions } = suggestionState;\r\n\r\n      // User pressed the enter key\r\n      if (e.keyCode === 13) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setSuggestionState(state => { \r\n          return {\r\n            ...state,\r\n            activeSuggestion: 0,\r\n            showSuggestions: false,\r\n            userInput: filteredSuggestions[activeSuggestion]\r\n          }\r\n        });\r\n\r\n        if(onSelect){\r\n          onSelect(e, suggestions.indexOf(filteredSuggestions[activeSuggestion]))\r\n        }\r\n      }\r\n      \r\n      // User pressed the up arrow\r\n      else if (e.keyCode === 38) {\r\n        if (activeSuggestion === 0) {\r\n          return;\r\n        }\r\n        setSuggestionState(state => {\r\n          return { ...state, activeSuggestion: activeSuggestion - 1} \r\n        });\r\n      }\r\n      \r\n\r\n      // User pressed the down arrow\r\n      else if (e.keyCode === 40) {\r\n      \r\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n          return;\r\n        }\r\n      \r\n        \r\n        setSuggestionState(state => {\r\n          return { ...state, activeSuggestion: activeSuggestion + 1} \r\n        });\r\n      };\r\n      e.stopPropagation();\r\n    };\r\n\r\n    const handleOnFocus = () => {\r\n      setSuggestionState(state => {\r\n        return {\r\n        ...state,\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: suggestions,\r\n        showSuggestions: true,\r\n      }});\r\n    }\r\n\r\n    const noSuggestions = () => {\r\n      return (\r\n        <div className=\"no-suggestions\">\r\n          <em>No suggestions</em>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const suggestionsListComponent = () => {\r\n      const { showSuggestions, filteredSuggestions, activeSuggestion } = suggestionState;\r\n\r\n      if (showSuggestions) {\r\n        if (filteredSuggestions.length) {\r\n          if(!filteredSuggestions.some(suggestion => suggestion !== null)){\r\n            return noSuggestions();\r\n          }\r\n          return (\r\n            <ul className=\"suggestions\">\r\n                  {filteredSuggestions.map((suggestion, index) => {\r\n                    if(suggestion) {\r\n                    let className;\r\n\r\n                    if (index === activeSuggestion) {\r\n                      className = \"suggestion-active\";\r\n                    }\r\n      \r\n                    return (\r\n                      <li className={className} key={`${suggestion}.${index}`} onClick={handleSelect}>\r\n                        {suggestion}\r\n                      </li>\r\n                    );\r\n                  }else{\r\n                    return null\r\n                  };\r\n                  })}\r\n                </ul>\r\n              );\r\n          } else {\r\n            noSuggestions();\r\n          }\r\n        }    \r\n    }\r\n    \r\n\r\n    return (\r\n        <S.AutoCompleteWrapper ref={ref}>\r\n          <InputField\r\n            value={suggestionState.userInput || value}\r\n            onChange={handleOnChange}\r\n            onKeyDown={handleOnKeyDown}\r\n            onFocus={handleOnFocus}\r\n            getValues={getValues}\r\n            name={name}\r\n            {...props}\r\n          />\r\n          {suggestionsListComponent()}\r\n      </S.AutoCompleteWrapper>\r\n    )\r\n}\r\n\r\nexport default AutoComplete\r\n","import React from 'react'\r\nimport usePlacesAutocomplete from \"use-places-autocomplete\";\r\nimport AutoComplete from './AutoComplete';\r\n\r\n/* \r\n  Uses google places api to lookup address and utilizes AutoComplete\r\n  to generate dropdown list of choices to select from.\r\n*/\r\n\r\nconst Address = ({ disable=false, text, ...props }) => {\r\n    const {\r\n        ready,\r\n        suggestions: { status, data },\r\n        value,\r\n        setValue,\r\n        clearSuggestions,\r\n      } = usePlacesAutocomplete();\r\n   \r\n      React.useEffect(() => {\r\n        if(text){\r\n          setValue(text);\r\n        }\r\n      }, [text, setValue])\r\n\r\n      const handleInput = (e) => {\r\n        setValue(e.target.value);\r\n      };\r\n     \r\n      const handleSelect = (e) => () => {\r\n        setValue(e.currentTarget.innerText, false);\r\n        clearSuggestions();\r\n      };\r\n\r\n      const handleOnBlur = () => {\r\n        clearSuggestions();\r\n      }\r\n\r\n      const getDescriptions = data.map(({description}) => description);\r\n\r\n      return (\r\n          <AutoComplete\r\n            value={value}\r\n            onSelect={handleSelect}\r\n            onChange={handleInput}\r\n            disabled={disable || !ready}\r\n            handleonblur={handleOnBlur}\r\n            suggestions={getDescriptions}\r\n            status={status}\r\n            {...props}\r\n          />\r\n      );\r\n}\r\n\r\nexport default Address\r\n","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport InputField from \"./InputField\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst PropertyInfo = ({ register, errors, getValues, agentType }) => {\r\n\r\n    const propertyInformation =\r\n    errors[\"property\"]?.mlsNumber ||\r\n    errors[\"property\"]?.deedReference ||\r\n    errors[\"property\"]?.address ||\r\n    errors[\"property\"]?.mapReferences;\r\n\r\n    const handleConditionalFields = () => {\r\n        if(agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH){\r\n            return (\r\n                <S.MultiContainer>\r\n                     <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mapReferences\"\r\n                    label=\"Map References (Page)\"\r\n                    errors={errors[\"property\"]?.mapReferences}\r\n                    register={register}\r\n                    required={true} />\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.deedReference\"\r\n                    label=\"Deed Reference (Book)\" \r\n                    errors={errors[\"property\"]?.deedReference} \r\n                    register={register}\r\n                    required={true} />\r\n                </S.MultiContainer>\r\n            )\r\n        }else{\r\n            return (\r\n            <div>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.deedReference\"\r\n                label=\"Deed Reference (Book)\" \r\n                errors={errors[\"property\"]?.deedReference} \r\n                register={register}\r\n                required={true} />\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.FieldWrapper error={propertyInformation}>\r\n            <S.FieldTitle>Property Information</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mlsNumber\"\r\n                    label=\"MLS Number\" \r\n                    errors={errors[\"property\"]?.mlsNumber} \r\n                    register={register} \r\n                    required={true}/>\r\n                <S.AddressWrapper>\r\n                    <Address\r\n                    getValues={getValues}\r\n                    name=\"property.address\"\r\n                    label=\"Address\" \r\n                    errors={errors[\"property\"]?.address} \r\n                    register={register} \r\n                    required={true} />\r\n                </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n            {handleConditionalFields()}\r\n        </S.FieldWrapper>\r\n    )\r\n}\r\n\r\nexport default PropertyInfo\r\n","import React from 'react';\r\nimport * as S from \"./InputFieldStyled\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\"\r\n\r\nconst CustomDatePicker = ({ control, name, label, errors, required, className, showYearPicker, dateFormat=\"MM/dd/yyyy\", getValues, ...rest }) => {\r\n    const classVal = required ? `${className} required-field`: className;\r\n    const { isEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n    \r\n    return (\r\n        <S.InputField disablePadding={true} isEmpty={isEmpty}>\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                defaultValue={null}\r\n                {...rest}\r\n                render={(props) => {\r\n                return <DatePicker\r\n                    showYearPicker={showYearPicker}\r\n                    dateFormat={dateFormat}\r\n                    defaultValue={null}\r\n                    placeholderText={null}\r\n                    startDate={null}\r\n                    className=\"input\"\r\n                    selected={ props.value !== null ? new Date(props.value) : null}\r\n                    onChange={(e) => {\r\n                        props.onChange(e)\r\n                        setIsEmpty(true);\r\n                        if(e === null){\r\n                            setIsEmpty(false)\r\n                        }\r\n                    }}\r\n                    onBlur={(e) => {\r\n                        if(e.target.value === \"\"){\r\n                            setIsEmpty(false);\r\n                        }\r\n                        e.preventDefault();\r\n                    }}\r\n                    onFocus={(e) => {\r\n                        setIsEmpty(true)\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                    }}\r\n                />\r\n                }}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {required && errors && <span>Required Field</span>}\r\n        </S.InputField>  \r\n    )\r\n}\r\n\r\nexport default CustomDatePicker\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 1em;\r\n`;\r\n\r\nexport const optionWrapper = styled.div`\r\n    margin: .5rem;\r\n`;\r\n\r\nexport const InputRadio = styled.input`\r\n    width: 1rem;\r\n    height: 1rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    margin: .25em;\r\n    font-weight: 450;\r\n    padding-left: .25rem;\r\n`;\r\n\r\nexport const OtherWrapper = styled.div`\r\n    display: inline-block;\r\n    margin: .5rem;\r\n    position: relative;\r\n    top: -1.125rem;\r\n`;","import React from 'react';\r\nimport * as S from \"./RadioSelectorStyled\";\r\nimport InputField from \"./InputField\";\r\n\r\nconst RadioSelector = React.memo(({ register, name, array, other=false, defaultVal, getValues, watch }) => {\r\n    /* \r\n        Lines 9 -> 13 Takes care of the inputfield value on return to the page\r\n        if it was a selected as the option. If it was not selected then it will\r\n        be set to \"\"\r\n    */\r\n    let watchVal = watch ? watch(name) : false;\r\n    let textFieldHasValue = watchVal ? !array.includes(watchVal) : \"\";\r\n    const [otherVal, setOtherVal] = React.useState({\r\n        text: textFieldHasValue ? watchVal : \"\"\r\n    })\r\n\r\n    const handleSetOtherVal = (e) => {\r\n        setOtherVal(state => {\r\n            return {\r\n                text: e.target.value\r\n            }\r\n        });\r\n        e.persist();\r\n    }\r\n\r\n    // TODO: Make Labels Clickable? Improves interaction for older/elderly users\r\n    return (\r\n        <React.Fragment>\r\n            <S.Container>\r\n                {array.map((value) => (\r\n                    <S.optionWrapper key={`input-${value}`}>\r\n                        <S.InputRadio name={name} type=\"radio\" defaultValue={value} defaultChecked={value === defaultVal} ref={register} />\r\n                        <S.Label>\r\n                            {value}\r\n                        </S.Label>\r\n                    </S.optionWrapper>\r\n                ))}\r\n            </S.Container>\r\n            {other ?\r\n                <S.OtherWrapper>\r\n                    <S.InputRadio\r\n                    value={otherVal?.text}\r\n                    name={name}\r\n                    type=\"radio\"\r\n                    style={{marginTop: \"1.825rem\"}}\r\n                    defaultChecked={otherVal?.text === defaultVal}\r\n                    ref={register}\r\n                    />\r\n                    <div style={{float: \"right\"}}>\r\n                        <InputField\r\n                        onChange={handleSetOtherVal}\r\n                        value={otherVal?.text}\r\n                        label=\"Other\"\r\n                        required={false}\r\n                        getValues={getValues}\r\n                         />\r\n                    </div>\r\n                </S.OtherWrapper> \r\n            : null }\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nexport default RadioSelector\r\n","import * as yup from \"yup\";\r\nimport { AGENT_TYPES, PROPERTY_TYPES } from \"../shared\";\r\n\r\n// This is used in lazy validation rules found here: https://github.com/jquense/yup/issues/130#issuecomment-578392176\r\nconst mapRules = (map, rule) => Object.keys(map).reduce((newMap, key) => ({...newMap, [key]: rule}), {});\r\n\r\n// TODO: Find solution to replace regular expression\r\n// Regular Express to Verify phone numbers taken from: https://www.sitepoint.com/community/t/phone-number-regular-expression-validation/2204/4\r\nconst PHONE_REG_EXP = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\nconst REQUIRED = \"Required\";\r\nconst VALID_EMAIL = \"Must be a Valid Email!\";\r\nconst NUMBER_ERROR_MESSAGE = \"Can only contain numbers\";\r\n\r\n\r\nexport const AgentTypeValidation = (agentType) => yup.object().shape({\r\n    agentType: yup.string().required(REQUIRED),\r\n});\r\n\r\nexport const BuyerFormOneValidation = (agentType) => yup.object().shape({\r\n    property: yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        mlsNumber: yup.string().test('len', 'Must be exactly 7 digits', val => val.length === 7),\r\n        deedReference: yup.string().required(REQUIRED).test('len', 'Must be in format XXXX-XXXXXXX', val => val.length === 11).required(REQUIRED),\r\n        propertyType: yup.string().required(REQUIRED).oneOf([...Object.values(PROPERTY_TYPES)], \"Select a valid Property type.\"),\r\n        condoManagementCompany: yup.string()\r\n        .when(\r\n            \"propertyType\",\r\n        { is: val => val === PROPERTY_TYPES.CONDO,\r\n            then: yup.string().required(REQUIRED)\r\n        }),\r\n        dateHouseBuilt: yup.string().required(REQUIRED),\r\n        titleOrTownSewer: yup.string().required(REQUIRED),\r\n        publicOrTownWater: yup.string().required(REQUIRED),\r\n        inspectionDeadline: yup.string().required(REQUIRED),\r\n        buyerhasSubmittedAdditionalOffer: agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        loxBoxCode: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE) : yup.mixed().notRequired(),\r\n        vacentOrOccupied: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n})});\r\n\r\nexport const AttorneyValidation = (agentType) => yup.object().shape({\r\n    firstName: yup.string().required(REQUIRED),\r\n    lastName: yup.string().required(REQUIRED),\r\n    emailAddress: yup.string().required(REQUIRED),\r\n    emailAddressVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('emailAddress'), null], \"Email Addresses Must Match\"),\r\n    firmName: yup.string().notRequired(),\r\n    phoneNumber: yup.string().notRequired().matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n});\r\n\r\nexport const TestAttorneyValidation = (agentType) => yup.lazy(obj => \r\n    yup.object(mapRules(obj, yup.object({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        emailAddress: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailAddressVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('emailAddress'), null], \"Email Addresses Must Match\"),\r\n        firmName: yup.string().required(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    })))\r\n)\r\n\r\nexport const FSBOValidation = (agentType) => yup.object().shape({\r\n    forSaleByOwner: yup.string().required(REQUIRED),\r\n    sellerFirstName: yup.string().notRequired(),\r\n    sellerLastName: yup.string().notRequired(),\r\n    sellerEmail: yup.string().notRequired(),\r\n    sellerEmailVerification: yup.string().notRequired().oneOf([yup.ref('sellerEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyfirstName: yup.string().notRequired(),\r\n    attorneylastName: yup.string().notRequired(),\r\n    attorneyEmail: yup.string().notRequired(),\r\n    attorneyEmailVerification: yup.string().notRequired().oneOf([yup.ref('attorneyEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyPhoneNumber: yup.string().notRequired(),\r\n});\r\n\r\nexport const ListingBrokerValidation = (agentType) => yup.object().shape({\r\n    listingBroker: yup.object().shape({\r\n        company: yup.string().required(REQUIRED),\r\n        address: yup.string().notRequired(),\r\n    }),\r\n    listingAgent: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"),\r\n        phoneNumber: yup.string().required(REQUIRED),\r\n        mlsID: yup.string().required(REQUIRED)\r\n    }),\r\n});\r\n\r\nexport const LendersValidation = (agentType) => yup.object().shape({\r\n    lender: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        companyName: yup.string().notRequired(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n    }),\r\n});\r\n\r\nexport const AdditionalInformationValidation = (agentType) => yup.object().shape({\r\n\r\n});\r\n\r\n/* \r\n    This object validation rule can be utilized to define a lazy array\r\n*/\r\nexport const ClientValidation = (agentType) => yup.lazy(obj =>\r\n    yup.object(mapRules(obj, yup.lazy(obj2 =>\r\n        {\r\n            if(Array.isArray(obj2)){\r\n                return yup.array().of(\r\n                    yup.object().shape({\r\n                        firstName: yup.string().required(REQUIRED),\r\n                        lastName: yup.string().required(REQUIRED),\r\n                        fullAddress: yup.string().required(REQUIRED),\r\n                        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n                        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n                        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n                    })\r\n                );\r\n            }\r\n            return yup.mixed().notRequired();\r\n        }\r\n    ))));\r\n\r\nexport const AgentAndBrokerValidation = (agentType) =>  yup.object().shape({\r\n    broker: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        companyName: yup.string().required(REQUIRED),\r\n    })))),\r\n    agent: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        MLSNumber: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n        compensationPerMLS: agentType === AGENT_TYPES.SELLERS ? yup.string().required(REQUIRED) : yup.mixed().notRequired(),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    }))))\r\n});","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Back = () => {\r\n    const history = useHistory();\r\n    return (<S.Input type=\"submit\" value=\"Back\" onClick={() => history.goBack()} />)\r\n}\r\n\r\nexport const Next = () => {\r\n    return (\r\n        <S.Input type=\"submit\" value=\"Next\" />\r\n    )\r\n}\r\n\r\n","export default function updateAction(state, payload) {\r\n    return {\r\n      ...state,\r\n      details: {\r\n        ...state.details,\r\n        ...payload\r\n      }\r\n    };\r\n  }\r\n  ","import React from \"react\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStateMachine } from 'little-state-machine';\r\nimport updateAction from '../state/updateState';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers\";\r\n\r\n\r\nconst useCustomFormHook =  (validationRules ) => {\r\n    const { state, action } = useStateMachine(updateAction);\r\n    const agentType = state.details.agentType ? state.details.agentType : null\r\n    const { push } = useHistory();\r\n    const { register, handleSubmit, getValues, errors, control, watch } = useForm({\r\n        defaultValues: state.details,\r\n        mode: 'onChange',\r\n        reValidateMode: 'onChange',\r\n        resolver: validationRules && process.env.REACT_APP_ENABLE_VALIDATION === 'true' ? yupResolver(validationRules(agentType)) : null\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        return () => {\r\n            \r\n        }\r\n\r\n    }, [])\r\n    \r\n    return {\r\n        register,\r\n        control,\r\n        handleSubmit,\r\n        getValues,\r\n        errors,\r\n        action,\r\n        push,\r\n        state,\r\n        agentType,\r\n        watch\r\n    }\r\n} \r\n\r\nexport default useCustomFormHook","import React from 'react';\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport PropertyInfo from \"../FormFields/PropertyInfo\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { BuyerFormOneValidation } from \"../../validation\";\r\nimport { PROPERTY_TYPES, AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\nconst Property = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(BuyerFormOneValidation);\r\n\r\n    const [currPropertyType, setCurrentPropertyType] = React.useState(\"\");\r\n    const [additionalOffer, setAdditionalOffer] = React.useState(false);\r\n    const [inspectionWaved, setInspectionWaved] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Mortgage\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <PropertyInfo agentType={agentType} getValues={getValues} errors={errors} register={register} />\r\n                <S.FieldWrapper error={errors[\"property\"]?.propertyType}>\r\n                    <S.FieldTitle>Property Type</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Property Types\"\r\n                        name=\"property.propertyType\"\r\n                        label=\"Select a Property Type\"\r\n                        errors={errors[\"property\"]?.propertyType}\r\n                        options={Object.values(PROPERTY_TYPES)}\r\n                        register={register}\r\n                        isValue={currPropertyType}\r\n                        setValue={setCurrentPropertyType} />\r\n                </S.FieldWrapper>\r\n                {/* TODO: Multi Family. Are there tenants \r\n                apt1, staying, vaca date (NOT REQUIRED)\r\n                and if there are are they staying. Final vaca date*/}\r\n                {currPropertyType === \"Condo\" ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.condoManagementCompany}>\r\n                        <S.FieldTitle>Who is the Condo Management Company</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.condoManagementCompany\"\r\n                                label=\"Management Company\"\r\n                                errors={errors[\"property\"]?.condoManagementCompany}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null\r\n                }\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.vacentOrOccupied}>\r\n                        <S.FieldTitle>Is the house vacant or occupied?</S.FieldTitle>\r\n                        <RadioSelector\r\n                            register={register}\r\n                            name=\"property.vacentOrOccupied\"\r\n                            array={[\"Vacant\", \"Occupied\"]}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors[\"property\"]?.dateHouseBuilt}>\r\n                    <S.FieldTitle>Year Built</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        getValues={getValues}\r\n                        showYearPicker={true}\r\n                        control={control}\r\n                        name=\"property.dateHouseBuilt\"\r\n                        label=\"Select Date Built\"\r\n                        required={true}\r\n                        dateFormat=\"yyyy\"\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.titleOrTownSewer} >\r\n                    <S.FieldTitle>Is there a Title V or Town Sewer</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.titleOrTownSewer\"\r\n                        array={[\"Title V\", \"Public Sewer\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.publicOrTownWater} >\r\n                    <S.FieldTitle>Public or Town Water</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.publicOrTownWater\"\r\n                        array={[\"Town Water\", \"Private Water\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.inspectionWaved || errors[\"property\"]?.inspectionDeadline}>\r\n                    <S.FieldTitle>Inspection Waved\r\n                            <Slider\r\n                            isChecked={inspectionWaved}\r\n                            setIsChecked={setInspectionWaved}\r\n                            name=\"property.isInspectionWaved\"\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.FieldTitle>\r\n                    {inspectionWaved ? null :\r\n                        <CustomDatePicker\r\n                            getValues={getValues}\r\n                            control={control}\r\n                            name=\"property.inspectionDeadline\"\r\n                            label=\"Select Inspection Deadline\"\r\n                            required={true}\r\n                        />}\r\n                </S.FieldWrapper>\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH\r\n                    ? <S.FieldWrapper error={errors[\"property\"]?.loxBoxCode}>\r\n                        <S.FieldTitle>Lox Box Code</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.loxBoxCode\"\r\n                                label=\"Lox Box Code\"\r\n                                errors={errors[\"property\"]?.loxBoxCode}\r\n                                required={true}\r\n                                register={register}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper> : null}\r\n                {/* TODO: This is currently used to determine what type of email should be sent.\r\n                    Note: Refer to Wendy Email for Message differences.\r\n                */}\r\n                {agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.buyerHasSubmittedAdditionalOffer}>\r\n                        <S.FieldTitle>Has the buyer submitted an offer for another property?\r\n                        <Slider\r\n                                isChecked={additionalOffer}\r\n                                setIsChecked={setAdditionalOffer}\r\n                                name=\"property.buyerHasSubmittedAdditionalOffer\"\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper> : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    );\r\n}\r\n\r\nexport default Property","import React from \"react\";\r\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\r\n\r\nconst useLoadGoogleSheetInfo = (\r\n    /** The key found on a google sheet which will give access to the sheet */\r\n    sheetKey,\r\n    /** What sheet index would you like to load. This correlates to the sheet tabs at the bottom of google sheets */\r\n    sheetIndex,\r\n    /** Defines what cell range to load from the sheet. E.g., 'A:B' while load columns A and B */\r\n    cellRange,\r\n    /** A function is expected here and is passed the sheet object. This allows each component\r\n     *  to decide how it wants to handle the data retrieved from the sheet.\r\n     */\r\n    handleSheetData,\r\n    /**  By defining the values object at initialization we can avoid switching between controlled and uncontrolled components. */\r\n    valuesObj,\r\n    ) => {\r\n    const [ready, setReady] = React.useState(false);\r\n    const [sheet, setSheet] = React.useState();\r\n    const [values, setValues] = React.useState(valuesObj);\r\n    const [arrayData, setArrayData] = React.useState({});\r\n\r\n    React.useEffect(() => {\r\n        loadSpreadSheetInformation();\r\n    // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const loadSpreadSheetInformation = async () => {\r\n        const doc = new GoogleSpreadsheet(sheetKey);\r\n        /** This json is a service account from google developer console: https://console.developers.google.com/ */\r\n        await doc.useServiceAccountAuth(require(\"../wendy-realestate-3f1741a1359f.json\"));\r\n        await doc.loadInfo();\r\n        const sheet = doc.sheetsByIndex[sheetIndex];\r\n        await sheet.loadCells(cellRange);\r\n\r\n        if(handleSheetData){\r\n            handleSheetData(sheet);\r\n        }\r\n\r\n        setSheet(sheet);\r\n        setReady(true);\r\n    }\r\n\r\n    return {\r\n        ready,\r\n        sheet,\r\n        setSheet,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    }\r\n}\r\n\r\nexport default useLoadGoogleSheetInfo","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\nimport useLoadGoogleSheetInfo from \"../../hooks/useLoadGoogleSheetInfo\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst Broker = React.memo(({ getValues, errors, register, represents, ...props}) => {\r\n    const handleSheetData = (brokerSheet) => {\r\n        const companyName = [];\r\n        const address = [];\r\n        let index = 1;\r\n        while(brokerSheet.getCell(index, 0).value !== null){\r\n            companyName.push(brokerSheet.getCell(index,0).value);\r\n            address.push(brokerSheet.getCell(index,1).value);\r\n            index++;\r\n        }\r\n\r\n        setArrayData({\r\n            CompanyName: companyName,\r\n            Address: address\r\n        });\r\n    }\r\n    const spreadSheetKey = \"1t5vhaok4dHE0H40hDd0B75mRisNf7cHDHa84Vp-aNN4\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData \r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:B',\r\n        handleSheetData,\r\n        {\r\n            Company: \"\",\r\n            Address: \"\"\r\n        }\r\n        );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Company: arrayData.CompanyName[index],\r\n                Address: arrayData.Address[index],\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <S.FieldWrapper>\r\n            <S.FieldTitle>Broker Information</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                <AutoComplete\r\n                    name={`${represents}.broker.company`}\r\n                    errors={errors[`${represents}`]?.broker?.company}\r\n                    register={register}\r\n                    getValues={getValues}\r\n                    label=\"Broker Name\"\r\n                    onSelect={handleOnSelect}\r\n                    useDefaultFilter={true}\r\n                    onChange={(e) => setValues(state => {\r\n                        e.persist();\r\n                        return {\r\n                            ...state,\r\n                            Company: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                        }\r\n                    })}\r\n                    suggestions={arrayData.CompanyName}\r\n                    status={ready}\r\n                    value={values.Company}\r\n                    {...props}\r\n                />\r\n                <S.AddressWrapper>\r\n                <Address\r\n                    name={`${represents}.broker.address`}\r\n                    errors={errors[`${represents}`]?.broker?.address}\r\n                    register={register}\r\n                    getValues={getValues}\r\n                    label=\"Address\"\r\n                    useDefaultFilter={true}\r\n                    status={ready}\r\n                    text={values.Address}\r\n                    {...props}\r\n                />\r\n                </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n        </S.FieldWrapper>\r\n    )\r\n})\r\n\r\nexport default Broker\r\n","import React from 'react'\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Broker from \"./Broker\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { AgentAndBrokerValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useLoadGoogleSheetInfo from '../../hooks/useLoadGoogleSheetInfo';\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\n\r\nconst Agent = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(AgentAndBrokerValidation);\r\n    const { represents } = useParams();\r\n    const handleSheetData = (agentSheet) => {\r\n        const emails = [];\r\n        const names = [];\r\n        const mlsNumbers = [];\r\n        const organizations = [];\r\n        const phoneNumbers = [];\r\n\r\n        let index = 1;\r\n        while(agentSheet.getCell(index, 0).value !== null) {\r\n            names.push(agentSheet.getCell(index, 0).value);\r\n            emails.push(agentSheet.getCell(index, 1).value);\r\n            phoneNumbers.push(agentSheet.getCell(index, 2).value);\r\n            organizations.push(agentSheet.getCell(index, 3).value);\r\n            mlsNumbers.push(agentSheet.getCell(index, 4).value);\r\n            index++;\r\n        }\r\n\r\n        const emailVerification = emails;\r\n\r\n        setArrayData({\r\n            Emails: emails,\r\n            EmailVerifications: emailVerification,\r\n            Names: names,\r\n            PhoneNumbers: phoneNumbers,\r\n            Organizations: organizations,\r\n            MLSNumbers: mlsNumbers,\r\n        });\r\n    }\r\n    \r\n    const spreadSheetKey = \"1Ra6DMJkEw0BN_XBShvL-Cs-zKzBtj4ilPK7WNGLbk8Y\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:E',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            PhoneNumber: \"\",\r\n            Organization: \"\",\r\n            MLSNumber: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                PhoneNumber: arrayData.PhoneNumbers[index] ? arrayData.PhoneNumbers[index] : \"\",\r\n                Organization: arrayData.Organizations[index] ? arrayData.Organizations[index] : \"\",\r\n                MLSNumber: arrayData.MLSNumbers[index] ? arrayData.MLSNumbers[index] : \"\",\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(`/Attorney/${AGENT_TYPES.BUYERS}`));\r\n        }\r\n    }\r\n\r\n    const loadAgentPhoneNumber = () => {\r\n        return (\r\n            <InputField\r\n                value={values.PhoneNumber}\r\n                onChange={(e) => setValues(state => {\r\n                    e.persist();\r\n                    return {\r\n                        ...state,\r\n                        PhoneNumber: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                    }\r\n                })}\r\n                getValues={getValues}\r\n                name={`agent.${represents}.phoneNumber`}\r\n                label=\"Phone Number\"\r\n                errors={errors?.agent?.[represents]?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    const loadFieldsBasedOnAgent = () => {\r\n        if (AGENT_TYPES.BUYERS === agentType) {\r\n            return (\r\n                <div>\r\n                    {loadAgentPhoneNumber()}\r\n                </div>\r\n            )\r\n        } else if (AGENT_TYPES.SELLERS === agentType) {\r\n            return (\r\n                <S.MultiContainer>\r\n                    {loadAgentPhoneNumber()}\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`agent.${represents}.compensationPerMLS`}\r\n                        label=\"Agency Compensation per MLS\"\r\n                        errors={errors?.agent?.[represents]?.compensationPerMLS}\r\n                        register={register}\r\n                        required={true}\r\n                    />\r\n                </S.MultiContainer>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper >\r\n                    <S.FieldTitle>{represents}'s Agent</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            value={values.Email}\r\n                            suggestions={arrayData.Emails}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.email`}\r\n                            label=\"Email Address\"\r\n                            errors={errors?.agent?.[represents]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <S.AddressWrapper>\r\n                        <AutoComplete\r\n                            value={values.EmailVerification}\r\n                            suggestions={arrayData.EmailVerifications}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    EmailVerification: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.emailVerification`}\r\n                            label=\"Email Address Verification\"\r\n                            errors={errors?.agent?.[represents]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.Names}\r\n                            value={values.Name}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.Name`}\r\n                            label=\"Name\"\r\n                            errors={errors?.agent?.[represents]?.Name}\r\n                            required={true}\r\n                            register={register}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <S.AddressWrapper>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.MLSNumbers}\r\n                            value={values.MLSNumber}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    MLSNumber: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.MLSNumber`}\r\n                            label=\"MLS Number\"\r\n                            errors={errors?.agent?.[represents]?.MLSNumber}\r\n                            required={true}\r\n                            register={register}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                    {loadFieldsBasedOnAgent()}\r\n                </S.FieldWrapper>\r\n                <Broker\r\n                    getValues={getValues}\r\n                    errors={errors}\r\n                    register={register}\r\n                    represents={represents}\r\n                />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Agent\r\n","import React from \"react\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"../state/updateState\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Result = props => {\r\n  const { state } = useStateMachine(updateAction);\r\n  const { goBack } = useHistory();\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Result</h2>\r\n      <pre>{JSON.stringify(state, null, 2)}</pre>\r\n      <button onClick={() => goBack()}>Back</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { ListingBrokerValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, MORTGAGE_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport Broker from \"./Broker\";\r\n\r\n// In my notes ListingBroker === ListingBroker and ListingAgent pages\r\nconst ListingBroker = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType, state } = useCustomFormHook(ListingBrokerValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Attorney/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                if (state.details.mortgage.typeOfMortgage === MORTGAGE_TYPES.CASH) {\r\n                    push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n                } else {\r\n                    push(handleDeploymentPath(\"/Lenders\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // This was done because the field will be wrapped different html elements depending on agentType\r\n    const phoneNumberField = () => {\r\n        return (\r\n            <InputField\r\n                getValues={getValues}\r\n                name=\"listing.agent.phoneNumber\"\r\n                label=\"Phone Number\"\r\n                errors={errors?.listing?.Agent?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <Broker\r\n                    represents={AGENT_TYPES.SELLERS}\r\n                    getValues={getValues}\r\n                    register={register}\r\n                    errors={errors}\r\n                />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Listing Agent</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors?.listing?.agent?.firstName}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors?.listing?.agent?.lastName}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.email\"\r\n                            label=\"Email\"\r\n                            errors={errors?.listing?.Agent?.email}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors?.listing?.agent?.emailVerification}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    {state.details.agentType === AGENT_TYPES.SELLERS || state.details.agentType === AGENT_TYPES.BOTH ?\r\n                        <S.MultiContainer>\r\n                            {phoneNumberField()}\r\n                            <InputField\r\n                                required={true}\r\n                                getValues={getValues}\r\n                                name=\"listing.agent.mlsID\"\r\n                                label=\"MLS ID\"\r\n                                errors={errors?.listing?.agent?.mlsID}\r\n                                register={register}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        :\r\n                        <div>\r\n                            {phoneNumberField()}\r\n                        </div>\r\n                    }\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ListingBroker\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { LendersValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useLoadGoogleSheetInfo from \"../../hooks/useLoadGoogleSheetInfo\";\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\n\r\nconst Lenders = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(LendersValidation);\r\n\r\n    const handleSheetData = (agentSheet) => {\r\n        const names = [];\r\n        const organizations = [];\r\n        const emails = [];\r\n\r\n        let index = 1;\r\n        while(agentSheet.getCell(index, 0).value !== null) {\r\n            names.push(agentSheet.getCell(index, 0).value);\r\n            emails.push(agentSheet.getCell(index, 1).value);\r\n            organizations.push(agentSheet.getCell(index, 2).value);\r\n            index++;\r\n        }\r\n\r\n        const emailVerification = emails;\r\n\r\n        setArrayData({\r\n            Emails: emails,\r\n            EmailVerifications: emailVerification,\r\n            Names: names,\r\n            Organizations: organizations,\r\n        });\r\n    }\r\n    \r\n    const spreadSheetKey = \"1aRrvpEn8Qe-VugV9Qbg9U9eIYPQdku_cWM2eOMkCOj4\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:C',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            Organization: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                Organization: arrayData.Organizations[index] ? arrayData.Organizations[index] : \"\",\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Lender Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.Names}\r\n                            value={values.Name}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name=\"lender.Name\"\r\n                            label=\"Full Name\"\r\n                            errors={errors.lender?.Name}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <InputField\r\n                            value={values.Organization}\r\n                            getValues={getValues}\r\n                            name=\"lender.Organization\"\r\n                            label=\"Organization Name\"\r\n                            errors={errors.lender?.Organization}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.Emails}\r\n                            value={values.Email}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name=\"lender.email\"\r\n                            label=\"Email\"\r\n                            errors={errors.lender?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <InputField\r\n                            value={values.EmailVerification}\r\n                            getValues={getValues}\r\n                            name=\"lender.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors.lender?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.phoneNumber\"\r\n                            label=\"Phone Number\"\r\n                            errors={errors.lender?.phoneNumber}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Lenders\r\n","import React from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { TestAttorneyValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useLoadGoogleSheetInfo from '../../hooks/useLoadGoogleSheetInfo';\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\n\r\n\r\n// TODO: If introduction give list of attorneys. ( cleint choose and send email to this attorney)\r\n// I think a drop down list would be the best choice\r\nconst Attorney = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(TestAttorneyValidation);\r\n    const { represents } = useParams();\r\n    const [hasAttorney, sethasAttorney] = React.useState(true);\r\n    const [wantsRecommendation, setWantsRecommendation] = React.useState(false);\r\n\r\n    const handleSheetData = (agentSheet) => {\r\n        const emails = [];\r\n        const names = [];\r\n        const addresses = [];\r\n        const firmNames = [];\r\n        const phoneNumbers = [];\r\n\r\n        let index = 1;\r\n        while(agentSheet.getCell(index, 0).value !== null) {\r\n            names.push(agentSheet.getCell(index, 0).value);\r\n            emails.push(agentSheet.getCell(index, 1).value);\r\n            phoneNumbers.push(agentSheet.getCell(index, 2).value);\r\n            addresses.push(agentSheet.getCell(index, 3).value);\r\n            firmNames.push(agentSheet.getCell(index, 4).value);\r\n            index++;\r\n        }\r\n\r\n        const emailVerification = emails;\r\n\r\n        setArrayData({\r\n            Emails: emails,\r\n            EmailVerifications: emailVerification,\r\n            Names: names,\r\n            PhoneNumbers: phoneNumbers,\r\n            FirmNames: firmNames,\r\n            Addresses: addresses,\r\n        });\r\n    }\r\n    \r\n    const spreadSheetKey = \"1ffex1Am_wSX_Rebav49Sf2plvujBbPBRkA1wPagvXL8\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:E',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            PhoneNumber: \"\",\r\n            FirmName: \"\",\r\n            Address: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                PhoneNumber: arrayData.PhoneNumbers[index] ? arrayData.PhoneNumbers[index] : \"\",\r\n                FirmName: arrayData.FirmNames[index] ? arrayData.FirmNames[index] : \"\",\r\n                Address: arrayData.Addresses[index] ? arrayData.Addresses[index] : \"\",\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        action({ attorney: data });\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n\r\n            if (represents === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(`/Client/${AGENT_TYPES.BUYERS}`));\r\n\r\n            } else if (represents === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/FSBO\"));\r\n        }\r\n    }\r\n\r\n    const askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot = () => {\r\n        if ((agentType === AGENT_TYPES.SELLERS && represents === AGENT_TYPES.SELLERS) ||\r\n            (agentType === AGENT_TYPES.BUYERS && represents === AGENT_TYPES.BUYERS)) {\r\n            return (\r\n                <React.Fragment>\r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>\r\n                            Do you have an attorney?\r\n                            <Slider\r\n                                isChecked={hasAttorney}\r\n                                setIsChecked={sethasAttorney}\r\n                                name={`${represents}.hasAttorney`}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper>\r\n                    {hasAttorney ? null : \r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>\r\n                            Would you like a recommendation and introduction?\r\n                            <Slider \r\n                                isChecked={wantsRecommendation}\r\n                                setIsChecked={setWantsRecommendation}\r\n                                name={`${represents}.wantsRecommendationAndIntroduction`}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper>\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    const attorneyInformation = () => {\r\n        if(hasAttorney){\r\n        return (\r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>{represents}'s Attorney Information</S.FieldTitle>\r\n                <S.MultiContainer>\r\n                    <AutoComplete\r\n                        value={values.Name}\r\n                        suggestions={arrayData.Names}\r\n                        onChange={(e) => setValues(state => {\r\n                            e.persist();\r\n                            return {\r\n                                ...state,\r\n                                Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                            }\r\n                        })}\r\n                        getValues={getValues}\r\n                        name={`${represents}.Name`}\r\n                        label=\"Full Name\"\r\n                        errors={errors[represents]?.Name}\r\n                        required={true}\r\n                        register={register}\r\n                        onSelect={handleOnSelect}\r\n                        status={ready}\r\n                    />\r\n                    <InputField\r\n                        value={values.FirmName}\r\n                        getValues={getValues}\r\n                        name={`${represents}.firmName`}\r\n                        label=\"Attorney Firm Name\"\r\n                        errors={errors[represents]?.firmName}\r\n                        required={false}\r\n                        register={register}\r\n                    />\r\n                </S.MultiContainer>\r\n                <S.MultiContainer>\r\n                    <AutoComplete\r\n                        value={values.Email}\r\n                        suggestions={arrayData.Emails}\r\n                        onChange={(e) => setValues(state => {\r\n                            e.persist();\r\n                            return {\r\n                                ...state,\r\n                                Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                            }\r\n                        })}\r\n                        getValues={getValues}\r\n                        name={`${represents}.emailAddress`}\r\n                        label=\"Email\"\r\n                        errors={errors[represents]?.emailAddress}\r\n                        required={true}\r\n                        register={register}\r\n                        onSelect={handleOnSelect}\r\n                        status={ready}\r\n                    />\r\n                    <InputField\r\n                        value={values.EmailVerification}\r\n                        getValues={getValues}\r\n                        name={`${represents}.emailAddressVerification`}\r\n                        label=\"Email Verification\"\r\n                        errors={errors[represents]?.emailAddressVerification}\r\n                        required={true}\r\n                        register={register}\r\n                    />\r\n                </S.MultiContainer>\r\n                <div>\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`${represents}.phoneNumber`}\r\n                        label=\"Phone number\"\r\n                        errors={errors[represents]?.phoneNumber}\r\n                        required={false}\r\n                        register={register}\r\n                    />\r\n                </div>\r\n            </S.FieldWrapper>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)} >\r\n                <FormHeader />\r\n                {askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot()}\r\n                {attorneyInformation()}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Attorney\r\n","import React from 'react';\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { FSBOValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst ForSaleByOwner = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(FSBOValidation);\r\n    const [isFSBO, setIsFSBO] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/ListingBroker\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>For Sale Buy Owner\r\n                        <Slider\r\n                            isChecked={isFSBO}\r\n                            setIsChecked={setIsFSBO}\r\n                            register={register}\r\n                            name=\"FSBO.isForSaleByOwner\"\r\n                            required={false} />\r\n                    </S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {isFSBO ?\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Buyer's Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors[\"FSBO\"]?.firstName}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors[\"FSBO\"]?.sellerLastName}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.email\"\r\n                            label=\"Email Address\"\r\n                            errors={errors[\"FSBO\"]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors[\"FSBO\"]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                : null}\r\n                {isFSBO ?\r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>Attorney Information (This Attorney will be holding Escrow )</S.FieldTitle>\r\n                        <S.MultiContainer>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.firstName\"\r\n                                label=\"First Name\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.firstName}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.lastName\"\r\n                                label=\"Last Name\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.firstName}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        <S.MultiContainer>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.email\"\r\n                                label=\"Email\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.email}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.emailVerification\"\r\n                                label=\"Email Verification\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.emailVerification}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.phoneNumber\"\r\n                                label=\"Phone Number\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.phoneNumber}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ForSaleByOwner\r\n","import React from 'react'\r\nimport { BuyerFormOneValidation } from \"../../validation\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport { MORTGAGE_TYPES } from \"../../shared\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Mortgage = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(BuyerFormOneValidation);\r\n\r\n    const onSubmit = data => {\r\n        action({ mortgage: data });\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Client/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Client/Buyer\"))\r\n            }\r\n        }\r\n    }\r\n\r\n    const [currMortgageType, setCurrMortgageType] = React.useState(\"\");\r\n    const [isConcessions, setIsConcessions] = React.useState(false);\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper error={errors?.typeOfMortgage}>\r\n                    <S.FieldTitle>What Type of Mortgage</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Mortgage Types\"\r\n                        name=\"typeOfMortgage\"\r\n                        label=\"Select a Mortgage Type\"\r\n                        errors={errors?.typeOfMortgage}\r\n                        options={Object.values(MORTGAGE_TYPES)}\r\n                        register={register}\r\n                        isValue={currMortgageType}\r\n                        setValue={setCurrMortgageType}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.purchasePrice}>\r\n                    <S.FieldTitle>Purchase Price</S.FieldTitle>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"purchasePrice\"\r\n                            label=\"Purchase price?\"\r\n                            errors={errors?.purchasePrice}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.firstDeposit || errors?.secondDeposit}>\r\n                    <S.FieldTitle>Deposit Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"firstDeposit\"\r\n                            label=\"First Deposit Amount?\"\r\n                            errors={errors?.firstDeposit}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"secondDeposit\"\r\n                            label=\"Second Deposit Amount?\"\r\n                            errors={errors.secondDeposit}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.areConcessions || errors?.concessions}>\r\n                    <S.FieldTitle>Are there concessions?\r\n                        <Slider\r\n                            isChecked={isConcessions}\r\n                            setIsChecked={setIsConcessions}\r\n                            name=\"areConcessions\"\r\n                            required={false}\r\n                            register={register}\r\n                        />\r\n                    </S.FieldTitle>\r\n                    {isConcessions ?\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"concessions\"\r\n                                label=\"What are the concessions?\"\r\n                                errors={errors?.concessions}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                        : null}\r\n                </S.FieldWrapper>\r\n                {getValues(`typeOfMortgage`) !== MORTGAGE_TYPES.CASH ?\r\n                    <S.FieldWrapper error={errors?.mortgageCommitmentDeadline}>\r\n                        <S.FieldTitle>Mortgage Commitment Deadline</S.FieldTitle>\r\n                        <CustomDatePicker\r\n                            control={control}\r\n                            getValues={getValues}\r\n                            name=\"mortgageCommitmentDeadline\"\r\n                            label=\"Select Mortgage Commitment Date\"\r\n                            required={true}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors?.houseClosingDate}>\r\n                    <S.FieldTitle>Closing Date</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        control={control}\r\n                        getValues={getValues}\r\n                        name=\"houseClosingDate\"\r\n                        label=\"Select Closing Date\"\r\n                        required={true}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Mortgage\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { Next } from \"../FormFields/SharedButtons\";\r\nimport { AgentTypeValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst AgentType = () => {\r\n    const { register, handleSubmit, errors, action, push } = useCustomFormHook(AgentTypeValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Property\"));\r\n        }\r\n    }\r\n\r\n    const handleTestingButton = () => {\r\n        push(handleDeploymentPath(\"/Testing\"))\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper error={errors.agentType}>\r\n                    <S.FieldTitle>Please Select who you will be representing.</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"agentType\"\r\n                        array={Object.values(AGENT_TYPES)}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <button onClick={handleTestingButton}>Testing</button>\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AgentType\r\n","import React, { useState } from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport Slider from \"../FormFields/Slider\";\r\n// import { yupResolver } from '@hookform/resolvers';\r\n// import { AdditionalInformationValidation } from \"../../validation\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\nconst AdditionalInformation = () => {\r\n    const { handleSubmit, action, push, register, getValues, watch } = useCustomFormHook();\r\n    const [withTracyGagne, setWithTracyGagne] = useState(false)\r\n    const [hasReferral, setHasReferral] = useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        }\r\n    }\r\n\r\n    const renderHasReferral = () => {\r\n        if(hasReferral){\r\n            return (\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Referral Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField \r\n                        name=\"referral.Agent\"\r\n                        label=\"Agent that Referred Client\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                        <InputField\r\n                        name=\"referral.broker\"\r\n                        label=\"Agent that Referred Client\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                    <InputField\r\n                        name=\"referral.email\"\r\n                        label=\"Referring Agent Email Address\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                        <InputField\r\n                        name=\"referral.emailVerification\"\r\n                        label=\"Email Address Verification\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <div>\r\n                    <InputField\r\n                        name=\"referral.amount\"\r\n                        label=\"Amount\"\r\n                        getValues={getValues}\r\n                        register={register}\r\n                        required={true}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Are you with the Tracy Gagne Team? <Slider isChecked={withTracyGagne} setIsChecked={setWithTracyGagne} /></S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {withTracyGagne ? <S.FieldWrapper>\r\n                    <S.FieldTitle>Team lead or Sphere Not split with eXp only with the Tracy Gagne Team</S.FieldTitle>\r\n                    <RadioSelector \r\n                    register={register}\r\n                    array={[\"75/25\", \"100\"]} \r\n                    name=\"additionalInformation.finalPaymentSplit\"\r\n                    other={true}\r\n                    getValues={getValues}\r\n                    watch={watch}\r\n                    />\r\n                </S.FieldWrapper> : null}\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Is there a referral to be paid for the transaction? \r\n                        <Slider isChecked={hasReferral} setIsChecked={setHasReferral} />\r\n                    </S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {renderHasReferral()}\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Is there any additional information I should know?</S.FieldTitle>\r\n                    <div>\r\n                        <InputField \r\n                            register={register}\r\n                            getValues={getValues}\r\n                            name=\"additionalInformation.additionalNotes\"\r\n                            label=\"Notes\"\r\n                            required={false}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AdditionalInformation","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from '../../hooks/useCustomFormHook';\r\nimport { ClientValidation } from \"../../validation\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport AutoComplete from '../FormFields/AutoComplete';\r\n\r\nconst Testing = () => {\r\n    const { handleSubmit, action, push, } = useCustomFormHook(ClientValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        push(handleDeploymentPath(\"/result\"));\r\n    }\r\n\r\n    const [controlData, setControlData] = React.useState(\"\")\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Google Sheet AutoComplete Test</S.FieldTitle>\r\n                    <AutoComplete\r\n                        label=\"control group\"\r\n                        suggestions={[\"george\", \"kate\", \"luna\", \"finnick\"]}\r\n                        useDefaultFilter={true}\r\n                        value={controlData}\r\n                        onChange={(e) => setControlData(e.currentTarget.value)}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <br />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Testing\r\n","import React from 'react';\r\nimport InputField from \"./InputField\";\r\nimport * as S from \"./FormStyled\"\r\nimport { ordinal_suffix_of } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst MAX_BUYERS = 5;\r\nconst GeneralClientInformation = ({ errors, register, getValues, title }) => {\r\n    const [count, setCount] = React.useState(1);\r\n\r\n    React.useEffect(() => {\r\n        let newCount;\r\n        if (getValues && (newCount = parseInt(getValues(`client.${title}.count`))) !== undefined) {\r\n            setCount(newCount);\r\n        }\r\n    }, [getValues, title]);\r\n\r\n    const increaseCount = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (count < MAX_BUYERS) {\r\n            setCount(count => count + 1);\r\n        }\r\n    }\r\n\r\n    const decreaseCount = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setCount(count => count - 1);\r\n    }\r\n\r\n    const fieldCount = () => {\r\n        let fields = [];\r\n        for (let i = 0; i < count; i++) {\r\n            if (i === MAX_BUYERS) break;\r\n\r\n            let error =\r\n                errors[title]?.[i]?.firstName ||\r\n                errors[title]?.[i]?.lastName ||\r\n                errors[title]?.[i]?.email ||\r\n                errors[title]?.[i]?.emailVerification ||\r\n                errors[title]?.[i]?.phoneNumber ||\r\n                errors[title]?.[i]?.fullAddress;\r\n\r\n            fields.push(\r\n                <S.FieldWrapper key={i} error={error}>\r\n                    <S.FieldTitle>{ordinal_suffix_of(i + 1)} {title}</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.firstName`}\r\n                            label=\"First Name\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.firstName}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <InputField\r\n                            name={`client.${title}.${i}.lastName`}\r\n                            label=\"Last Name\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.lastName}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.email`}\r\n                            label=\"Email Address\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <InputField\r\n                            name={`client.${title}.${i}.emailVerification`}\r\n                            label=\"Email Address Verification\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.phoneNumber`}\r\n                            label=\"Phone Number\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.phoneNumber}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <S.AddressWrapper>\r\n                            <Address\r\n                                name={`client.${title}.${i}.address`}\r\n                                label=\"Full Address\"\r\n                                errors={errors[`client`]?.[title]?.[i]?.address}\r\n                                register={register}\r\n                                required={true}\r\n                                getValues={getValues}\r\n                            />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n            )\r\n        }\r\n        return fields;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: \"none\" }}>\r\n                <input\r\n                    value={count}\r\n                    onChange={(e) => {\r\n                        e.stopPropagation();\r\n                    }}\r\n                    name={`client.${title}.count`}\r\n                    ref={register}\r\n                />\r\n            </div>\r\n            {fieldCount().map(value => value)}\r\n            { count === MAX_BUYERS ? <S.Button>Max Buyer Count Reached</S.Button> : <S.Button onClick={increaseCount}>Add {title}</S.Button>}\r\n            { count > 0 || MAX_BUYERS === count ? <S.Button style={{ float: \"right\" }} onClick={decreaseCount}>Remove {title}</S.Button> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GeneralClientInformation","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport GeneralClientInformation from \"../FormFields/GeneralClientInformation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { ClientValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Client = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(ClientValidation);\r\n    const { clientType } = useParams();\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n            if (clientType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/ListingBroker\"));\r\n            } else if (clientType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n            }\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <GeneralClientInformation title={clientType} getValues={getValues} errors={errors} register={register} />\r\n                <br />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Client\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Property from \"../Forms/Property\";\r\nimport Agent from \"../Forms/Agent\";\r\nimport Result from \"../Result\";\r\nimport ListingBroker from \"../Forms/ListingBroker\";\r\nimport Lenders from \"../Forms/Lenders\";\r\nimport Attorney from '../Forms/Attorney';\r\nimport ForSaleByOwner from '../Forms/ForSaleByOwner';\r\nimport Mortgage from \"../Forms/Mortgage\";\r\nimport AgentType from \"../Forms/AgentType\";\r\nimport AdditionalInformation from \"../Forms/AdditionalInformation\";\r\nimport Testing from \"../Forms/Testing\";\r\nimport Client from \"../Forms/Client\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst index = () => {\r\n    return (\r\n        <Router>\r\n            <Route exact path={handleDeploymentPath(\"/\")} component={AgentType} />\r\n            <Route path={handleDeploymentPath(\"/Client/:clientType\")} component={Client} />\r\n            <Route path={handleDeploymentPath(\"/Property\")} component={Property} />\r\n            <Route path={handleDeploymentPath(\"/Agent/:represents\")} component={Agent} />\r\n            <Route path={handleDeploymentPath(\"/Attorney/:represents\")} component={Attorney} />\r\n            <Route path={handleDeploymentPath(\"/FSBO\")} component={ForSaleByOwner} />\r\n            <Route path={handleDeploymentPath(\"/ListingBroker\")} component={ListingBroker} />\r\n            <Route path={handleDeploymentPath(\"/Lenders\")} component={Lenders} />\r\n            <Route path={handleDeploymentPath(\"/Mortgage\")} component={Mortgage} />\r\n            <Route path={handleDeploymentPath(\"/AdditionalInformation\")} component={AdditionalInformation} />\r\n            <Route path={handleDeploymentPath(\"/result\")} component={Result} />\r\n            <Route path={handleDeploymentPath(\"/Testing\")} component={Testing} />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default index\r\n","import React from 'react';\r\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\r\nimport { DevTool } from \"little-state-machine-devtools\";\r\nimport Route from \"./components/Routes\";\r\n\r\ncreateStore({\r\n  details: {}\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <StateMachineProvider>\r\n      <DevTool />\r\n      <Route />\r\n    </StateMachineProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}