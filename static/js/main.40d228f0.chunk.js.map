{"version":3,"sources":["components/FormFields/FormStyled.js","components/FormFields/InputFieldStyled.js","hooks/useCheckFieldValue.js","components/FormFields/InputField.js","components/FormFields/FormHeaderStyled.js","components/FormFields/FormHeader.js","components/FormFields/DropDownListStyled.js","components/FormFields/DropDownList.js","components/FormFields/SliderStyled.js","components/FormFields/Slider.js","shared.js","components/FormFields/AutoCompleteStyled.js","components/FormFields/AutoComplete.js","components/FormFields/Address.js","components/FormFields/PropertyInfo.js","components/FormFields/DatePicker.js","components/FormFields/RadioSelectorStyled.js","components/FormFields/RadioSelector.js","validation/index.js","components/FormFields/SharedButtons.js","state/updateState.js","hooks/useCustomFormHook.js","components/Forms/Property.js","hooks/useLoadGoogleSheetInfo.js","components/Forms/Broker.js","components/FormFields/Agents.js","components/Forms/Agent.js","components/Result.js","components/Forms/ListingBroker.js","components/Forms/Lenders.js","components/Forms/Attorney.js","components/FormFields/GeneralClientInformation.js","components/Forms/ForSaleByOwner.js","components/Forms/Mortgage.js","components/Forms/AgentType.js","components/Forms/AdditionalInformation.js","components/Forms/Testing.js","components/Forms/Client.js","components/Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","FieldTitle","FieldWrapper","props","error","Button","Input","input","MultiContainer","AddressWrapper","InputField","disablePadding","isEmpty","useCheckFieldValue","name","getValues","React","useState","setIsEmpty","useEffect","componentIsMounted","isFieldEmpty","value","undefined","label","className","style","required","register","errors","onKeyDown","classVal","ref","onKeyPress","e","handleonkeypress","onBlur","target","handleonblur","onChange","message","Title","PageTitle","p","FormHeader","pageHeader","Select","select","DropDownList","memo","placeholder","options","setValue","isValue","rest","defaultValue","event","preventDefault","disabled","hidden","map","key","Label","Span","span","checked","Slider","isChecked","setIsChecked","title","handleOnClick","onClick","cursor","type","handleDeploymentPath","params","process","concat","MORTGAGE_TYPES","CONVENTIONAL","FHA","VA","CASH","AGENT_TYPES","SELLERS","BUYERS","BOTH","PROPERTY_TYPES","SINGLE_FAMILY","MULTI_FAMILY","CONDO","ordinal_suffix_of","i","j","k","AutoCompleteWrapper","AutoComplete","suggestions","howToFilter","status","onSelect","useDefaultFilter","useOnclickOutside","handleOnBlur","activeSuggestion","filteredSuggestions","showSuggestions","userInput","suggestionState","setSuggestionState","state","handleSelect","stopPropagation","text","currentTarget","innerText","indexOf","noSuggestions","persist","filter","suggestion","toLowerCase","keyCode","length","onFocus","some","index","suggestionsListComponent","Address","disable","usePlacesAutocomplete","ready","data","clearSuggestions","getDescriptions","description","PropertyInfo","agentType","propertyInformation","mlsNumber","deedReference","address","mapReferences","handleConditionalFields","CustomDatePicker","control","showYearPicker","dateFormat","render","placeholderText","startDate","selected","Date","optionWrapper","InputRadio","OtherWrapper","RadioSelector","array","other","defaultVal","watch","watchVal","textFieldHasValue","includes","otherVal","setOtherVal","selectedVal","setSelectedValue","Fragment","marginTop","defaultChecked","float","mapRules","rule","Object","keys","reduce","newMap","PHONE_REG_EXP","REQUIRED","VALID_EMAIL","AgentTypeValidation","yup","shape","PropertyValidation","property","notRequired","test","val","propertyType","oneOf","values","condoManagementCompany","when","is","then","vacentOrOccupied","dateHouseBuilt","titleOrTownSewer","publicOrTownWater","inspectionDeadline","buyerhasSubmittedAdditionalOffer","loxBoxCode","typeError","MortgageValidation","mortgage","typeOfMortgage","purchasePrice","firstDeposit","secondDeposit","areConcessions","concessions","mortgageCommitmentDeadline","houseClosingDate","TestAttorneyValidation","attorney","obj","email","emailVerification","firmName","phoneNumber","hasAttorney","wantsRecommendationAndIntroduction","FSBOValidation","forSaleByOwner","sellerFirstName","sellerLastName","sellerEmail","sellerEmailVerification","attorneyfirstName","attorneylastName","attorneyEmail","attorneyEmailVerification","attorneyPhoneNumber","ListingBrokerValidation","broker","company","listing","agent","firstName","lastName","mlsID","LendersValidation","lender","companyName","matches","ClientValidation","client","obj2","Array","isArray","of","nullable","AgentAndBrokerValidation","MLSNumber","compensationPerMLS","Back","history","useHistory","goBack","Next","updateAction","payload","details","useCustomFormHook","validationRules","useStateMachine","action","push","useForm","defaultValues","mode","reValidateMode","resolver","handleSubmit","Property","currPropertyType","setCurrentPropertyType","additionalOffer","setAdditionalOffer","inspectionWaved","setInspectionWaved","onSubmit","buyerHasSubmittedAdditionalOffer","useLoadGoogleSheetInfo","sheetKey","sheetIndex","cellRange","handleSheetData","valuesObj","setReady","sheet","setSheet","setValues","arrayData","setArrayData","loadSpreadSheetInformation","catch","console","log","a","doc","GoogleSpreadsheet","useServiceAccountAuth","require","loadInfo","sheetsByIndex","loadCells","Broker","represents","brokerSheet","getCell","CompanyName","Company","companyError","addressError","generalError","Agents","agentSheet","emails","names","mlsNumbers","organizations","phoneNumbers","Emails","EmailVerifications","Names","PhoneNumbers","Organizations","MLSNumbers","Email","EmailVerification","Name","PhoneNumber","Organization","handleOnSelect","loadAgentPhoneNumber","loadFieldsBasedOnAgent","Agent","useParams","Result","JSON","stringify","ListingBroker","Lenders","Attorney","param1","sethasAttorney","wantsRecommendation","setWantsRecommendation","addresses","firmNames","FirmNames","Addresses","FirmName","askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot","attorneyInformation","GeneralClientInformation","count","setCount","fields","fullAddress","fieldCount","ForSaleByOwner","FSBO","isForSaleByOwner","isFSBO","setIsFSBO","Mortgage","currMortgageType","setCurrMortgageType","isConcessions","setIsConcessions","AgentType","AdditionalInformation","withTracyGagne","setWithTracyGagne","hasReferral","setHasReferral","renderHasReferral","Testing","controlData","setControlData","Client","clientType","exact","path","component","createStore","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.40d228f0.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #e7ecee;\r\n    padding-top: .5rem;\r\n    min-height: 99vh;\r\n    height: 100%;\r\n\r\n    form {\r\n        width: 40rem;\r\n        margin: 0 auto;\r\n        background: transparent;\r\n\r\n        @media only screen and (max-device-width : 640px) {\r\n            width: 95%;\r\n        }\r\n\r\n    }\r\n`;\r\n\r\nexport const FieldTitle = styled.div`\r\n    font-family: Helvetica, Arial, sans-serif; \r\n    position: relative;\r\n    margin-bottom: .5rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    position: relative;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    padding: 1.5rem;\r\n    border-radius: .75rem;\r\n    border: ${props => props.error ? \"1px solid #d93025\" : \"1px solid #d3d3d3\" };\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const Button = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n    margin-right: .5rem;\r\n`;\r\n\r\nexport const MultiContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    \r\n    @media only screen and (max-device-width : 425px) {\r\n        flex-direction: column;\r\n    }\r\n    \r\n`;\r\n\r\n//****Should only be used when inside MultiContainer****\r\nexport const AddressWrapper = styled.div`\r\n    padding-left: 1rem;\r\n    @media only screen and (max-device-width : 425px) {\r\n        padding-left: 0;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nconst highlightColor = \"#16abf0\";\r\nconst paddingHorizontal = \"8px\";\r\n\r\nexport const InputField = styled.div`\r\n    position: relative;\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    /* This is so there can be multiple fields side by side \r\n        Start-block\r\n    */\r\n    padding-left: ${props => props.disablePadding ? 0 : \"1rem\"};\r\n\r\n    @media only screen and (max-device-width : 425px) {\r\n        padding-left: 0;\r\n    }\r\n\r\n    :last-child label {\r\n        padding-left: ${props => props.disablePadding ? 0 : \"1rem\"};\r\n        \r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n\r\n    :first-child {\r\n        padding-left: 0;\r\n        label {\r\n            padding-left: 0;\r\n        }\r\n\r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n    /* end-block */\r\n\r\n    input {\r\n        font-family: Helvetica, Arial, sans-serif;\r\n        font-size: 12pt;\r\n        width: 15.4375rem;\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 2.6em;\r\n        line-height: 2.6em;\r\n        margin-top: .5em;\r\n        border: none;\r\n        outline: none;\r\n        position: relative;\r\n        top: 0;\r\n        left: 0;\r\n        display: block;\r\n        background: transparent;\r\n        z-index: 2;\r\n        border-bottom: 1px solid #ccc;\r\n        text-indent: ${paddingHorizontal};\r\n    }\r\n\r\n    input:focus+label {\r\n        color: ${highlightColor}\r\n    }\r\n\r\n    label {\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        left: ${ props => props.isEmpty ? \"0px\" : paddingHorizontal};\r\n        font-size: 12pt;\r\n        z-index: 1;\r\n        transform-origin: 0, 0.0em;\r\n        transition: transform 500ms, color 300ms;\r\n        transform: ${props => props.isEmpty ? 'scale(0.85, 0.85) rotateY(0)' :  'scale(1,1) rotateY(0)'};\r\n        line-height: ${props => props.isEmpty ? '.25em' : '3em'};\r\n        color: #696969;\r\n    }\r\n\r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n\r\n    .react-datepicker-popper {\r\n        z-index: 4;\r\n    }\r\n\r\n    ::has(> input[type=\"hidden\"]) {\r\n        margin-bottom: 0 !important;\r\n        padding-bottom: 0 !important;\r\n    }\r\n\r\n    /* input[type=\"hidden\"]:(> div.active) {\r\n        margin-bottom: 0 !important;\r\n        padding-bottom: 0 !important;\r\n    } */\r\n\r\n`;\r\n\r\n","import React from \"react\";\r\n\r\nconst useCheckFieldValue = (name, getValues) => {\r\n    \r\n    const [isEmpty, setIsEmpty] = React.useState(false);\r\n    \r\n    const isFieldEmpty = (value) => {\r\n        if(value === \"\" || value === undefined || value === null){\r\n            setIsEmpty(false);\r\n        }else{\r\n            setIsEmpty(true);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let componentIsMounted = true;\r\n        \r\n        if(componentIsMounted && getValues && getValues(`${name}`)) {\r\n            setIsEmpty(true);\r\n        }\r\n\r\n        return () => (componentIsMounted = false);\r\n    }, [name, getValues]);\r\n\r\n    return {\r\n        isFieldEmpty,\r\n        setIsEmpty,\r\n        isEmpty\r\n    }\r\n}\r\n\r\nexport default useCheckFieldValue","import React from 'react'\r\nimport * as S from \"./InputFieldStyled\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\";\r\n\r\nconst InputField = ({ name, label, className, style, required, register, getValues, errors, onKeyDown, ...props }) => {\r\n    const classVal = required ? `${className} required-field` : className;\r\n    const { isEmpty, isFieldEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n\r\n    const handleOnKeyPress = e => {\r\n        setIsEmpty(true)\r\n        if (props.handleonkeypress) {\r\n            props.handleonkeypress(e);\r\n        }\r\n    }\r\n\r\n    const handleOnBlur = e => {\r\n        isFieldEmpty(e.target.value);\r\n        if (props.handleonblur) {\r\n            props.handleonblur(e);\r\n        }\r\n    }\r\n\r\n    const handleOnChange = e => {\r\n        setIsEmpty(true);\r\n        if (props.onChange) {\r\n            props.onChange(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.InputField style={style} isEmpty={isEmpty || props.value}>\r\n            <input\r\n                name={name}\r\n                ref={register}\r\n                onKeyPress={handleOnKeyPress}\r\n                onBlur={handleOnBlur}\r\n                onChange={handleOnChange}\r\n                onKeyDown={onKeyDown}\r\n                {...props}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {errors ? <span>{errors?.message}</span> : null}\r\n        </S.InputField>\r\n    )\r\n}\r\n\r\nexport default InputField\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.div`\r\n    margin: 0 0 .125rem 0;\r\n    padding: 0px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 16pt;\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const PageTitle = styled(Title)`\r\n    margin-top: .5rem;\r\n`;\r\n\r\nexport const message = styled.p`\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    padding: 1rem;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    border-radius: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n`;","import React from 'react';\r\nimport * as S from \"./FormHeaderStyled\";\r\n\r\nconst FormHeader = ({pageHeader}) => {\r\n    return (\r\n        <S.FieldWrapper>\r\n            <S.Title>Massachusetts Real Estate Transaction Form </S.Title>\r\n            <S.message>Please ensure that all information is filled out correctly as this information will be utilized throughout the transaction process.</S.message>\r\n            <S.PageTitle>{pageHeader}</S.PageTitle>\r\n        </S.FieldWrapper>\r\n    )\r\n}\r\n\r\nexport default FormHeader\r\n","import styled from \"styled-components\";\r\n\r\nexport const Select = styled.select`\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    font-size: 12pt;\r\n    width: 12.4375rem;\r\n    border: none;\r\n    border-bottom: 1px solid #ccc;\r\n    margin: 1rem 0 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./DropDownListStyled\"\r\n\r\nconst DropDownList = React.memo(({ placeholder, options, register, setValue, isValue, errors, ...rest }) => {\r\n    \r\n    const handleChange = (event) => {\r\n        event.preventDefault();\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Select defaultValue={isValue} onChange={handleChange} ref={register} {...rest}>\r\n                <option value=\"\" disabled hidden>{placeholder}</option>\r\n                {options.map(value => (\r\n                    <option key={value} value={value}>\r\n                        {value}\r\n                    </option>\r\n                ))}\r\n            </S.Select>\r\n            {errors && \r\n            ( errors.message !== null || errors.message !== undefined \r\n            ? <span>{errors.message}</span>\r\n            : null\r\n            )}\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default DropDownList\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    position: relative;\r\n    display: inline-block;\r\n    margin-left: 1rem;\r\n    top: .25rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 2.825rem;\r\n    height: 1.3rem;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n    display: none;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: ${props => props.checked ? \"#16abf0\" : \"#c9c9c9\"};\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n    border-radius: 30px;\r\n\r\n    ::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        border-radius: 50%;\r\n        height: .8125rem;\r\n        width: .8125rem;\r\n        left: 4px;\r\n        bottom: 4px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 50%;\r\n        -webkit-transform: ${props => props.checked ? \"translateX(25px)\" : null};\r\n        -ms-transform: ${props => props.checked ? \"translateX(25px)\" : null};\r\n        transform: ${props => props.checked ? \"translateX(25px)\" : null};\r\n    }\r\n\r\n    ::after {\r\n        /* content: \"\" + ; */\r\n        content: '${props => props.checked ? \"YES\" : \"NO\"}';\r\n        color: ${props => props.checked ? \"#ccc\" : \"#16abf0\"};\r\n        display: block;\r\n        position: absolute;\r\n        transform: translate(-50%, -50%);\r\n        top: 55%;\r\n        left: ${props => props.checked ? \"30%\" : \"70%\"};\r\n        font-size: 10px;\r\n        font-family: Arial, Helvetica, sans-serif;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./SliderStyled\";\r\nimport { FieldTitle } from \"./FormStyled\";\r\n\r\nconst Slider = React.memo(({ isChecked, setIsChecked, name, register, title }) => {\r\n\r\n    const handleOnClick = () => {\r\n        setIsChecked(isChecked => !isChecked)\r\n    }\r\n\r\n    return (\r\n        <FieldTitle\r\n            onClick={handleOnClick}\r\n            style={{ cursor: 'pointer' }}\r\n        >\r\n            {title}\r\n            <S.Container>\r\n                <S.Label>\r\n                    <S.Input value={isChecked} type=\"checkbox\" name={name} ref={register} />\r\n                    <S.Span checked={isChecked} onClick={handleOnClick} />\r\n                </S.Label>\r\n            </S.Container>\r\n        </FieldTitle>\r\n    )\r\n})\r\n\r\nexport default Slider\r\n","export const deploy = process.env.REACT_APP_DEPLOY_TO_GITHUB_PAGES;\r\nexport const path = process.env.REACT_APP_BASE_PATH;\r\n\r\nexport const handleDeploymentPath = (params) => {\r\n    return deploy === \"true\" ? path.concat(params) : params;\r\n}\r\n\r\nexport const MORTGAGE_TYPES = {\r\n    CONVENTIONAL: \"Conventional\",\r\n    FHA: \"FHA\",\r\n    VA: \"VA\",\r\n    CASH: \"Cash\",\r\n}\r\nexport const AGENT_TYPES = {\r\n    SELLERS: \"Seller\",\r\n    BUYERS: \"Buyer\",\r\n    BOTH: \"Both\"\r\n}\r\n\r\nexport const PROPERTY_TYPES = {\r\n    SINGLE_FAMILY: \"Single Family\",\r\n    MULTI_FAMILY: \"Multi Family\",\r\n    CONDO: \"Condo\"\r\n}\r\n\r\n// What an ordinal suffix is: https://en.wikipedia.org/wiki/Ordinal_numeral\r\nexport function ordinal_suffix_of(i) {\r\n    var j = i % 10,\r\n        k = i % 100;\r\n    if (j === 1 && k !== 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j === 2 && k !== 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j === 3 && k !== 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}","import styled from \"styled-components\";\r\n// TODO update styles\r\n\r\nexport const AutoCompleteWrapper = styled.div`\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    && > div {\r\n        margin-bottom: 0;\r\n        padding-bottom: 0;\r\n    }\r\n\r\n  .no-suggestions {\r\n    color: #999;\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestions {\r\n    position: absolute;\r\n    border: 1px solid #999;\r\n    border-top-width: 0;\r\n    list-style: none;\r\n    margin-top: 0;\r\n    max-height: 143px;\r\n    overflow-y: auto;\r\n    padding-left: 0;\r\n    width: calc(300px + 1rem);\r\n    z-index: 1000;\r\n    background-color: #FFF;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .suggestions li {\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestion-active,\r\n  .suggestions li:hover {\r\n    background-color: #16abf0;\r\n    color: #FFF;\r\n    cursor: pointer;\r\n    font-weight: 700;\r\n  }\r\n  \r\n  .suggestions li:not(:last-of-type) {\r\n    border-bottom: 1px solid #999;\r\n  }\r\n`","import React from 'react'\r\nimport InputField from './InputField';\r\nimport * as S from \"./AutoCompleteStyled\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\n\r\n// TODO: Add auto scrolling to keep active item into focus\r\nconst AutoComplete = ({\r\n\r\n  /** A list of items to sort and display as suggestions */\r\n  suggestions = [],\r\n\r\n  /** Can be a custom filter function that with params (suggestions) and returns (filteredSuggestions) */\r\n  howToFilter,\r\n\r\n  /** pass a function that uses onBlur and gets the params (event) */\r\n  handleonblur,\r\n\r\n  /** pass a function that uses OnKeyPress and gets the params (event) */\r\n  handleonkeypress,\r\n\r\n  /** Can be used when you want to disable the field during loading or other reasons */\r\n  status,\r\n\r\n  /** Allows for onChange effect with params of (event) */\r\n  onChange,\r\n  \r\n  /** Can pass a function that is triggered on selection of an item in the list of suggestions. The possible params are (event , tuple) */\r\n  onSelect,\r\n  /** If you do not wish to pass a sorting method you can use the default one provided in onChange */\r\n  useDefaultFilter = true,\r\n  value,\r\n  getValues,\r\n  name,\r\n  ...props }) => {\r\n    const ref = useOnclickOutside(() => {\r\n      handleOnBlur();\r\n    });\r\n    \r\n    const [suggestionState, setSuggestionState] = React.useState({\r\n        // The active suggestion's index\r\n        activeSuggestion: 0,\r\n        // The suggestions that match the user's input\r\n        filteredSuggestions: [],\r\n        // Whether or no the suggestion list is shown\r\n        showSuggestions: false,\r\n        // What the user has entered\r\n        userInput: value ? value : \"\",\r\n    });\r\n    \r\n    React.useEffect(() => {\r\n      setSuggestionState(state => {\r\n        return {\r\n          ...state,\r\n          userInput: value\r\n        }\r\n      })\r\n    }, [value])\r\n\r\n    // This is required because AutoComplete is using InputField as a controlled component\r\n    React.useEffect(() => {\r\n      if(getValues && getValues(`${name}`)){\r\n        setSuggestionState({userInput: getValues(`${name}`)})\r\n      }\r\n    }, [name, getValues])\r\n    \r\n    const handleOnBlur = (e) => {\r\n      if(handleonblur){\r\n        handleonblur(e);\r\n      }\r\n      setSuggestionState(state => {\r\n        return {\r\n        ...state,\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n      }});\r\n    }\r\n    \r\n    \r\n    const handleOnChange = e => {\r\n      e.stopPropagation();\r\n      const userInput = e.target.value;\r\n      \r\n      if(onChange){\r\n        onChange(e);\r\n      }\r\n      e.persist();\r\n\r\n      // Filter our suggestions that don't contain the user's input\r\n      let filteredSuggestions;     \r\n      if(howToFilter){\r\n        filteredSuggestions = howToFilter(suggestions);        \r\n      } else {\r\n        filteredSuggestions = suggestions;\r\n      }\r\n      \r\n      if(useDefaultFilter && !howToFilter){\r\n        filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\r\n      }\r\n      \r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions,\r\n        showSuggestions: true,\r\n        userInput: userInput,\r\n      });\r\n      };\r\n\r\n    const handleSelect = (e) => {\r\n      e.stopPropagation();\r\n      let text = e.currentTarget.innerText;\r\n      \r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n        userInput: text,\r\n      });\r\n\r\n      if(onSelect){\r\n        onSelect(e, suggestions.indexOf(text));\r\n      }\r\n    };\r\n\r\n    const handleOnKeyDown = e => {\r\n      const { activeSuggestion, filteredSuggestions } = suggestionState;\r\n\r\n      // User pressed the enter key\r\n      if (e.keyCode === 13) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setSuggestionState(state => { \r\n          return {\r\n            ...state,\r\n            activeSuggestion: 0,\r\n            showSuggestions: false,\r\n            userInput: filteredSuggestions[activeSuggestion]\r\n          }\r\n        });\r\n\r\n        if(onSelect){\r\n          onSelect(e, suggestions.indexOf(filteredSuggestions[activeSuggestion]))\r\n        }\r\n      }\r\n      \r\n      // User pressed the up arrow\r\n      else if (e.keyCode === 38) {\r\n        if (activeSuggestion === 0) {\r\n          return;\r\n        }\r\n        setSuggestionState(state => {\r\n          return { ...state, activeSuggestion: activeSuggestion - 1} \r\n        });\r\n      }\r\n      \r\n\r\n      // User pressed the down arrow\r\n      else if (e.keyCode === 40) {\r\n      \r\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n          return;\r\n        }\r\n      \r\n        \r\n        setSuggestionState(state => {\r\n          return { ...state, activeSuggestion: activeSuggestion + 1} \r\n        });\r\n      };\r\n      e.stopPropagation();\r\n    };\r\n\r\n    const handleOnFocus = () => {\r\n      setSuggestionState(state => {\r\n        return {\r\n        ...state,\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: suggestions,\r\n        showSuggestions: true,\r\n      }});\r\n    }\r\n\r\n    const noSuggestions = () => {\r\n      return (\r\n        <div className=\"no-suggestions\">\r\n          <em>No suggestions</em>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const suggestionsListComponent = () => {\r\n      const { showSuggestions, filteredSuggestions, activeSuggestion } = suggestionState;\r\n\r\n      if (showSuggestions) {\r\n        if (filteredSuggestions.length) {\r\n          if(!filteredSuggestions.some(suggestion => suggestion !== null)){\r\n            return noSuggestions();\r\n          }\r\n          return (\r\n            <ul className=\"suggestions\">\r\n                  {filteredSuggestions.map((suggestion, index) => {\r\n                    if(suggestion) {\r\n                    let className;\r\n\r\n                    if (index === activeSuggestion) {\r\n                      className = \"suggestion-active\";\r\n                    }\r\n      \r\n                    return (\r\n                      <li className={className} key={`${suggestion}.${index}`} onClick={handleSelect}>\r\n                        {suggestion}\r\n                      </li>\r\n                    );\r\n                  }else{\r\n                    return null\r\n                  };\r\n                  })}\r\n                </ul>\r\n              );\r\n          } else {\r\n            noSuggestions();\r\n          }\r\n        }    \r\n    }\r\n    \r\n\r\n    return (\r\n        <S.AutoCompleteWrapper ref={ref}>\r\n          <InputField\r\n            value={suggestionState.userInput}\r\n            onChange={handleOnChange}\r\n            onKeyDown={handleOnKeyDown}\r\n            onFocus={handleOnFocus}\r\n            getValues={getValues}\r\n            name={name}\r\n            {...props}\r\n          />\r\n          {suggestionsListComponent()}\r\n      </S.AutoCompleteWrapper>\r\n    )\r\n}\r\n\r\nexport default AutoComplete\r\n","import React from 'react'\r\nimport usePlacesAutocomplete from \"use-places-autocomplete\";\r\nimport AutoComplete from './AutoComplete';\r\n\r\n/* \r\n  Uses google places api to lookup address and utilizes AutoComplete\r\n  to generate dropdown list of choices to select from.\r\n*/\r\n\r\nconst Address = ({ disable=false, text, name, ...props }) => {\r\n    const {\r\n        ready,\r\n        suggestions: { status, data },\r\n        value,\r\n        setValue,\r\n        clearSuggestions,\r\n      } = usePlacesAutocomplete();\r\n\r\n      React.useEffect(() => {\r\n        if(text){\r\n          setValue(text);\r\n        }\r\n      }, [text, setValue]);\r\n\r\n      const handleInput = (e) => {\r\n        setValue(e.target.value);\r\n      };\r\n     \r\n      const handleSelect = (e) => () => {\r\n        setValue(e.currentTarget.innerText, false);\r\n        clearSuggestions();\r\n      };\r\n\r\n      const handleOnBlur = () => {\r\n        clearSuggestions();\r\n      }\r\n\r\n      const getDescriptions = data.map(({description}) => description);\r\n\r\n      return (\r\n          <AutoComplete\r\n            value={value}\r\n            onSelect={handleSelect}\r\n            onChange={handleInput}\r\n            disabled={disable || !ready}\r\n            handleonblur={handleOnBlur}\r\n            suggestions={getDescriptions}\r\n            status={status}\r\n            useDefaultFilter={false}\r\n            name={name}\r\n            {...props}\r\n          />\r\n      );\r\n}\r\n\r\nexport default Address\r\n","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport InputField from \"./InputField\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst PropertyInfo = ({ \r\n    register, \r\n    errors,\r\n    getValues, \r\n    agentType, \r\n    }) => {\r\n    const propertyInformation =\r\n    errors[\"property\"]?.mlsNumber ||\r\n    errors[\"property\"]?.deedReference ||\r\n    errors[\"property\"]?.address ||\r\n    errors[\"property\"]?.mapReferences;\r\n\r\n    const handleConditionalFields = () => {\r\n        if(agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH){\r\n            return (\r\n                <S.MultiContainer>\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mapReferences\"\r\n                    label=\"Map References (Page)\"\r\n                    errors={errors[\"property\"]?.mapReferences}\r\n                    register={register}\r\n                    required={true} />\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.deedReference\"\r\n                    label=\"Deed Reference (Book)\" \r\n                    errors={errors[\"property\"]?.deedReference} \r\n                    register={register}\r\n                    required={true} />\r\n                </S.MultiContainer>\r\n            )\r\n        }else{\r\n            return (\r\n            <div>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.deedReference\"\r\n                label=\"Deed Reference (Book)\" \r\n                errors={errors[\"property\"]?.deedReference} \r\n                register={register}\r\n                required={true} />\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.FieldWrapper error={propertyInformation}>\r\n            <S.FieldTitle>Property Information</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mlsNumber\"\r\n                    label=\"MLS Number\" \r\n                    errors={errors[\"property\"]?.mlsNumber}\r\n                    register={register} \r\n                    required={true} />\r\n                     <S.AddressWrapper>\r\n                    <Address\r\n                    getValues={getValues}\r\n                    name=\"property.address\"\r\n                    label=\"Address\" \r\n                    errors={errors[\"property\"]?.address}\r\n                    register={register} \r\n                    required={true} />\r\n                    </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n            {handleConditionalFields()}\r\n        </S.FieldWrapper>\r\n    )\r\n}\r\n\r\nexport default PropertyInfo\r\n","import React from 'react';\r\nimport * as S from \"./InputFieldStyled\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\"\r\n\r\nconst CustomDatePicker = ({ control, name, label, errors, required, className, showYearPicker, dateFormat=\"MM/dd/yyyy\", getValues, ...rest }) => {\r\n    const classVal = required ? `${className} required-field`: className;\r\n    const { isEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n    \r\n    return (\r\n        <S.InputField disablePadding={true} isEmpty={isEmpty}>\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                defaultValue={null}\r\n                {...rest}\r\n                render={(props) => {\r\n                return <DatePicker\r\n                    showYearPicker={showYearPicker}\r\n                    dateFormat={dateFormat}\r\n                    defaultValue={null}\r\n                    placeholderText={null}\r\n                    startDate={null}\r\n                    className=\"input\"\r\n                    selected={ props.value !== null ? new Date(props.value) : null}\r\n                    onChange={(e) => {\r\n                        props.onChange(e)\r\n                        setIsEmpty(true);\r\n                        if(e === null){\r\n                            setIsEmpty(false)\r\n                        }\r\n                    }}\r\n                    onBlur={(e) => {\r\n                        if(e.target.value === \"\"){\r\n                            setIsEmpty(false);\r\n                        }\r\n                        e.preventDefault();\r\n                    }}\r\n                    onFocus={(e) => {\r\n                        setIsEmpty(true)\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                    }}\r\n                />\r\n                }}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {required && errors && <span>Required Field</span>}\r\n        </S.InputField>  \r\n    )\r\n}\r\n\r\nexport default CustomDatePicker\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 1em;\r\n`;\r\n\r\nexport const optionWrapper = styled.div`\r\n    margin: .5rem;\r\n`;\r\n\r\nexport const InputRadio = styled.input`\r\n    width: 1rem;\r\n    height: 1rem;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    margin: .25em;\r\n    font-weight: 450;\r\n    padding-left: .25rem;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const OtherWrapper = styled.div`\r\n    display: inline-block;\r\n    margin: .5rem;\r\n    position: relative;\r\n    top: -1.125rem;\r\n`;","import React from 'react';\r\nimport * as S from \"./RadioSelectorStyled\";\r\nimport InputField from \"./InputField\";\r\n\r\nconst RadioSelector = React.memo(({ register, name, array, other = false, defaultVal, getValues, watch }) => {\r\n    /* \r\n        Lines 9 -> 13 Takes care of the inputfield value on return to the page\r\n        if it was a selected as the option. If it was not selected then it will\r\n        be set to \"\"\r\n    */\r\n    let watchVal = watch ? watch(name) : false;\r\n    let textFieldHasValue = watchVal ? !array.includes(watchVal) : \"\";\r\n    const [otherVal, setOtherVal] = React.useState({\r\n        text: textFieldHasValue ? watchVal : \"\"\r\n    })\r\n    const [selectedVal, setSelectedValue] = React.useState(\"\");\r\n\r\n    const handleSetOtherVal = (e) => {\r\n        setOtherVal(state => {\r\n            return {\r\n                text: e.target.value\r\n            }\r\n        });\r\n        e.persist();\r\n    }\r\n\r\n    // TODO: Make Labels Clickable? Improves interaction for older/elderly users\r\n    return (\r\n        <React.Fragment>\r\n            <S.Container>\r\n                {array.map((value) => (\r\n                    <S.optionWrapper key={`input-${value}`}>\r\n                        <S.InputRadio\r\n                            onChange={() => setSelectedValue(value)}\r\n                            name={name}\r\n                            type=\"radio\"\r\n                            defaultValue={value}\r\n                            checked={value === selectedVal}\r\n                            ref={register} />\r\n                        <S.Label onClick={() => setSelectedValue(value)}>\r\n                            {value}\r\n                        </S.Label>\r\n                    </S.optionWrapper>\r\n                ))}\r\n            </S.Container>\r\n            {other ?\r\n                <S.OtherWrapper>\r\n                    <S.InputRadio\r\n                        value={otherVal?.text}\r\n                        name={name}\r\n                        type=\"radio\"\r\n                        style={{ marginTop: \"1.825rem\" }}\r\n                        defaultChecked={otherVal?.text === defaultVal}\r\n                        ref={register}\r\n                    />\r\n                    <div style={{ float: \"right\" }}>\r\n                        <InputField\r\n                            onChange={handleSetOtherVal}\r\n                            value={otherVal?.text}\r\n                            label=\"Other\"\r\n                            required={false}\r\n                            getValues={getValues}\r\n                        />\r\n                    </div>\r\n                </S.OtherWrapper>\r\n                : null}\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nexport default RadioSelector\r\n","import * as yup from \"yup\";\r\nimport { AGENT_TYPES, MORTGAGE_TYPES, PROPERTY_TYPES } from \"../shared\";\r\n\r\n// This is used in lazy validation rules found here: https://github.com/jquense/yup/issues/130#issuecomment-578392176\r\nconst mapRules = (map, rule) => Object.keys(map).reduce((newMap, key) => ({...newMap, [key]: rule}), {});\r\n\r\n// Regular Express to Verify phone numbers taken from: https://www.sitepoint.com/community/t/phone-number-regular-expression-validation/2204/4\r\nconst PHONE_REG_EXP = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\nconst REQUIRED = \"Required\";\r\nconst NOT_REQUIRED = \"Not Required\"\r\nconst VALID_EMAIL = \"Must be a Valid Email!\";\r\nconst NUMBER_ERROR_MESSAGE = \"Can only contain numbers\";\r\n\r\n\r\nexport const AgentTypeValidation = (agentType) => yup.object().shape({\r\n    agentType: yup.string().required(REQUIRED),\r\n});\r\n\r\nexport const PropertyValidation = (agentType) => yup.object().shape({\r\n    property: yup.object().shape({\r\n        mapReferences: (agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH) ?  yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        deedReference: yup.string().required(REQUIRED).test('len', 'Must be in format XXXX-XXXXXXX', val => val.length === 11).required(REQUIRED),\r\n        mlsNumber: yup.string().test('len', 'Must be exactly 7 digits', val => val.length === 7).required(REQUIRED),\r\n        address: yup.string().required(REQUIRED),\r\n        propertyType: yup.string().required(REQUIRED).oneOf([...Object.values(PROPERTY_TYPES)], \"Select a valid Property type.\"),\r\n        condoManagementCompany: yup.string()\r\n        .when(\r\n            \"propertyType\",\r\n        { is: val => val === PROPERTY_TYPES.CONDO,\r\n            then: yup.string().required(REQUIRED)\r\n        }),\r\n        vacentOrOccupied: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        dateHouseBuilt: yup.string().required(REQUIRED),\r\n        titleOrTownSewer: yup.string().required(REQUIRED),\r\n        publicOrTownWater: yup.string().required(REQUIRED),\r\n        inspectionDeadline: yup.string().required(REQUIRED),\r\n        buyerhasSubmittedAdditionalOffer: agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        loxBoxCode: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE) : yup.mixed().notRequired(),\r\n})});\r\n\r\nexport const MortgageValidation = (agentType) => yup.object().shape({\r\n    mortgage: yup.object().shape({\r\n        typeOfMortgage: yup.string().required(REQUIRED),\r\n        purchasePrice: yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE),\r\n        firstDeposit: yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE),\r\n        secondDeposit: yup.string().notRequired(NOT_REQUIRED),\r\n        areConcessions: yup.string().notRequired(NOT_REQUIRED),\r\n        concessions: yup.string()\r\n        .when(\r\n            \"areConcessions\",\r\n            { is: val => val === true,\r\n              then: yup.string().required(REQUIRED)\r\n        }),\r\n        mortgageCommitmentDeadline: yup.string().when(\r\n            \"typeOfMortgage\",\r\n            {\r\n                is: val => val !== MORTGAGE_TYPES.CASH,\r\n                then: yup.string().required(REQUIRED)\r\n            }\r\n        ),\r\n        houseClosingDate: yup.string().required(REQUIRED),\r\n    })\r\n})\r\n\r\nexport const AttorneyValidation = (agentType) => yup.object().shape({\r\n    firstName: yup.string().required(REQUIRED),\r\n    lastName: yup.string().required(REQUIRED),\r\n    email: yup.string().required(REQUIRED),\r\n    emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"),\r\n    firmName: yup.string().notRequired(),\r\n    phoneNumber: yup.string().notRequired().matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n});\r\n\r\nexport const TestAttorneyValidation = (agentType) => yup.object().shape({\r\n    attorney: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        name: yup.string().required(REQUIRED),\r\n        email: yup.string().required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"),\r\n        firmName: yup.string().notRequired(NOT_REQUIRED),\r\n        phoneNumber: yup.string().notRequired(NOT_REQUIRED),\r\n        hasAttorney: yup.string().notRequired(NOT_REQUIRED),\r\n        wantsRecommendationAndIntroduction: yup.string().notRequired(NOT_REQUIRED),\r\n    }))))\r\n})\r\n\r\nexport const FSBOValidation = (agentType) => yup.object().shape({\r\n    forSaleByOwner: yup.string().required(REQUIRED),\r\n    sellerFirstName: yup.string().notRequired(),\r\n    sellerLastName: yup.string().notRequired(),\r\n    sellerEmail: yup.string().notRequired(),\r\n    sellerEmailVerification: yup.string().notRequired().oneOf([yup.ref('sellerEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyfirstName: yup.string().notRequired(),\r\n    attorneylastName: yup.string().notRequired(),\r\n    attorneyEmail: yup.string().notRequired(),\r\n    attorneyEmailVerification: yup.string().notRequired().oneOf([yup.ref('attorneyEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyPhoneNumber: yup.string().notRequired(),\r\n});\r\n\r\nexport const BrokerValidation = (agentType) => yup.object().shape({\r\n    broker: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        company: yup.string().required(REQUIRED),\r\n    }))))\r\n});\r\n\r\nexport const ListingBrokerValidation = (agentType) => yup.object().shape({\r\n    broker: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        company: yup.string().required(REQUIRED),\r\n    })))),\r\n    listing: yup.object().shape({\r\n        agent: yup.object().shape({\r\n            firstName: yup.string().required(REQUIRED),\r\n            lastName: yup.string().required(REQUIRED),\r\n            email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n            emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"),\r\n            phoneNumber: yup.string().required(REQUIRED),\r\n            mlsID: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.mixed().notRequired(NOT_REQUIRED)\r\n        }),\r\n    })\r\n});\r\n\r\nexport const LendersValidation = (agentType) => yup.object().shape({\r\n    lender: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        companyName: yup.string().notRequired(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n    }),\r\n});\r\n\r\nexport const AdditionalInformationValidation = (agentType) => yup.object().shape({\r\n\r\n});\r\n\r\n/* \r\n    This object validation rule can be utilized to define a lazy array\r\n*/\r\nexport const ClientValidation = (agentType) => yup.object().shape({\r\n    client: yup.lazy(obj => {     \r\n                    return yup.object(mapRules(obj, yup.lazy(obj2 => {\r\n                    if(Array.isArray(obj2)){\r\n                        return yup.array().of(yup.object().shape({\r\n                        firstName: yup.string().required(REQUIRED),\r\n                        lastName: yup.string().required(REQUIRED),\r\n                        address: yup.string().required(REQUIRED),\r\n                        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n                        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n                        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n                    }));\r\n                    }\r\n                    return yup.mixed().notRequired(NOT_REQUIRED).nullable();\r\n                }\r\n            )\r\n        ))\r\n    })\r\n})\r\n\r\n// switch(typeof(obj)){\r\n//     case 'object':\r\n//         case 'number': return yup.number().notRequired();\r\n//         default: return yup.mixed().notRequired();\r\n\r\nexport const AgentAndBrokerValidation = (agentType) =>  yup.object().shape({\r\n    broker: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        company: yup.string().required(REQUIRED),\r\n    })))),\r\n    agent: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        name: yup.string().required(REQUIRED),\r\n        MLSNumber: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n        compensationPerMLS: agentType === AGENT_TYPES.SELLERS ? yup.string().required(REQUIRED) : yup.mixed().notRequired(),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    }))))\r\n});","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// TODO: Update button to save state on back\r\nexport const Back = () => {\r\n    const history = useHistory();\r\n    return (<S.Input type=\"button\" value=\"Back\" onClick={() => history.goBack()} />)\r\n}\r\n\r\nexport const Next = () => {\r\n    return (\r\n        <S.Input type=\"submit\" value=\"Next\" />\r\n    )\r\n}\r\n\r\n","export default function updateAction(state, payload) {\r\n    return {\r\n      ...state,\r\n      details: {\r\n        ...state.details,\r\n        ...payload\r\n      }\r\n    };\r\n  }\r\n","import { useHistory } from \"react-router-dom\";\r\nimport { useStateMachine } from 'little-state-machine';\r\nimport updateAction from '../state/updateState';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers\";\r\n\r\n\r\nconst useCustomFormHook =  (validationRules ) => {\r\n    const { state, action } = useStateMachine(updateAction);\r\n    const agentType = state.details.agentType ? state.details.agentType : null\r\n    const { push } = useHistory();\r\n    const { register, handleSubmit, getValues, errors, control, watch, setValue } = useForm({\r\n        defaultValues: state.details,\r\n        mode: 'onBlur',\r\n        reValidateMode: 'onBlur',\r\n        resolver: validationRules && process.env.REACT_APP_ENABLE_VALIDATION === 'true' ? yupResolver(validationRules(agentType)) : null\r\n    });\r\n    \r\n    return {\r\n        setValue,\r\n        register,\r\n        control,\r\n        handleSubmit,\r\n        getValues,\r\n        errors,\r\n        action,\r\n        push,\r\n        state,\r\n        agentType,\r\n        watch\r\n    }\r\n} \r\n\r\nexport default useCustomFormHook","import React from 'react';\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport PropertyInfo from \"../FormFields/PropertyInfo\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { PropertyValidation } from \"../../validation\";\r\nimport { PROPERTY_TYPES, AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\nconst Property = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(PropertyValidation);\r\n    const [currPropertyType, setCurrentPropertyType] = React.useState(\"\");\r\n    const [additionalOffer, setAdditionalOffer] = React.useState(false);\r\n    const [inspectionWaved, setInspectionWaved] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Mortgage\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader=\"Property Information\" />\r\n                <PropertyInfo agentType={agentType} getValues={getValues} errors={errors} register={register} />\r\n                <S.FieldWrapper error={errors[\"property\"]?.propertyType}>\r\n                    <S.FieldTitle>Property Type</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Property Types\"\r\n                        name=\"property.propertyType\"\r\n                        label=\"Select a Property Type\"\r\n                        errors={errors[\"property\"]?.propertyType}\r\n                        options={Object.values(PROPERTY_TYPES)}\r\n                        register={register}\r\n                        isValue={currPropertyType}\r\n                        setValue={setCurrentPropertyType} />\r\n                </S.FieldWrapper>\r\n                {/* TODO: Multi Family. Are there tenants \r\n                apt1, staying, vaca date (NOT REQUIRED)\r\n                and if there are are they staying. Final vaca date*/}\r\n                {currPropertyType === \"Condo\" ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.condoManagementCompany}>\r\n                        <S.FieldTitle>Who is the Condo Management Company</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.condoManagementCompany\"\r\n                                label=\"Management Company\"\r\n                                errors={errors[\"property\"]?.condoManagementCompany}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null\r\n                }\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.vacentOrOccupied}>\r\n                        <S.FieldTitle>Is the house vacant or occupied?</S.FieldTitle>\r\n                        <RadioSelector\r\n                            register={register}\r\n                            name=\"property.vacentOrOccupied\"\r\n                            array={[\"Vacant\", \"Occupied\"]}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors[\"property\"]?.dateHouseBuilt}>\r\n                    <S.FieldTitle>Year Built</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        getValues={getValues}\r\n                        showYearPicker={true}\r\n                        control={control}\r\n                        name=\"property.dateHouseBuilt\"\r\n                        label=\"Select Date Built\"\r\n                        required={true}\r\n                        dateFormat=\"yyyy\"\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.titleOrTownSewer}>\r\n                    <S.FieldTitle>Is there a Title V or Town Sewer</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.titleOrTownSewer\"\r\n                        array={[\"Title V\", \"Public Sewer\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.publicOrTownWater}>\r\n                    <S.FieldTitle>Public or Town Water</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.publicOrTownWater\"\r\n                        array={[\"Town Water\", \"Private Water\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.inspectionWaved || errors[\"property\"]?.inspectionDeadline}>\r\n                    <Slider\r\n                        title=\"Inspection Waved\"\r\n                        isChecked={inspectionWaved}\r\n                        setIsChecked={setInspectionWaved}\r\n                        name=\"property.isInspectionWaved\"\r\n                        register={register}\r\n                        required={false} />\r\n                    {inspectionWaved ? null :\r\n                        <CustomDatePicker\r\n                            getValues={getValues}\r\n                            control={control}\r\n                            name=\"property.inspectionDeadline\"\r\n                            label=\"Select Inspection Deadline\"\r\n                            required={true}\r\n                        />}\r\n                </S.FieldWrapper>\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH\r\n                    ? <S.FieldWrapper error={errors[\"property\"]?.loxBoxCode}>\r\n                        <S.FieldTitle>Lox Box Code</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.loxBoxCode\"\r\n                                label=\"Lox Box Code\"\r\n                                errors={errors[\"property\"]?.loxBoxCode}\r\n                                required={true}\r\n                                register={register}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper> : null}\r\n                {/* TODO: This is currently used to determine what type of email should be sent.\r\n                    Note: Refer to Wendy Email for Message differences.\r\n                */}\r\n                {agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.buyerHasSubmittedAdditionalOffer}>\r\n                        <Slider\r\n                            title=\"Has the buyer submitted an offer for another property?\"\r\n                            isChecked={additionalOffer}\r\n                            setIsChecked={setAdditionalOffer}\r\n                            name=\"property.buyerHasSubmittedAdditionalOffer\"\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.FieldWrapper> : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    );\r\n}\r\n\r\nexport default Property","import React from \"react\";\r\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\r\n\r\nconst useLoadGoogleSheetInfo = (\r\n    /** The key found on a google sheet which will give access to the sheet */\r\n    sheetKey,\r\n    /** What sheet index would you like to load. This correlates to the sheet tabs at the bottom of google sheets */\r\n    sheetIndex,\r\n    /** Defines what cell range to load from the sheet. E.g., 'A:B' while load columns A and B */\r\n    cellRange,\r\n    /** A function is expected here and is passed the sheet object. This allows each component\r\n     *  to decide how it wants to handle the data retrieved from the sheet.\r\n     */\r\n    handleSheetData,\r\n    /**  By defining the values object at initialization we can avoid switching between controlled and uncontrolled components. */\r\n    valuesObj,\r\n) => {\r\n    const [ready, setReady] = React.useState(false);\r\n    const [sheet, setSheet] = React.useState();\r\n    const [values, setValues] = React.useState(valuesObj);\r\n    const [arrayData, setArrayData] = React.useState({});\r\n\r\n    React.useEffect(() => {\r\n        let componentIsMounted = true;\r\n        if (componentIsMounted) {\r\n            loadSpreadSheetInformation(componentIsMounted)\r\n                .then(sheet => componentIsMounted ? setSheet(sheet) : null)\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n            setReady(ready);\r\n        }\r\n\r\n        return () => (componentIsMounted = false);\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const loadSpreadSheetInformation = async (componentIsMounted) => {\r\n        const doc = new GoogleSpreadsheet(sheetKey);\r\n        /** This json is a service account from google developer console: https://console.developers.google.com/ */\r\n        await doc.useServiceAccountAuth(require(\"../wendy-realestate.json\")).catch(error => console.log(error));\r\n        await doc.loadInfo().catch(error => console.log(error));\r\n        const sheet = doc.sheetsByIndex[sheetIndex];\r\n        await sheet.loadCells(cellRange).catch(error => console.log(error));\r\n\r\n        if (handleSheetData) {\r\n            await handleSheetData(sheet, componentIsMounted);\r\n        }\r\n\r\n        return sheet;\r\n    }\r\n\r\n    return {\r\n        ready,\r\n        sheet,\r\n        setSheet,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    }\r\n}\r\n\r\nexport default useLoadGoogleSheetInfo","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\nimport useLoadGoogleSheetInfo from \"../../hooks/useLoadGoogleSheetInfo\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst Broker = React.memo(({ getValues, errors, register, represents, title, ...props}) => {\r\n    const handleSheetData = (brokerSheet, componentIsMounted) => {\r\n        if(componentIsMounted){\r\n        const companyName = [];\r\n        const address = [];\r\n        let index = 1;\r\n        while(brokerSheet.getCell(index, 0).value !== null){\r\n            companyName.push(brokerSheet.getCell(index,0).value);\r\n            address.push(brokerSheet.getCell(index,1).value);\r\n            index++;\r\n        }\r\n\r\n        setArrayData({\r\n            CompanyName: companyName,\r\n            Address: address\r\n        });}\r\n    }\r\n    const spreadSheetKey = \"1t5vhaok4dHE0H40hDd0B75mRisNf7cHDHa84Vp-aNN4\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData \r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:B',\r\n        handleSheetData,\r\n        {\r\n            Company: \"\",\r\n            Address: \"\"\r\n        }\r\n        );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Company: arrayData.CompanyName[index],\r\n                Address: arrayData.Address[index],\r\n            }\r\n        })\r\n    }\r\n\r\n    let companyError = errors?.broker?.[represents]?.company;\r\n    let addressError = errors?.broker?.[represents]?.address;\r\n    let generalError = companyError || addressError;\r\n\r\n    return (\r\n        <S.FieldWrapper error={generalError}>\r\n            <S.FieldTitle>{title ? title : \"\"} Broker Information</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                <AutoComplete\r\n                    name={`broker.${represents}.company`}\r\n                    errors={companyError}\r\n                    register={register}\r\n                    getValues={getValues}\r\n                    label=\"Broker Name\"\r\n                    onSelect={handleOnSelect}\r\n                    useDefaultFilter={true}\r\n                    onChange={(e) => setValues(state => {\r\n                        e.persist();\r\n                        return {\r\n                            ...state,\r\n                            Company: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                        }\r\n                    })}\r\n                    suggestions={arrayData.CompanyName}\r\n                    status={ready}\r\n                    value={values.Company}\r\n                    {...props}\r\n                />\r\n                <S.AddressWrapper>\r\n                <Address\r\n                    name={`broker.${represents}.address`}\r\n                    errors={addressError}\r\n                    register={register}\r\n                    getValues={getValues}\r\n                    label=\"Address\"\r\n                    useDefaultFilter={true}\r\n                    status={ready}\r\n                    text={values.Address}\r\n                    {...props}\r\n                />\r\n                </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n        </S.FieldWrapper>\r\n    )\r\n})\r\n\r\nexport default Broker\r\n","import React from 'react'\r\nimport AutoComplete from \"./AutoComplete\";\r\nimport InputField from \"./InputField\";\r\nimport useLoadGoogleSheetInfo from '../../hooks/useLoadGoogleSheetInfo';\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\n\r\nconst Agents = ({ register, errors, getValues, represents, agentType, title }) => {\r\n\r\n    const handleSheetData = (agentSheet, componentIsMounted) => {\r\n        if (componentIsMounted) {\r\n            const emails = [];\r\n            const names = [];\r\n            const mlsNumbers = [];\r\n            const organizations = [];\r\n            const phoneNumbers = [];\r\n\r\n            let index = 1;\r\n            while (agentSheet.getCell(index, 0).value !== null) {\r\n                names.push(agentSheet.getCell(index, 0).value);\r\n                emails.push(agentSheet.getCell(index, 1).value);\r\n                phoneNumbers.push(agentSheet.getCell(index, 2).value);\r\n                organizations.push(agentSheet.getCell(index, 3).value);\r\n                mlsNumbers.push(agentSheet.getCell(index, 4).value);\r\n                index++;\r\n            }\r\n\r\n            const emailVerification = emails;\r\n\r\n            setArrayData({\r\n                Emails: emails,\r\n                EmailVerifications: emailVerification,\r\n                Names: names,\r\n                PhoneNumbers: phoneNumbers,\r\n                Organizations: organizations,\r\n                MLSNumbers: mlsNumbers,\r\n            });\r\n        }\r\n    }\r\n\r\n    const spreadSheetKey = \"1Ra6DMJkEw0BN_XBShvL-Cs-zKzBtj4ilPK7WNGLbk8Y\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:E',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            PhoneNumber: \"\",\r\n            Organization: \"\",\r\n            MLSNumber: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                PhoneNumber: arrayData.PhoneNumbers[index] ? arrayData.PhoneNumbers[index] : values.PhoneNumber,\r\n                Organization: arrayData.Organizations[index] ? arrayData.Organizations[index] : \"\",\r\n                MLSNumber: arrayData.MLSNumbers[index] ? arrayData.MLSNumbers[index] : \"\",\r\n            }\r\n        });\r\n    }\r\n\r\n    const loadAgentPhoneNumber = () => {\r\n        return (\r\n            <AutoComplete\r\n                value={values.PhoneNumber}\r\n                onChange={(e) => {\r\n                    e.persist();\r\n                    setValues(state => {\r\n                        return {\r\n                            ...state,\r\n                            PhoneNumber: e?.target?.value\r\n                        }\r\n                    })\r\n                }}\r\n                getValues={getValues}\r\n                name={`agent.${represents}.phoneNumber`}\r\n                label=\"Phone Number\"\r\n                errors={errors?.agent?.[represents]?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n    const loadFieldsBasedOnAgent = () => {\r\n        if (AGENT_TYPES.BUYERS === agentType) {\r\n            return (\r\n                <div>\r\n                    {loadAgentPhoneNumber()}\r\n                </div>\r\n            )\r\n        } else if (AGENT_TYPES.SELLERS === agentType) {\r\n            return (\r\n                <S.MultiContainer>\r\n                    {loadAgentPhoneNumber()}\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`agent.${represents}.compensationPerMLS`}\r\n                        label=\"Agency Compensation per MLS\"\r\n                        errors={errors?.agent?.[represents]?.compensationPerMLS}\r\n                        register={register}\r\n                        required={true}\r\n                    />\r\n                </S.MultiContainer>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.FieldWrapper >\r\n            <S.FieldTitle>{title} Agent</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                <AutoComplete\r\n                    suggestions={arrayData.Names}\r\n                    value={values.Name}\r\n                    onChange={(e) => setValues(state => {\r\n                        e.persist();\r\n                        return {\r\n                            ...state,\r\n                            Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                        }\r\n                    })}\r\n                    getValues={getValues}\r\n                    name={`agent.${represents}.name`}\r\n                    label=\"Name\"\r\n                    errors={errors?.agent?.[represents]?.name}\r\n                    required={true}\r\n                    register={register}\r\n                    onSelect={handleOnSelect}\r\n                    status={ready}\r\n                />\r\n                <S.AddressWrapper>\r\n                    <AutoComplete\r\n                        suggestions={arrayData.MLSNumbers}\r\n                        value={values.MLSNumber}\r\n                        onChange={(e) => setValues(state => {\r\n                            e.persist();\r\n                            return {\r\n                                ...state,\r\n                                MLSNumber: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                            }\r\n                        })}\r\n                        getValues={getValues}\r\n                        name={`agent.${represents}.MLSNumber`}\r\n                        label=\"MLS Number\"\r\n                        errors={errors?.agent?.[represents]?.MLSNumber}\r\n                        required={true}\r\n                        register={register}\r\n                        onSelect={handleOnSelect}\r\n                        status={ready}\r\n                    />\r\n                </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n            <S.MultiContainer>\r\n                <AutoComplete\r\n                    value={values.Email}\r\n                    suggestions={arrayData.Emails}\r\n                    onChange={(e) => setValues(state => {\r\n                        e.persist();\r\n                        return {\r\n                            ...state,\r\n                            Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                        }\r\n                    })}\r\n                    getValues={getValues}\r\n                    name={`agent.${represents}.email`}\r\n                    label=\"Email Address\"\r\n                    errors={errors?.agent?.[represents]?.email}\r\n                    register={register}\r\n                    required={true}\r\n                    onSelect={handleOnSelect}\r\n                    status={ready}\r\n                />\r\n                <S.AddressWrapper>\r\n                    <AutoComplete\r\n                        value={values.EmailVerification}\r\n                        onChange={(e) => setValues(state => {\r\n                            e.persist();\r\n                            return {\r\n                                ...state,\r\n                                EmailVerification: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                            }\r\n                        })}\r\n                        getValues={getValues}\r\n                        name={`agent.${represents}.emailVerification`}\r\n                        label=\"Email Address Verification\"\r\n                        errors={errors?.agent?.[represents]?.emailVerification}\r\n                        register={register}\r\n                        required={true}\r\n                        onSelect={handleOnSelect}\r\n                        status={ready}\r\n                    />\r\n                </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n            {loadFieldsBasedOnAgent()}\r\n        </S.FieldWrapper>\r\n    )\r\n}\r\n\r\nexport default Agents\r\n","import React from 'react'\r\nimport Broker from \"./Broker\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { AgentAndBrokerValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport Agents from '../FormFields/Agents';\r\n\r\nconst Agent = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(AgentAndBrokerValidation);\r\n    const { represents } = useParams();\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(`/Attorney/${AGENT_TYPES.BUYERS}`));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader={`${represents}'s Broker and Agent`} />\r\n                <Broker\r\n                    title={`${represents}'s`}\r\n                    getValues={getValues}\r\n                    errors={errors}\r\n                    register={register}\r\n                    represents={represents}\r\n                />\r\n                <Agents\r\n                    title={`${represents}'s`}\r\n                    represents={represents}\r\n                    agentType={agentType}\r\n                    register={register}\r\n                    errors={errors}\r\n                    getValues={getValues}\r\n                />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Agent\r\n","import React from \"react\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"../state/updateState\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Result = props => {\r\n  const { state } = useStateMachine(updateAction);\r\n  const { goBack } = useHistory();\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Result</h2>\r\n      <pre>{JSON.stringify(state, null, 2)}</pre>\r\n      <button onClick={() => goBack()}>Back</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport { ListingBrokerValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, MORTGAGE_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport Broker from \"./Broker\";\r\nimport Agents from \"../FormFields/Agents\";\r\n\r\nconst ListingBroker = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType, state } = useCustomFormHook(ListingBrokerValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Attorney/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                if (state.details.mortgage.typeOfMortgage === MORTGAGE_TYPES.CASH) {\r\n                    push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n                } else {\r\n                    push(handleDeploymentPath(\"/Lenders\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader=\"Listing Broker and Agent Information\" />\r\n                <Broker\r\n                    title={\"Listing\"}\r\n                    represents={AGENT_TYPES.SELLERS}\r\n                    getValues={getValues}\r\n                    register={register}\r\n                    errors={errors}\r\n                />\r\n                <Agents\r\n                    errors={errors}\r\n                    register={register}\r\n                    getValues={getValues}\r\n                    represents={AGENT_TYPES.SELLERS}\r\n                    title={`Listing`}\r\n                    agentType={agentType}\r\n                />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ListingBroker\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { LendersValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useLoadGoogleSheetInfo from \"../../hooks/useLoadGoogleSheetInfo\";\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\n\r\nconst Lenders = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(LendersValidation);\r\n\r\n    const handleSheetData = (agentSheet, componentIsMounted) => {\r\n        if(componentIsMounted){\r\n        const names = [];\r\n        const organizations = [];\r\n        const emails = [];\r\n\r\n        let index = 1;\r\n        while(agentSheet.getCell(index, 0).value !== null) {\r\n            names.push(agentSheet.getCell(index, 0).value);\r\n            emails.push(agentSheet.getCell(index, 1).value);\r\n            organizations.push(agentSheet.getCell(index, 2).value);\r\n            index++;\r\n        }\r\n\r\n        const emailVerifications = emails;\r\n\r\n        setArrayData({\r\n            Emails: emails,\r\n            EmailVerifications: emailVerifications,\r\n            Names: names,\r\n            Organizations: organizations,\r\n        });\r\n        }\r\n    }\r\n    \r\n    const spreadSheetKey = \"1aRrvpEn8Qe-VugV9Qbg9U9eIYPQdku_cWM2eOMkCOj4\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:C',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            Organization: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                Organization: arrayData.Organizations[index] ? arrayData.Organizations[index] : \"\",\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        console.log(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader={`Lender Information`} />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Lender Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.Names}\r\n                            value={values.Name}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name=\"lender.Name\"\r\n                            label=\"Full Name\"\r\n                            errors={errors.lender?.Name}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <InputField\r\n                            value={values.Organization}\r\n                            onChange={(e) => {\r\n                                e.persist();\r\n                                setValues(state => {\r\n                                return {\r\n                                    ...state,\r\n                                    Organization: e?.target?.value\r\n                                }\r\n                            })}}\r\n                            getValues={getValues}\r\n                            name=\"lender.Organization\"\r\n                            label=\"Organization Name\"\r\n                            errors={errors.lender?.Organization}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            suggestions={arrayData.Emails}\r\n                            value={values.Email}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name=\"lender.email\"\r\n                            label=\"Email\"\r\n                            errors={errors.lender?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <InputField\r\n                            value={values.EmailVerification}\r\n                            onChange={(e) => {\r\n                                e.persist();\r\n                                setValues(state => {\r\n                                return {\r\n                                    ...state,\r\n                                    EmailVerification: e?.target?.value\r\n                                }\r\n                            })}}\r\n                            getValues={getValues}\r\n                            name=\"lender.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors.lender?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.phoneNumber\"\r\n                            label=\"Phone Number\"\r\n                            errors={errors.lender?.phoneNumber}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Lenders\r\n","import React from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { TestAttorneyValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useLoadGoogleSheetInfo from '../../hooks/useLoadGoogleSheetInfo';\r\nimport AutoComplete from \"../FormFields/AutoComplete\";\r\n\r\n// TODO: If introduction give list of attorneys. ( client choose and send email to this attorney)\r\n// I think a drop down list would be the best choice\r\n\r\nconst Attorney = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType, state } = useCustomFormHook(TestAttorneyValidation);\r\n    const { represents, param1 } = useParams();\r\n    const [hasAttorney, sethasAttorney] = React.useState(\r\n        state?.details?.attorney?.[represents]?.hasAttorney === `true` ?\r\n            true : false);\r\n    const [wantsRecommendation, setWantsRecommendation] = React.useState(\r\n        state?.details?.attorney?.[represents]?.wantsRecommendationAndIntroduction === `true` ?\r\n            true : false);\r\n\r\n    const handleSheetData = (agentSheet, componentIsMounted) => {\r\n        if (componentIsMounted) {\r\n            const emails = [];\r\n            const names = [];\r\n            const addresses = [];\r\n            const firmNames = [];\r\n            const phoneNumbers = [];\r\n\r\n            let index = 1;\r\n            while (agentSheet.getCell(index, 0).value !== null) {\r\n                names.push(agentSheet.getCell(index, 0).value);\r\n                emails.push(agentSheet.getCell(index, 1).value);\r\n                phoneNumbers.push(agentSheet.getCell(index, 2).value);\r\n                addresses.push(agentSheet.getCell(index, 3).value);\r\n                firmNames.push(agentSheet.getCell(index, 4).value);\r\n                index++;\r\n            }\r\n\r\n            const emailVerification = emails;\r\n\r\n            setArrayData({\r\n                Emails: emails,\r\n                EmailVerifications: emailVerification,\r\n                Names: names,\r\n                PhoneNumbers: phoneNumbers,\r\n                FirmNames: firmNames,\r\n                Addresses: addresses,\r\n            });\r\n        }\r\n    }\r\n\r\n    const spreadSheetKey = \"1ffex1Am_wSX_Rebav49Sf2plvujBbPBRkA1wPagvXL8\";\r\n    const {\r\n        ready,\r\n        values,\r\n        setValues,\r\n        arrayData,\r\n        setArrayData\r\n    } = useLoadGoogleSheetInfo(\r\n        spreadSheetKey,\r\n        0,\r\n        'A:E',\r\n        handleSheetData,\r\n        {\r\n            Email: \"\",\r\n            EmailVerification: \"\",\r\n            Name: \"\",\r\n            PhoneNumber: \"\",\r\n            FirmName: \"\",\r\n            Address: \"\",\r\n        }\r\n    );\r\n\r\n    const handleOnSelect = (e, index) => {\r\n        setValues(data => {\r\n            return {\r\n                Email: arrayData.Emails[index] ? arrayData.Emails[index] : \"\",\r\n                EmailVerification: arrayData.EmailVerifications[index] ? arrayData.EmailVerifications[index] : \"\",\r\n                Name: arrayData.Names[index] ? arrayData.Names[index] : \"\",\r\n                PhoneNumber: arrayData.PhoneNumbers[index] ? arrayData.PhoneNumbers[index] : \"\",\r\n                FirmName: arrayData.FirmNames[index] ? arrayData.FirmNames[index] : \"\",\r\n                Address: arrayData.Addresses[index] ? arrayData.Addresses[index] : \"\",\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n            if (represents === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(`/Client/${AGENT_TYPES.BUYERS}`));\r\n\r\n            } else if (represents === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            if (param1 === \"FSBO\") {\r\n                push(handleDeploymentPath(\"/ListingBroker\"))\r\n            } else {\r\n                push(handleDeploymentPath(\"/FSBO\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    const askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot = () => {\r\n        if ((agentType === AGENT_TYPES.SELLERS && represents === AGENT_TYPES.SELLERS) ||\r\n            (agentType === AGENT_TYPES.BUYERS && represents === AGENT_TYPES.BUYERS) ||\r\n            (param1 === 'FSBO')) {\r\n            return (\r\n                <React.Fragment>\r\n                    <S.FieldWrapper>\r\n                        <Slider\r\n                            title=\"Do you have an Attorney?\"\r\n                            isChecked={hasAttorney}\r\n                            setIsChecked={sethasAttorney}\r\n                            name={`attorney.${represents}.hasAttorney`}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    {hasAttorney ? null :\r\n                        <S.FieldWrapper>\r\n                            <Slider\r\n                                title=\"Would you like a recommendation and introduction?\"\r\n                                isChecked={wantsRecommendation}\r\n                                setIsChecked={setWantsRecommendation}\r\n                                name={`attorney.${represents}.wantsRecommendationAndIntroduction`}\r\n                                register={register}\r\n                                required={false} />\r\n                        </S.FieldWrapper>\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    const attorneyInformation = () => {\r\n        if (hasAttorney) {\r\n            return (\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>{represents}'s Attorney Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            value={values.Name}\r\n                            suggestions={arrayData.Names}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Name: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`attorney.${represents}.name`}\r\n                            label=\"Full Name\"\r\n                            errors={errors?.attorney?.[represents]?.name}\r\n                            required={true}\r\n                            register={register}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <S.AddressWrapper>\r\n                            <AutoComplete\r\n                                value={values.FirmName}\r\n                                onChange={(e) => {\r\n                                    e.persist();\r\n                                    setValues(state => {\r\n                                        return {\r\n                                            ...state,\r\n                                            FirmName: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                        }\r\n                                    })\r\n                                }}\r\n                                getValues={getValues}\r\n                                name={`attorney.${represents}.firmName`}\r\n                                label=\"Attorney Firm Name\"\r\n                                errors={errors?.attorney?.[represents]?.firmName}\r\n                                required={false}\r\n                                register={register}\r\n                            />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <AutoComplete\r\n                            value={values.Email}\r\n                            suggestions={arrayData.Emails}\r\n                            onChange={(e) => setValues(state => {\r\n                                e.persist();\r\n                                return {\r\n                                    ...state,\r\n                                    Email: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                }\r\n                            })}\r\n                            getValues={getValues}\r\n                            name={`attorney.${represents}.email`}\r\n                            label=\"Email\"\r\n                            errors={errors?.attorney?.[represents]?.email}\r\n                            required={true}\r\n                            register={register}\r\n                            onSelect={handleOnSelect}\r\n                            status={ready}\r\n                        />\r\n                        <S.AddressWrapper>\r\n                            <AutoComplete\r\n                                value={values.EmailVerification}\r\n                                onChange={(e) => {\r\n                                    e.persist();\r\n                                    setValues(state => {\r\n                                        return {\r\n                                            ...state,\r\n                                            EmailVerification: e.currentTarget?.value ? e.currentTarget?.value : \"\",\r\n                                        }\r\n                                    })\r\n                                }}\r\n                                getValues={getValues}\r\n                                name={`attorney.${represents}.emailVerification`}\r\n                                label=\"Email Verification\"\r\n                                errors={errors?.attorney?.[represents]?.emailVerification}\r\n                                required={true}\r\n                                register={register}\r\n                            />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`attorney.${represents}.phoneNumber`}\r\n                            label=\"Phone number\"\r\n                            errors={errors?.attorney?.[represents]?.phoneNumber}\r\n                            required={false}\r\n                            register={register}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n            )\r\n        }\r\n    }\r\n\r\n    let pageHeader = param1 === \"FSBO\" ? `F.S.B.O ${represents}'s Attorney` : `${represents}'s Attorney`;\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)} >\r\n                <FormHeader pageHeader={pageHeader} />\r\n                {askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot()}\r\n                {attorneyInformation()}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Attorney\r\n","import React from 'react';\r\nimport InputField from \"./InputField\";\r\nimport * as S from \"./FormStyled\"\r\nimport { ordinal_suffix_of } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst MAX_BUYERS = 5;\r\nconst GeneralClientInformation = ({ errors, register, getValues, title, state }) => {\r\n    const [count, setCount] = React.useState(state?.details?.client?.[title]?.length ? state?.details?.client?.[title]?.length : 1);\r\n\r\n    const increaseCount = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (count < MAX_BUYERS) {\r\n            setCount(count => count + 1);\r\n        }\r\n    }\r\n\r\n    const decreaseCount = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setCount(count => count - 1);\r\n    }\r\n\r\n    const fieldCount = () => {\r\n        let fields = [];\r\n        for (let i = 0; i < count; i++) {\r\n            if (i === MAX_BUYERS) break;\r\n\r\n            let error =\r\n                errors?.client?.[title]?.[i]?.firstName ||\r\n                errors?.client?.[title]?.[i]?.lastName ||\r\n                errors?.client?.[title]?.[i]?.email ||\r\n                errors?.client?.[title]?.[i]?.emailVerification ||\r\n                errors?.client?.[title]?.[i]?.phoneNumber ||\r\n                errors?.client?.[title]?.[i]?.fullAddress;\r\n\r\n            fields.push(\r\n                <S.FieldWrapper key={i} error={error}>\r\n                    <S.FieldTitle>{ordinal_suffix_of(i + 1)} {title}</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.firstName`}\r\n                            label=\"First Name\"\r\n                            errors={errors?.client?.[title]?.[i]?.firstName}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <InputField\r\n                            name={`client.${title}.${i}.lastName`}\r\n                            label=\"Last Name\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.lastName}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.email`}\r\n                            label=\"Email Address\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <InputField\r\n                            name={`client.${title}.${i}.emailVerification`}\r\n                            label=\"Email Address Verification\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.phoneNumber`}\r\n                            label=\"Phone Number\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.phoneNumber}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <S.AddressWrapper>\r\n                            <Address\r\n                                name={`client.${title}.${i}.address`}\r\n                                label=\"Full Address\"\r\n                                errors={errors[`client`]?.[title]?.[i]?.address}\r\n                                register={register}\r\n                                required={true}\r\n                                getValues={getValues}\r\n                            />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n            )\r\n        }\r\n        return fields;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {fieldCount().map(value => value)}\r\n            { count === MAX_BUYERS ? <S.Button>Max Buyer Count Reached</S.Button> : <S.Button onClick={increaseCount}>Add {title}</S.Button>}\r\n            { count > 0 || MAX_BUYERS === count ? <S.Button style={{ float: \"right\" }} onClick={decreaseCount}>Remove {title}</S.Button> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GeneralClientInformation","import React from 'react';\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport { FSBOValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport GeneralClientInformation from \"../FormFields/GeneralClientInformation\";\r\n\r\nconst ForSaleByOwner = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType, state } = useCustomFormHook(FSBOValidation);\r\n    const [isFSBO, setIsFSBO] = React.useState(\r\n        state?.details?.FSBO?.isForSaleByOwner === `true` ? true : false\r\n    );\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            if (isFSBO) {\r\n                push(handleDeploymentPath(\"/Attorney/Seller/FSBO\"))\r\n            } else {\r\n                push(handleDeploymentPath(\"/ListingBroker\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader=\"For Sale By Owner\" />\r\n                <S.FieldWrapper>\r\n                    <Slider\r\n                        title=\"For Sale Buy Owner\"\r\n                        isChecked={isFSBO}\r\n                        setIsChecked={setIsFSBO}\r\n                        register={register}\r\n                        name=\"FSBO.isForSaleByOwner\"\r\n                        required={false} />\r\n                </S.FieldWrapper>\r\n                {isFSBO ?\r\n                    <React.Fragment>\r\n                        <GeneralClientInformation\r\n                            title={AGENT_TYPES.SELLERS}\r\n                            getValues={getValues}\r\n                            errors={errors}\r\n                            register={register}\r\n                            state={state} />\r\n                        <br />\r\n                    </React.Fragment>\r\n                    : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ForSaleByOwner\r\n","import React from 'react'\r\nimport { MortgageValidation } from \"../../validation\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport { MORTGAGE_TYPES } from \"../../shared\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Mortgage = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(MortgageValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Client/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Client/Buyer\"))\r\n            }\r\n        }\r\n    }\r\n\r\n    const [currMortgageType, setCurrMortgageType] = React.useState(\"\");\r\n    //TODO: State doesn't persist on return\r\n    const [isConcessions, setIsConcessions] = React.useState(false);\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader=\"Mortgage Information\" />\r\n                <S.FieldWrapper error={errors['mortgage']?.typeOfMortgage}>\r\n                    <S.FieldTitle>What Type of Mortgage</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Mortgage Types\"\r\n                        name=\"mortgage.typeOfMortgage\"\r\n                        label=\"Select a Mortgage Type\"\r\n                        errors={errors['mortgage']?.typeOfMortgage}\r\n                        options={Object.values(MORTGAGE_TYPES)}\r\n                        register={register}\r\n                        isValue={currMortgageType}\r\n                        setValue={setCurrMortgageType}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.purchasePrice}>\r\n                    <S.FieldTitle>Purchase Price</S.FieldTitle>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"mortgage.purchasePrice\"\r\n                            label=\"Purchase price?\"\r\n                            errors={errors['mortgage']?.purchasePrice}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors['mortgage']?.firstDeposit}>\r\n                    <S.FieldTitle>Deposit Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"mortgage.firstDeposit\"\r\n                            label=\"First Deposit Amount?\"\r\n                            errors={errors['mortgage']?.firstDeposit}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"mortgage.secondDeposit\"\r\n                            label=\"Second Deposit Amount?\"\r\n                            errors={errors['mortgage']?.secondDeposit}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors['mortgage']?.areConcessions || errors['mortgage']?.concessions}>\r\n                    <Slider\r\n                        title=\"Are there concessions?\"\r\n                        isChecked={isConcessions}\r\n                        setIsChecked={setIsConcessions}\r\n                        name=\"mortgage.areConcessions\"\r\n                        required={false}\r\n                        register={register}\r\n                    />\r\n                    {isConcessions ?\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"mortgage.concessions\"\r\n                                label=\"What are the concessions?\"\r\n                                errors={errors['mortgage']?.concessions}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                        : null}\r\n                </S.FieldWrapper>\r\n                {getValues(`mortgage.typeOfMortgage`) !== MORTGAGE_TYPES.CASH ?\r\n                    <S.FieldWrapper error={errors['mortgage']?.mortgageCommitmentDeadline}>\r\n                        <S.FieldTitle>Mortgage Commitment Deadline</S.FieldTitle>\r\n                        <CustomDatePicker\r\n                            control={control}\r\n                            getValues={getValues}\r\n                            name=\"mortgage.mortgageCommitmentDeadline\"\r\n                            label=\"Select Mortgage Commitment Date\"\r\n                            required={true}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors['mortgage']?.houseClosingDate}>\r\n                    <S.FieldTitle>Closing Date</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        control={control}\r\n                        getValues={getValues}\r\n                        name=\"mortgage.houseClosingDate\"\r\n                        label=\"Select Closing Date\"\r\n                        required={true}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Mortgage\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { Next } from \"../FormFields/SharedButtons\";\r\nimport { AgentTypeValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst AgentType = () => {\r\n    const { register, handleSubmit, errors, action, push } = useCustomFormHook(AgentTypeValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Property\"));\r\n        }\r\n    }\r\n\r\n    const handleTestingButton = () => {\r\n        push(handleDeploymentPath(\"/Testing\"));\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader=\"Agent Type\" />\r\n                <S.FieldWrapper error={errors.agentType}>\r\n                    <S.FieldTitle>Please Select who you will be representing.</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"agentType\"\r\n                        array={Object.values(AGENT_TYPES)}\r\n                    />\r\n                </S.FieldWrapper>\r\n                {/* <button onClick={handleTestingButton}>Testing</button> */}\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AgentType\r\n","import React, { useState } from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport Slider from \"../FormFields/Slider\";\r\n// import { yupResolver } from '@hookform/resolvers';\r\n// import { AdditionalInformationValidation } from \"../../validation\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\n// TODO: State for withTracyGagne and hasReferral do not persist\r\nconst AdditionalInformation = () => {\r\n    const { handleSubmit, action, push, register, getValues, watch } = useCustomFormHook();\r\n    const [withTracyGagne, setWithTracyGagne] = useState(false)\r\n    const [hasReferral, setHasReferral] = useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        }\r\n    }\r\n\r\n    const renderHasReferral = () => {\r\n        if (hasReferral) {\r\n            return (\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Referral Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name=\"referral.Agent\"\r\n                            label=\"Agent that Referred Client\"\r\n                            getValues={getValues}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            name=\"referral.broker\"\r\n                            label=\"Agent that Referred Client\"\r\n                            getValues={getValues}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name=\"referral.email\"\r\n                            label=\"Referring Agent Email Address\"\r\n                            getValues={getValues}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            name=\"referral.emailVerification\"\r\n                            label=\"Email Address Verification\"\r\n                            getValues={getValues}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <div>\r\n                        <InputField\r\n                            name=\"referral.amount\"\r\n                            label=\"Amount\"\r\n                            getValues={getValues}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader=\"Additional Information\" />\r\n                <S.FieldWrapper>\r\n                    <Slider\r\n                        title=\"Are you with the Heart of the Home Team?\"\r\n                        isChecked={withTracyGagne}\r\n                        setIsChecked={setWithTracyGagne}\r\n                    />\r\n                </S.FieldWrapper>\r\n                {withTracyGagne ? <S.FieldWrapper>\r\n                    <S.FieldTitle>Team lead or Sphere Not split with eXp only with the Heart of the Home Team.</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        array={[\"75/25\", \"100\"]}\r\n                        name=\"additionalInformation.finalPaymentSplit\"\r\n                        other={true}\r\n                        getValues={getValues}\r\n                        watch={watch}\r\n                    />\r\n                </S.FieldWrapper> : null}\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>\r\n                        <Slider\r\n                            title=\"Is there a referral to be paid for the transaction?\"\r\n                            isChecked={hasReferral}\r\n                            setIsChecked={setHasReferral}\r\n                        />\r\n                    </S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {renderHasReferral()}\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Is there any additional information I should know?</S.FieldTitle>\r\n                    <div>\r\n                        <InputField\r\n                            register={register}\r\n                            getValues={getValues}\r\n                            name=\"additionalInformation.additionalNotes\"\r\n                            label=\"Notes\"\r\n                            required={false}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AdditionalInformation","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from '../../hooks/useCustomFormHook';\r\nimport { ClientValidation } from \"../../validation\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport AutoComplete from '../FormFields/AutoComplete';\r\nimport Address from '../FormFields/Address';\r\nimport InputField from \"../FormFields/InputField\"\r\n\r\nconst Testing = () => {\r\n    const { handleSubmit, action, push, getValues, errors, register } = useCustomFormHook(ClientValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        push(handleDeploymentPath(\"/result\"));\r\n    }\r\n\r\n    const [controlData, setControlData] = React.useState(\"\")\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Google Sheet AutoComplete Test</S.FieldTitle>\r\n                    <div>\r\n                        <AutoComplete\r\n                            label=\"control group\"\r\n                            suggestions={[\"george\", \"kate\", \"luna\", \"finnick\"]}\r\n                            useDefaultFilter={true}\r\n                            value={controlData}\r\n                            onChange={(e) => setControlData(e.currentTarget.value)}\r\n                        />\r\n                    </div>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                        getValues={getValues}\r\n                        name=\"property.mlsNumber\"\r\n                        label=\"MLS Number\" \r\n                        errors={errors[\"property\"]?.mlsNumber}\r\n                        register={register} \r\n                        required={true} />\r\n                        <S.AddressWrapper>\r\n                        <Address\r\n                        getValues={getValues}\r\n                        name=\"property.address\"\r\n                        label=\"Address\" \r\n                        errors={errors[\"property\"]?.address}\r\n                        register={register} \r\n                        required={true} />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <br />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Testing\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport GeneralClientInformation from \"../FormFields/GeneralClientInformation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { ClientValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Client = () => {\r\n    const { register, handleSubmit, errors, action, state, push, getValues, agentType } = useCustomFormHook(ClientValidation);\r\n    const { clientType } = useParams();\r\n    \r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n            if (clientType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/ListingBroker\"));\r\n            } else if (clientType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n            }\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader pageHeader={`${clientType}'s Information`}/>\r\n                <GeneralClientInformation title={clientType} getValues={getValues} errors={errors} register={register} action={action} state={state} />\r\n                <br />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Client\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Property from \"../Forms/Property\";\r\nimport Agent from \"../Forms/Agent\";\r\nimport Result from \"../Result\";\r\nimport ListingBroker from \"../Forms/ListingBroker\";\r\nimport Lenders from \"../Forms/Lenders\";\r\nimport Attorney from '../Forms/Attorney';\r\nimport ForSaleByOwner from '../Forms/ForSaleByOwner';\r\nimport Mortgage from \"../Forms/Mortgage\";\r\nimport AgentType from \"../Forms/AgentType\";\r\nimport AdditionalInformation from \"../Forms/AdditionalInformation\";\r\nimport Testing from \"../Forms/Testing\";\r\nimport Client from \"../Forms/Client\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst index = () => {\r\n    return (\r\n        <Router>\r\n            <Route exact path={handleDeploymentPath(\"/\")} component={AgentType} />\r\n            <Route path={handleDeploymentPath(\"/Client/:clientType\")} component={Client} />\r\n            <Route path={handleDeploymentPath(\"/Property\")} component={Property} />\r\n            <Route path={handleDeploymentPath(\"/Agent/:represents\")} component={Agent} />\r\n            <Route path={handleDeploymentPath(\"/Attorney/:represents/:param1?\")} component={Attorney} />\r\n            <Route path={handleDeploymentPath(\"/FSBO\")} component={ForSaleByOwner} />\r\n            <Route path={handleDeploymentPath(\"/ListingBroker\")} component={ListingBroker} />\r\n            <Route path={handleDeploymentPath(\"/Lenders\")} component={Lenders} />\r\n            <Route path={handleDeploymentPath(\"/Mortgage\")} component={Mortgage} />\r\n            <Route path={handleDeploymentPath(\"/AdditionalInformation\")} component={AdditionalInformation} />\r\n            <Route path={handleDeploymentPath(\"/result\")} component={Result} />\r\n            <Route path={handleDeploymentPath(\"/Testing\")} component={Testing} />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default index\r\n","import React from 'react';\r\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\r\nimport { DevTool } from \"little-state-machine-devtools\";\r\nimport Route from \"./components/Routes\";\r\n\r\ncreateStore({\r\n  details: {}\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <StateMachineProvider>\r\n      <DevTool />\r\n      <Route />\r\n    </StateMachineProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}