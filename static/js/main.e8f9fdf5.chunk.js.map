{"version":3,"sources":["components/FormFields/FormStyled.js","components/FormFields/InputFieldStyled.js","hooks/useCheckFieldValue.js","components/FormFields/InputField.js","components/FormFields/FormHeaderStyled.js","components/FormFields/FormHeader.js","components/FormFields/DropDownListStyled.js","components/FormFields/DropDownList.js","components/FormFields/SliderStyled.js","components/FormFields/Slider.js","shared.js","components/FormFields/AutoCompleteStyled.js","components/FormFields/AutoComplete.js","components/FormFields/Address.js","components/FormFields/PropertyInfo.js","components/FormFields/DatePicker.js","components/FormFields/RadioSelectorStyled.js","components/FormFields/RadioSelector.js","validation/index.js","components/FormFields/SharedButtons.js","state/updateState.js","hooks/useCustomFormHook.js","components/Forms/Property.js","components/Forms/Agent.js","components/Result.js","components/Forms/Broker.js","components/Forms/ListingBroker.js","components/Forms/Lenders.js","components/Forms/Attorney.js","components/Forms/ForSaleByOwner.js","components/Forms/Mortgage.js","components/Forms/AgentType.js","components/Forms/AdditionalInformation.js","components/Forms/Testing.js","components/FormFields/GeneralClientInformation.js","components/Forms/Client.js","components/Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","FieldTitle","FieldWrapper","props","error","Button","Input","input","MultiContainer","AddressWrapper","InputField","isEmpty","useCheckFieldValue","name","getValues","React","useState","setIsEmpty","useEffect","isFieldEmpty","value","undefined","memo","label","className","style","required","register","errors","onKeyDown","classVal","ref","onKeyPress","e","handleonkeypress","onBlur","target","handleonblur","onChange","message","Title","p","FormHeader","Select","select","DropDownList","placeholder","options","setValue","isValue","rest","defaultValue","event","preventDefault","disabled","hidden","map","key","Label","Span","span","checked","Slider","isChecked","setIsChecked","type","onClick","handleDeploymentPath","params","process","concat","MORTGAGE_TYPES","CONVENTIONAL","FHA","VA","CASH","AGENT_TYPES","SELLERS","BUYERS","BOTH","PROPERTY_TYPES","SINGLE_FAMILY","MULTI_FAMILY","CONDO","ordinal_suffix_of","i","j","k","AutoCompleteWrapper","AutoComplete","suggestions","howToFilter","filterValues","status","onSelect","useOnclickOutside","handleOnBlur","activeSuggestion","filteredSuggestions","showSuggestions","userInput","suggestionState","setSuggestionState","state","handleSelect","stopPropagation","currentTarget","innerText","filter","suggestion","toLowerCase","indexOf","keyCode","length","onFocus","index","suggestionsListComponent","Address","disable","usePlacesAutocomplete","ready","data","clearSuggestions","getDescriptions","description","PropertyInfo","agentType","propertyInformation","mlsNumber","deedReference","address","mapReferences","handleConditionalFields","CustomDatePicker","control","showYearPicker","dateFormat","render","placeholderText","startDate","selected","Date","closeOnScroll","optionWrapper","InputRadio","OtherWrapper","RadioSelector","array","other","defaultVal","watch","watchVal","textFieldHasValue","includes","text","otherVal","setOtherVal","Fragment","defaultChecked","marginTop","float","persist","mapRules","rule","Object","keys","reduce","newMap","PHONE_REG_EXP","REQUIRED","VALID_EMAIL","AgentTypeValidation","yup","shape","BuyerFormOneValidation","property","test","val","propertyType","oneOf","values","condoManagementCompany","when","is","then","dateHouseBuilt","titleOrTownSewer","publicOrTownWater","inspectionDeadline","buyerhasSubmittedAdditionalOffer","notRequired","loxBoxCode","typeError","vacentOrOccupied","TestAttorneyValidation","obj","firstName","lastName","emailAddress","email","emailAddressVerification","firmName","phoneNumber","matches","FSBOValidation","forSaleByOwner","sellerFirstName","sellerLastName","sellerEmail","sellerEmailVerification","attorneyfirstName","attorneylastName","attorneyEmail","attorneyEmailVerification","attorneyPhoneNumber","ListingBrokerValidation","listingBroker","company","listingAgent","emailVerification","mlsID","LendersValidation","lender","companyName","ClientValidation","obj2","Array","isArray","of","fullAddress","AgentAndBrokerValidation","broker","agent","MLSNumber","compensationPerMLS","Back","history","useHistory","goBack","Next","updateAction","payload","details","useCustomFormHook","validationRules","useStateMachine","action","push","useForm","defaultValues","mode","reValidateMode","resolver","handleSubmit","Property","currPropertyType","setCurrentPropertyType","additionalOffer","setAdditionalOffer","inspectionWaved","setInspectionWaved","onSubmit","buyerHasSubmittedAdditionalOffer","Agent","represents","useParams","isEXP","setIsExp","loadAgentPhoneNumber","loadFieldsBasedOnAgent","Result","JSON","stringify","Broker","handleIsExp","listing","ListingBroker","phoneNumberField","mortgage","typeOfMortgage","Lenders","Attorney","hasAttorney","sethasAttorney","wantsRecommendation","setWantsRecommendation","attorney","askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot","attorneyInformation","ForSaleByOwner","isFSBO","setIsFSBO","Mortgage","currMortgageType","setCurrMortgageType","isConcessions","setIsConcessions","purchasePrice","firstDeposit","secondDeposit","areConcessions","concessions","mortgageCommitmentDeadline","houseClosingDate","AgentType","AdditionalInformation","withTracyGagne","setWithTracyGagne","Testing","testing","findValue","GeneralClientInformation","title","count","setCount","newCount","parseInt","display","fields","fieldCount","Client","clientType","console","log","exact","path","component","createStore","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.e8f9fdf5.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #e7ecee;\r\n    padding-top: .5rem;\r\n    min-height: 99vh;\r\n    height: 100%;\r\n\r\n    form {\r\n        width: 40rem;\r\n        margin: 0 auto;\r\n        background: transparent;\r\n\r\n        @media only screen and (max-device-width : 640px) {\r\n            width: 95%;\r\n        }\r\n\r\n    }\r\n`;\r\n\r\nexport const FieldTitle = styled.div`\r\n    font-family: Helvetica, Arial, sans-serif; \r\n    position: relative;\r\n    margin-bottom: .5rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    position: relative;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    padding: 1.5rem;\r\n    border-radius: .75rem;\r\n    border: ${props => props.error ? \"1px solid #d93025\" : \"1px solid #d3d3d3\" };\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const Button = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n    margin-right: .5rem;\r\n`;\r\n\r\nexport const MultiContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    \r\n    @media only screen and (max-device-width : 425px) {\r\n        flex-direction: column;\r\n    }\r\n    \r\n`;\r\n\r\n// Should only be used when inside MultiContainer\r\nexport const AddressWrapper = styled.div`\r\n    padding-left: 1rem;\r\n`;","import styled from \"styled-components\";\r\n\r\nconst highlightColor = \"#16abf0\";\r\nconst paddingHorizontal = \"8px\";\r\n\r\nexport const InputField = styled.div`\r\n    position: relative;\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    /* This is so there can be multiple fields side by side \r\n        Start-block\r\n    */\r\n    padding-left: 1rem;\r\n\r\n    @media only screen and (max-device-width : 425px) {\r\n        padding-left: 0;\r\n    }\r\n\r\n    :last-child label {\r\n        padding-left: 1rem;\r\n        \r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n\r\n    :first-child {\r\n        padding-left: 0;\r\n        label {\r\n            padding-left: 0;\r\n        \r\n        }\r\n\r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n    /* end-block */\r\n\r\n    input {\r\n        font-family: Helvetica, Arial, sans-serif;\r\n        font-size: 12pt;\r\n        width: 15.4375rem;\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 2.6em;\r\n        line-height: 2.6em;\r\n        margin-top: .5em;\r\n        border: none;\r\n        outline: none;\r\n        position: relative;\r\n        top: 0;\r\n        left: 0;\r\n        display: block;\r\n        background: transparent;\r\n        z-index: 2;\r\n        border-bottom: 1px solid #ccc;\r\n        text-indent: ${paddingHorizontal};\r\n    }\r\n\r\n    input:focus+label {\r\n        color: ${highlightColor}\r\n    }\r\n\r\n    label {\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        left: ${ props => props.isEmpty ? \"0px\" : paddingHorizontal};\r\n        font-size: 12pt;\r\n        z-index: 1;\r\n        transform-origin: 0, 0.0em;\r\n        transition: transform 500ms, color 300ms;\r\n        transform: ${props => props.isEmpty ? 'scale(0.85, 0.85) rotateY(0)' :  'scale(1,1) rotateY(0)'};\r\n        line-height: ${props => props.isEmpty ? '.25em' : '3em'};\r\n        color: #696969;\r\n    }\r\n\r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n\r\n    .react-datepicker-popper {\r\n        z-index: 4;\r\n    }\r\n\r\n    ::has(> input[type=\"hidden\"]) {\r\n        margin-bottom: 0 !important;\r\n        padding-bottom: 0 !important;\r\n    }\r\n\r\n    /* input[type=\"hidden\"]:(> div.active) {\r\n        margin-bottom: 0 !important;\r\n        padding-bottom: 0 !important;\r\n    } */\r\n\r\n`;\r\n\r\n","import React from \"react\";\r\n\r\nconst useCheckFieldValue = (name, getValues) => {\r\n    \r\n    const [isEmpty, setIsEmpty] = React.useState(false);\r\n    \r\n    const isFieldEmpty = (value) => {\r\n        if(value === \"\" || value === undefined || value === null){\r\n            setIsEmpty(false);\r\n        }else{\r\n            setIsEmpty(true);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if(getValues && getValues(`${name}`)) {\r\n            setIsEmpty(true);\r\n        }\r\n    }, [name, getValues]);\r\n\r\n    return {\r\n        isFieldEmpty,\r\n        setIsEmpty,\r\n        isEmpty\r\n    }\r\n}\r\n\r\nexport default useCheckFieldValue","import React from 'react'\r\nimport * as S from \"./InputFieldStyled\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\";\r\n\r\nconst InputField = React.memo(({ name, label, className, style, required, register, getValues, errors, value, onKeyDown, ...props }) => {\r\n    const classVal = required ? `${className} required-field` : className;\r\n    const { isEmpty, isFieldEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n    \r\n    const handleOnKeyPress = e => {\r\n        setIsEmpty(true)\r\n        if (props.handleonkeypress) {\r\n            props.handleonkeypress(e);\r\n        }\r\n    }\r\n\r\n    const handleOnBlur = e => {\r\n        isFieldEmpty(e.target.value);\r\n        if (props.handleonblur) {\r\n            props.handleonblur(e);\r\n        }\r\n    }\r\n\r\n    const handleOnChange = e => {\r\n        setIsEmpty(true);\r\n        if (props.onChange) {\r\n            props.onChange(e)\r\n        }\r\n    }\r\n\r\n    // See Docs for Details: https://reactjs.org/docs/forms.html#controlled-components\r\n    return (\r\n        <S.InputField style={style} isEmpty={isEmpty || value}>\r\n            <input\r\n                value={value}\r\n                name={name}\r\n                ref={register}\r\n                onKeyPress={handleOnKeyPress}\r\n                onBlur={handleOnBlur}\r\n                onChange={handleOnChange}\r\n                onKeyDown={onKeyDown}\r\n                {...props}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {errors ? <span>{errors?.message}</span> : null}\r\n        </S.InputField>\r\n    )\r\n})\r\n\r\nexport default InputField\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.div`\r\n    margin: 0 0 .125rem 0;\r\n    padding: 0px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 16pt;\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const message = styled.p`\r\n    margin: 0;\r\n    padding: 0;\r\n    /* text-align: left; */\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    padding: 1rem;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    border-radius: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n`;","import React from 'react';\r\nimport * as S from \"./FormHeaderStyled\";\r\n\r\nconst FormHeader = React.memo(() => {\r\n    return (\r\n        <S.FieldWrapper>\r\n            <S.Title>Massachusetts Real Estate Transaction Form </S.Title>\r\n            <S.message>Please ensure that all information is filled out correctly as this information will be utilized throughout the transaction process.</S.message>\r\n        </S.FieldWrapper>\r\n    )\r\n})\r\n\r\nexport default FormHeader\r\n","import styled from \"styled-components\";\r\n\r\nexport const Select = styled.select`\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    font-size: 12pt;\r\n    width: 12.4375rem;\r\n    border: none;\r\n    border-bottom: 1px solid #ccc;\r\n    margin: 1rem 0 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./DropDownListStyled\"\r\n\r\nconst DropDownList = React.memo(({ placeholder, options, register, setValue, isValue, errors, ...rest }) => {\r\n    \r\n    const handleChange = (event) => {\r\n        event.preventDefault();\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Select defaultValue={isValue} onChange={handleChange} ref={register} {...rest}>\r\n                <option value=\"\" disabled hidden>{placeholder}</option>\r\n                {options.map(value => (\r\n                    <option key={value} value={value}>\r\n                        {value}\r\n                    </option>\r\n                ))}\r\n            </S.Select>\r\n            {errors && \r\n            ( errors.message !== null || errors.message !== undefined \r\n            ? <span>{errors.message}</span>\r\n            : null\r\n            )}\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default DropDownList\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    position: relative;\r\n    display: inline-block;\r\n    margin-left: 1rem;\r\n    top: .25rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 2.625rem;\r\n    height: 1.25rem;\r\n    /* line-height: 1.5rem; */\r\n\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n    display: none;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: ${ props => props.checked ? \"#16abf0\" : \"#c9c9c9\"};\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n    border-radius: 30px;\r\n\r\n    ::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        border-radius: 50%;\r\n        height: .8125rem;\r\n        width: .8125rem;\r\n        left: 4px;\r\n        bottom: 4px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 50%;\r\n        -webkit-transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n        -ms-transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n        transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n    }\r\n\r\n    ::after {\r\n        /* content: \"\" + ; */\r\n        content: '${props => props.checked ? \"YES\" : \"NO\"}';\r\n        color: ${ props => props.checked ? \"#ccc\" : \"#16abf0\"};\r\n        display: block;\r\n        position: absolute;\r\n        transform: translate(-50%, -50%);\r\n        top: 50%;\r\n        left: ${props => props.checked ? \"30%\" : \"70%\"};\r\n        font-size: 10px;\r\n        font-family: Arial, Helvetica, sans-serif;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./SliderStyled\";\r\n\r\nconst Slider = React.memo(({ isChecked, setIsChecked, name, required, register }) => {\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Label>\r\n                <S.Input value={isChecked} type=\"checkbox\" name={name} ref={register} />\r\n                <S.Span checked={isChecked} onClick={() => setIsChecked(isChecked => !isChecked)} />\r\n            </S.Label>\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default Slider\r\n","export const deploy = process.env.REACT_APP_DEPLOY_TO_GITHUB_PAGES;\r\nexport const path = process.env.REACT_APP_BASE_PATH;\r\n\r\nexport const handleDeploymentPath = (params) => {\r\n    return deploy === \"true\" ? path.concat(params) : params;\r\n}\r\n\r\nexport const MORTGAGE_TYPES = {\r\n    CONVENTIONAL: \"Conventional\",\r\n    FHA: \"FHA\",\r\n    VA: \"VA\",\r\n    CASH: \"Cash\",\r\n}\r\nexport const AGENT_TYPES = {\r\n    SELLERS: \"Seller\",\r\n    BUYERS: \"Buyer\",\r\n    BOTH: \"Both\"\r\n}\r\n\r\nexport const PROPERTY_TYPES = {\r\n    SINGLE_FAMILY: \"Single Family\",\r\n    MULTI_FAMILY: \"Multi Family\",\r\n    CONDO: \"Condo\"\r\n}\r\n\r\n// What an ordinal suffix is: https://en.wikipedia.org/wiki/Ordinal_numeral\r\nexport function ordinal_suffix_of(i) {\r\n    var j = i % 10,\r\n        k = i % 100;\r\n    if (j === 1 && k !== 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j === 2 && k !== 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j === 3 && k !== 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}","import styled from \"styled-components\";\r\n// TODO update styles\r\n\r\nexport const AutoCompleteWrapper = styled.div`\r\n    && > div {\r\n        margin-bottom: 0;\r\n        padding-bottom: 0;\r\n    }\r\n\r\n  .no-suggestions {\r\n    color: #999;\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestions {\r\n    position: absolute;\r\n    border: 1px solid #999;\r\n    border-top-width: 0;\r\n    list-style: none;\r\n    margin-top: 0;\r\n    max-height: 143px;\r\n    overflow-y: auto;\r\n    padding-left: 0;\r\n    /* width: 15.4375rem; */\r\n    width: calc(300px + 1rem);\r\n    z-index: 1000;\r\n    background-color: #FFF;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .suggestions li {\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestion-active,\r\n  .suggestions li:hover {\r\n    background-color: #16abf0;\r\n    color: #FFF;\r\n    cursor: pointer;\r\n    font-weight: 700;\r\n  }\r\n  \r\n  .suggestions li:not(:last-of-type) {\r\n    border-bottom: 1px solid #999;\r\n  }\r\n`","import React from 'react'\r\nimport InputField from './InputField';\r\nimport * as S from \"./AutoCompleteStyled\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\n// TODO: Add auto scrolling to keep active item into focus\r\n\r\nconst AutoComplete = React.memo(({ \r\n  suggestions = [], \r\n  howToFilter,\r\n  handleonblur,\r\n  handleonkeypress, \r\n  filterValues = true, \r\n  status = true, \r\n  onChange, \r\n  onSelect,\r\n  getValues,\r\n  name,\r\n  errors,\r\n  register,\r\n  required,\r\n  label,\r\n  ...props }) => {\r\n    const ref = useOnclickOutside(() => {\r\n      handleOnBlur();\r\n    });\r\n    \r\n    const [suggestionState, setSuggestionState] = React.useState({\r\n        // The active suggestion's index\r\n        activeSuggestion: 0,\r\n        // The suggestions that match the user's input\r\n        filteredSuggestions: [],\r\n        // Whether or no the suggestion list is shown\r\n        showSuggestions: false,\r\n        // What the user has entered\r\n        userInput: '',\r\n    });\r\n\r\n    // This is required because AutoComplete is using InputField as a controlled component\r\n    React.useEffect(() => {\r\n      if(getValues && getValues(`${name}`)){\r\n        setSuggestionState({userInput: getValues(`${name}`)})\r\n      }\r\n    }, [name, getValues])\r\n    \r\n    const handleOnBlur = (e) => {\r\n      if(handleonblur){\r\n        handleonblur(e);\r\n      }\r\n      setSuggestionState(state => {\r\n        return {\r\n        ...state,\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n      }});\r\n    }\r\n\r\n    const handleOnChange = e => {\r\n      e.stopPropagation();\r\n      const userInput = e.currentTarget.value;\r\n      \r\n      // Filter our suggestions that don't contain the user's input\r\n      let filteredSuggestions;\r\n      if(filterValues){\r\n        if(howToFilter){\r\n          filteredSuggestions = howToFilter(suggestions);\r\n        }else {\r\n          filteredSuggestions = suggestions.filter(\r\n            suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n            );\r\n          }\r\n        }else {\r\n          filteredSuggestions = suggestions;\r\n        }\r\n        \r\n        setSuggestionState({\r\n          activeSuggestion: 0,\r\n          filteredSuggestions,\r\n          showSuggestions: true,\r\n          userInput: userInput,\r\n        });\r\n        \r\n        if(onChange){\r\n          onChange(e);\r\n        }\r\n      };\r\n\r\n    const handleSelect = e => {\r\n      \r\n      e.stopPropagation();\r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n        userInput: e.currentTarget.innerText,\r\n      });\r\n\r\n      if(onSelect){\r\n        onSelect(e)\r\n      }\r\n    };\r\n\r\n    const handleOnKeyDown = e => {\r\n      const { activeSuggestion, filteredSuggestions } = suggestionState;\r\n\r\n      // User pressed the enter key\r\n      if (e.keyCode === 13) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setSuggestionState(state => { \r\n          return {\r\n            ...state,\r\n            activeSuggestion: 0,\r\n            showSuggestions: false,\r\n            userInput: filteredSuggestions[activeSuggestion]\r\n          }\r\n        });\r\n      }\r\n      \r\n      // User pressed the up arrow\r\n      else if (e.keyCode === 38) {\r\n        if (activeSuggestion === 0) {\r\n          return;\r\n        }\r\n        setSuggestionState(state => { \r\n          return { ...state, activeSuggestion: activeSuggestion - 1} \r\n        });\r\n      }\r\n      \r\n\r\n      // User pressed the down arrow\r\n      else if (e.keyCode === 40) {\r\n      \r\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n          return;\r\n        }\r\n      \r\n        \r\n        setSuggestionState(state => { \r\n          return { ...state, activeSuggestion: activeSuggestion + 1} \r\n        });\r\n      };\r\n      e.stopPropagation();\r\n    };\r\n\r\n    const handleOnFocus = () => {\r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: suggestions,\r\n        showSuggestions: true,\r\n        userInput: \"\",\r\n      });\r\n    }\r\n\r\n    const suggestionsListComponent = () => {\r\n      const { showSuggestions, filteredSuggestions, activeSuggestion } = suggestionState; \r\n\r\n      if (showSuggestions) {\r\n        if (filteredSuggestions.length) {\r\n\r\n\r\n          return (\r\n            <ul className=\"suggestions\">\r\n                  {filteredSuggestions.map((suggestion, index) => {\r\n                    let className;\r\n\r\n                    if (index === activeSuggestion) {\r\n                      className = \"suggestion-active\";\r\n                    }\r\n      \r\n                    return (\r\n                      <li className={className} key={suggestion} onClick={handleSelect}>\r\n                        {suggestion}\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              );\r\n            } else {\r\n              return (\r\n                <div className=\"no-suggestions\">\r\n                  <em>No suggestions</em>\r\n                </div>\r\n              );\r\n            }\r\n        }    \r\n    }\r\n    \r\n\r\n    return (\r\n        <S.AutoCompleteWrapper ref={ref}>\r\n          <InputField\r\n            value={suggestionState.userInput}\r\n            onChange={handleOnChange}\r\n            onKeyDown={handleOnKeyDown}\r\n            onFocus={handleOnFocus}\r\n            getValues={getValues}\r\n            name={name}\r\n            errors={errors}\r\n            register={register}\r\n            required={required}\r\n            label={label}\r\n            {...props}\r\n          />\r\n          {suggestionsListComponent()}\r\n      </S.AutoCompleteWrapper>\r\n    )\r\n})\r\n\r\nexport default AutoComplete\r\n","import React from 'react'\r\nimport usePlacesAutocomplete from \"use-places-autocomplete\";\r\nimport AutoComplete from './AutoComplete';\r\n\r\n/* \r\n  Uses google places api to lookup address and utilizes AutoComplete\r\n  to generate dropdown list of choices to select from.\r\n*/\r\n\r\nconst Address = ({ disable=false, value, ...props }) => {\r\n    const {\r\n        ready,\r\n        suggestions: { status, data },\r\n        setValue,\r\n        clearSuggestions,\r\n      } = usePlacesAutocomplete();\r\n   \r\n      const handleInput = (e) => {\r\n        setValue(e.target.value);\r\n        if(value){\r\n          setValue(value);\r\n          return;\r\n        }\r\n      };\r\n     \r\n      const handleSelect = (e) => () => {\r\n        setValue(e.currentTarget.innerText, false);\r\n        clearSuggestions();\r\n      };\r\n\r\n      const handleOnBlur = () => {\r\n        clearSuggestions();\r\n      }\r\n\r\n      const getDescriptions = data.map(({description}) => description);\r\n\r\n      return (\r\n          <AutoComplete\r\n            onSelect={handleSelect}\r\n            onChange={handleInput}\r\n            disabled={disable || !ready}\r\n            handleonblur={handleOnBlur}\r\n            suggestions={getDescriptions}\r\n            status={status}\r\n            filterValues={false}\r\n            {...props}\r\n          />\r\n      );\r\n}\r\n\r\nexport default Address\r\n","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport InputField from \"./InputField\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst PropertyInfo = ({ register, errors, getValues, agentType }) => {\r\n\r\n    const propertyInformation =\r\n    errors[\"property\"]?.mlsNumber ||\r\n    errors[\"property\"]?.deedReference ||\r\n    errors[\"property\"]?.address ||\r\n    errors[\"property\"]?.mapReferences;\r\n\r\n    const handleConditionalFields = () => {\r\n        if(agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH){\r\n            return (\r\n                <S.MultiContainer>\r\n                     <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mapReferences\"\r\n                    label=\"Map References (Page)\"\r\n                    errors={errors[\"property\"]?.mapReferences}\r\n                    register={register}\r\n                    required={true} />\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.deedReference\"\r\n                    label=\"Deed Reference (Book)\" \r\n                    errors={errors[\"property\"]?.deedReference} \r\n                    register={register}\r\n                    required={true} />\r\n                </S.MultiContainer>\r\n            )\r\n        }else{\r\n            return (\r\n            <div>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.deedReference\"\r\n                label=\"Deed Reference (Book)\" \r\n                errors={errors[\"property\"]?.deedReference} \r\n                register={register}\r\n                required={true} />\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.FieldWrapper error={propertyInformation}>\r\n            <S.FieldTitle>Property Information</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mlsNumber\"\r\n                    label=\"MLS Number\" \r\n                    errors={errors[\"property\"]?.mlsNumber} \r\n                    register={register} \r\n                    required={true}/>\r\n                <S.AddressWrapper>\r\n                    <Address\r\n                    getValues={getValues}\r\n                    name=\"property.address\"\r\n                    label=\"Address\" \r\n                    errors={errors[\"property\"]?.address} \r\n                    register={register} \r\n                    required={true} />\r\n                </S.AddressWrapper>\r\n            </S.MultiContainer>\r\n            {handleConditionalFields()}\r\n        </S.FieldWrapper>\r\n    )\r\n}\r\n\r\nexport default PropertyInfo\r\n","import React from 'react';\r\nimport * as S from \"./InputFieldStyled\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\"\r\n\r\nconst CustomDatePicker = ({ control, name, label, errors, required, className, showYearPicker, dateFormat=\"MM/dd/yyyy\", getValues, ...rest }) => {\r\n    const classVal = required ? `${className} required-field`: className;\r\n    const { isEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n    \r\n    return (\r\n        <S.InputField isEmpty={isEmpty}>\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                defaultValue={null}\r\n                {...rest}\r\n                render={(props) => {\r\n                return <DatePicker\r\n                    showYearPicker={showYearPicker}\r\n                    dateFormat={dateFormat}\r\n                    defaultValue={null}\r\n                    placeholderText={null}\r\n                    startDate={null}\r\n                    className=\"input\"\r\n                    selected={ props.value !== null ? new Date(props.value) : null}\r\n                    onChange={(e) => {\r\n                        props.onChange(e)\r\n                        setIsEmpty(true);\r\n                        if(e === null){\r\n                            setIsEmpty(false)\r\n                        }\r\n                    }}\r\n                    onBlur={(e) => {\r\n                        if(e.target.value === \"\"){\r\n                            setIsEmpty(false);\r\n                        }\r\n                        e.preventDefault();\r\n                    }}\r\n                    onFocus={(e) => {\r\n                        setIsEmpty(true)\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                    }}\r\n                    closeOnScroll={true}\r\n                />\r\n                }}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {required && errors && <span>Required Field</span>}\r\n        </S.InputField>  \r\n    )\r\n}\r\n\r\nexport default CustomDatePicker\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 1em;\r\n`;\r\n\r\nexport const optionWrapper = styled.div`\r\n    margin: .5rem;\r\n`;\r\n\r\nexport const InputRadio = styled.input`\r\n    width: 1rem;\r\n    height: 1rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    margin: .25em;\r\n    font-weight: 450;\r\n    padding-left: .25rem;\r\n`;\r\n\r\nexport const OtherWrapper = styled.div`\r\n    display: inline-block;\r\n    margin: .5rem;\r\n    position: relative;\r\n    top: -1.125rem;\r\n`;","import React from 'react';\r\nimport * as S from \"./RadioSelectorStyled\";\r\nimport InputField from \"./InputField\";\r\n\r\nconst RadioSelector = React.memo(({ register, name, array, other=false, defaultVal, getValues, watch }) => {\r\n    /* \r\n        Lines 9 -> 13 Takes care of the inputfield value on return to the page\r\n        if it was a selected as the option. If it was not selected then it will\r\n        be set to \"\"\r\n    */\r\n    let watchVal = watch ? watch(name) : false;\r\n    let textFieldHasValue = watchVal ? !array.includes(watchVal) : \"\";\r\n    const [otherVal, setOtherVal] = React.useState({\r\n        text: textFieldHasValue ? watchVal : \"\"\r\n    })\r\n\r\n    const handleSetOtherVal = (e) => {\r\n        setOtherVal(state => {\r\n            return {\r\n                text: e.target.value\r\n            }\r\n        });\r\n        e.persist();\r\n    }\r\n\r\n    // To create a radio group you must used uncontrolled components.\r\n    // Documentation: https://reactjs.org/docs/uncontrolled-components.html\r\n    return (\r\n        <React.Fragment>\r\n            <S.Container>\r\n                {array.map((value) => (\r\n                    <S.optionWrapper key={`input-${value}`}>\r\n                        <S.InputRadio name={name} type=\"radio\" defaultValue={value} defaultChecked={value === defaultVal} ref={register} />\r\n                        <S.Label>\r\n                            {value}\r\n                        </S.Label>\r\n                    </S.optionWrapper>\r\n                ))}\r\n            </S.Container>\r\n            {other ?\r\n                <S.OtherWrapper>\r\n                    <S.InputRadio\r\n                    value={otherVal?.text}\r\n                    name={name}\r\n                    type=\"radio\"\r\n                    style={{marginTop: \"1.825rem\"}}\r\n                    defaultChecked={otherVal?.text === defaultVal}\r\n                    ref={register}\r\n                    />\r\n                    <div style={{float: \"right\"}}>\r\n                        <InputField\r\n                        onChange={handleSetOtherVal}\r\n                        value={otherVal?.text}\r\n                        label=\"Other\"\r\n                        required={false}\r\n                        getValues={getValues}\r\n                         />\r\n                    </div>\r\n                </S.OtherWrapper> \r\n            : null }\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nexport default RadioSelector\r\n","import * as yup from \"yup\";\r\nimport { AGENT_TYPES, PROPERTY_TYPES } from \"../shared\";\r\n\r\n// This is used in lazy validation rules found here: https://github.com/jquense/yup/issues/130#issuecomment-578392176\r\nconst mapRules = (map, rule) => Object.keys(map).reduce((newMap, key) => ({...newMap, [key]: rule}), {});\r\n\r\n// TODO: Find solution to replace regular expression\r\n// Regular Express to Verify phone numbers taken from: https://www.sitepoint.com/community/t/phone-number-regular-expression-validation/2204/4\r\nconst PHONE_REG_EXP = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\nconst REQUIRED = \"Required\";\r\nconst VALID_EMAIL = \"Must be a Valid Email!\";\r\nconst NUMBER_ERROR_MESSAGE = \"Can only contain numbers\";\r\n\r\n\r\nexport const AgentTypeValidation = (agentType) => yup.object().shape({\r\n    agentType: yup.string().required(REQUIRED),\r\n});\r\n\r\nexport const BuyerFormOneValidation = (agentType) => yup.object().shape({\r\n    property: yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        mlsNumber: yup.string().test('len', 'Must be exactly 7 digits', val => val.length === 7),\r\n        deedReference: yup.string().required(REQUIRED).test('len', 'Must be in format XXXX-XXXXXXX', val => val.length === 11).required(REQUIRED),\r\n        propertyType: yup.string().required(REQUIRED).oneOf([...Object.values(PROPERTY_TYPES)], \"Select a valid Property type.\"),\r\n        condoManagementCompany: yup.string()\r\n        .when(\r\n            \"propertyType\",\r\n        { is: val => val === PROPERTY_TYPES.CONDO,\r\n            then: yup.string().required(REQUIRED)\r\n        }),\r\n        dateHouseBuilt: yup.string().required(REQUIRED),\r\n        titleOrTownSewer: yup.string().required(REQUIRED),\r\n        publicOrTownWater: yup.string().required(REQUIRED),\r\n        inspectionDeadline: yup.string().required(REQUIRED),\r\n        buyerhasSubmittedAdditionalOffer: agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        loxBoxCode: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE) : yup.mixed().notRequired(),\r\n        vacentOrOccupied: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n})});\r\n\r\nexport const AttorneyValidation = (agentType) => yup.object().shape({\r\n    firstName: yup.string().required(REQUIRED),\r\n    lastName: yup.string().required(REQUIRED),\r\n    emailAddress: yup.string().required(REQUIRED),\r\n    emailAddressVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('emailAddress'), null], \"Email Addresses Must Match\"),\r\n    firmName: yup.string().notRequired(),\r\n    phoneNumber: yup.string().notRequired().matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n});\r\n\r\nexport const TestAttorneyValidation = (agentType) => yup.lazy(obj => \r\n    yup.object(mapRules(obj, yup.object({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        emailAddress: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailAddressVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('emailAddress'), null], \"Email Addresses Must Match\"),\r\n        firmName: yup.string().required(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    })))\r\n)\r\n\r\nexport const FSBOValidation = (agentType) => yup.object().shape({\r\n    forSaleByOwner: yup.string().required(REQUIRED),\r\n    sellerFirstName: yup.string().notRequired(),\r\n    sellerLastName: yup.string().notRequired(),\r\n    sellerEmail: yup.string().notRequired(),\r\n    sellerEmailVerification: yup.string().notRequired().oneOf([yup.ref('sellerEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyfirstName: yup.string().notRequired(),\r\n    attorneylastName: yup.string().notRequired(),\r\n    attorneyEmail: yup.string().notRequired(),\r\n    attorneyEmailVerification: yup.string().notRequired().oneOf([yup.ref('attorneyEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyPhoneNumber: yup.string().notRequired(),\r\n});\r\n\r\nexport const ListingBrokerValidation = (agentType) => yup.object().shape({\r\n    listingBroker: yup.object().shape({\r\n        company: yup.string().required(REQUIRED),\r\n        address: yup.string().notRequired(),\r\n    }),\r\n    listingAgent: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"),\r\n        phoneNumber: yup.string().required(REQUIRED),\r\n        mlsID: yup.string().required(REQUIRED)\r\n    }),\r\n});\r\n\r\nexport const LendersValidation = (agentType) => yup.object().shape({\r\n    lender: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        companyName: yup.string().notRequired(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n    }),\r\n});\r\n\r\nexport const AdditionalInformationValidation = (agentType) => yup.object().shape({\r\n\r\n});\r\n\r\n/* \r\n    This object validation rule can be utilized to define a lazy array\r\n*/\r\nexport const ClientValidation = (agentType) => yup.lazy(obj =>\r\n    yup.object(mapRules(obj, yup.lazy(obj2 =>\r\n        {\r\n            if(Array.isArray(obj2)){\r\n                return yup.array().of(\r\n                    yup.object().shape({\r\n                        firstName: yup.string().required(REQUIRED),\r\n                        lastName: yup.string().required(REQUIRED),\r\n                        fullAddress: yup.string().required(REQUIRED),\r\n                        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n                        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n                        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n                    })\r\n                );\r\n            }\r\n            return yup.mixed().notRequired();\r\n        }\r\n    ))));\r\n\r\nexport const AgentAndBrokerValidation = (agentType) =>  yup.object().shape({\r\n    broker: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        companyName: yup.string().required(REQUIRED),\r\n    })))),\r\n    agent: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        MLSNumber: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n        compensationPerMLS: agentType === AGENT_TYPES.SELLERS ? yup.string().required(REQUIRED) : yup.mixed().notRequired(),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    }))))\r\n});","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Back = () => {\r\n    const history = useHistory();\r\n    return (<S.Input type=\"button\" value=\"Back\" onClick={() => history.goBack()} />)\r\n}\r\n\r\nexport const Next = () => {\r\n    return (\r\n        <S.Input type=\"submit\" value=\"Next\" />\r\n    )\r\n}\r\n\r\n","export default function updateAction(state, payload) {\r\n    return {\r\n      ...state,\r\n      details: {\r\n        ...state.details,\r\n        ...payload\r\n      }\r\n    };\r\n  }\r\n  ","import React from \"react\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStateMachine } from 'little-state-machine';\r\nimport updateAction from '../state/updateState';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers\";\r\n\r\n\r\nconst useCustomFormHook =  (validationRules ) => {\r\n    const { state, action } = useStateMachine(updateAction);\r\n    const agentType = state.details.agentType ? state.details.agentType : null\r\n    const { push } = useHistory();\r\n    const { register, handleSubmit, getValues, errors, control, watch } = useForm({\r\n        defaultValues: state.details,\r\n        mode: 'onChange',\r\n        reValidateMode: 'onChange',\r\n        resolver: validationRules && process.env.REACT_APP_ENABLE_VALIDATION === 'true' ? yupResolver(validationRules(agentType)) : null\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        return () => {\r\n            \r\n        }\r\n\r\n    }, [])\r\n    \r\n    return {\r\n        register,\r\n        control,\r\n        handleSubmit,\r\n        getValues,\r\n        errors,\r\n        action,\r\n        push,\r\n        state,\r\n        agentType,\r\n        watch\r\n    }\r\n} \r\n\r\nexport default useCustomFormHook","import React from 'react';\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport PropertyInfo from \"../FormFields/PropertyInfo\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { BuyerFormOneValidation } from \"../../validation\";\r\nimport { PROPERTY_TYPES, AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\nconst Property = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(BuyerFormOneValidation);\r\n\r\n    const [currPropertyType, setCurrentPropertyType] = React.useState(\"\");\r\n    const [additionalOffer, setAdditionalOffer] = React.useState(false);\r\n    const [inspectionWaved, setInspectionWaved] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Mortgage\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <PropertyInfo agentType={agentType} getValues={getValues} errors={errors} register={register} />\r\n                <S.FieldWrapper error={errors[\"property\"]?.propertyType}>\r\n                    <S.FieldTitle>Property Type</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Property Types\"\r\n                        name=\"property.propertyType\"\r\n                        label=\"Select a Property Type\"\r\n                        errors={errors[\"property\"]?.propertyType}\r\n                        options={Object.values(PROPERTY_TYPES)}\r\n                        register={register}\r\n                        isValue={currPropertyType}\r\n                        setValue={setCurrentPropertyType} />\r\n                </S.FieldWrapper>\r\n                {/* TODO: Multi Family. Are there tenants \r\n                apt1, staying, vaca date (NOT REQUIRED)\r\n                and if there are are they staying. Final vaca date*/}\r\n                {currPropertyType === \"Condo\" ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.condoManagementCompany}>\r\n                        <S.FieldTitle>Who is the Condo Management Company</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.condoManagementCompany\"\r\n                                label=\"Management Company\"\r\n                                errors={errors[\"property\"]?.condoManagementCompany}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null\r\n                }\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.vacentOrOccupied}>\r\n                        <S.FieldTitle>Is the house vacant or occupied?</S.FieldTitle>\r\n                        <RadioSelector\r\n                            register={register}\r\n                            name=\"property.vacentOrOccupied\"\r\n                            array={[\"Vacant\", \"Occupied\"]}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors[\"property\"]?.dateHouseBuilt}>\r\n                    <S.FieldTitle>Year Built</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        getValues={getValues}\r\n                        showYearPicker={true}\r\n                        control={control}\r\n                        name=\"property.dateHouseBuilt\"\r\n                        label=\"Select Date Built\"\r\n                        required={true}\r\n                        dateFormat=\"yyyy\"\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.titleOrTownSewer} >\r\n                    <S.FieldTitle>Is there a Title V or Town Sewer</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.titleOrTownSewer\"\r\n                        array={[\"Title V\", \"Public Sewer\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.publicOrTownWater} >\r\n                    <S.FieldTitle>Public or Town Water</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.publicOrTownWater\"\r\n                        array={[\"Town Water\", \"Private Water\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.inspectionWaved || errors[\"property\"]?.inspectionDeadline}>\r\n                    <S.FieldTitle>Inspection Waved\r\n                            <Slider\r\n                            isChecked={inspectionWaved}\r\n                            setIsChecked={setInspectionWaved}\r\n                            name=\"property.isInspectionWaved\"\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.FieldTitle>\r\n                    {inspectionWaved ? null :\r\n                        <CustomDatePicker\r\n                            getValues={getValues}\r\n                            control={control}\r\n                            name=\"property.inspectionDeadline\"\r\n                            label=\"Select Inspection Deadline\"\r\n                            required={true}\r\n                        />}\r\n                </S.FieldWrapper>\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH\r\n                    ? <S.FieldWrapper error={errors[\"property\"]?.loxBoxCode}>\r\n                        <S.FieldTitle>Lox Box Code</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.loxBoxCode\"\r\n                                label=\"Lox Box Code\"\r\n                                errors={errors[\"property\"]?.loxBoxCode}\r\n                                required={true}\r\n                                register={register}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper> : null}\r\n                {/* TODO: This is currently used to determine what type of email should be sent.\r\n                    Note: Refer to Wendy Email for Message differences.\r\n                */}\r\n                {agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.buyerHasSubmittedAdditionalOffer}>\r\n                        <S.FieldTitle>Has the buyer submitted an offer for another property?\r\n                        <Slider\r\n                                isChecked={additionalOffer}\r\n                                setIsChecked={setAdditionalOffer}\r\n                                name=\"property.buyerHasSubmittedAdditionalOffer\"\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper> : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    );\r\n}\r\n\r\nexport default Property","import React from 'react'\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Address from \"../FormFields/Address\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { AgentAndBrokerValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { useParams } from 'react-router-dom';\r\nimport Slider from \"../FormFields/Slider\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Agent = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(AgentAndBrokerValidation);\r\n    const { represents } = useParams();\r\n    const [isEXP, setIsExp] = React.useState(false);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(`/Attorney/${AGENT_TYPES.BUYERS}`));\r\n        }\r\n    }\r\n\r\n    const loadAgentPhoneNumber = () => {\r\n        return (\r\n            <InputField\r\n                getValues={getValues}\r\n                name={`agent.${represents}.phoneNumber`}\r\n                label=\"Phone Number\"\r\n                errors={errors?.agent?.[represents]?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    const loadFieldsBasedOnAgent = () => {\r\n        if (AGENT_TYPES.BUYERS === agentType) {\r\n            return (\r\n                <div>\r\n                    {loadAgentPhoneNumber()}\r\n                </div>\r\n            )\r\n        } else if (AGENT_TYPES.SELLERS === agentType) {\r\n            return (\r\n                <S.MultiContainer>\r\n                    {loadAgentPhoneNumber()}\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`agent.${represents}.compensationPerMLS`}\r\n                        label=\"Agency Compensation per MLS\"\r\n                        errors={errors?.agent?.[represents]?.compensationPerMLS}\r\n                        register={register}\r\n                        required={true}\r\n                    />\r\n                </S.MultiContainer>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper >\r\n                    <S.FieldTitle>{represents}'s Agent</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.firstName`}\r\n                            label=\"First Name\"\r\n                            errors={errors?.agent?.[represents]?.firstName}\r\n                            required={true}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.MLSNumber`}\r\n                            label=\"Agent MLS Number\"\r\n                            errors={errors?.agent?.[represents]?.MLSNumber}\r\n                            required={true}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.email`}\r\n                            label=\"Email Address\"\r\n                            errors={errors?.agent?.[represents]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.emailVerification`}\r\n                            label=\"Email Address Verification\"\r\n                            errors={errors?.agent?.[represents]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    {loadFieldsBasedOnAgent()}\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Is eXp your broker?\r\n                    <Slider\r\n                            isChecked={isEXP}\r\n                            setIsChecked={setIsExp}\r\n                            name=\"property.brokerIsExp\"\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper>\r\n                    {/* TODO: Finish breaking this out into a method based on isExp */}\r\n                    <S.FieldTitle>{represents}'s Broker</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`broker.${represents}.companyName`}\r\n                            label=\"Broker Company\"\r\n                            errors={errors?.broker?.[represents]?.companyName}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        {/* TODO: Can be pre filled if eXp with --> eXp Address = P.O. Box 10665 Holyoke Ma 01041*/}\r\n                        <S.AddressWrapper>\r\n                            <Address\r\n                                getValues={getValues}\r\n                                name={`broker.${represents}.address`}\r\n                                label=\"Broker Address\"\r\n                                errors={errors?.broker?.[represents]?.address}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Agent\r\n","import React from \"react\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"../state/updateState\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Result = props => {\r\n  const { state } = useStateMachine(updateAction);\r\n  const { goBack } = useHistory();\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Result</h2>\r\n      <pre>{JSON.stringify(state, null, 2)}</pre>\r\n      <button onClick={() => goBack()}>Back</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Address from \"../FormFields/Address\";\r\nimport Slider from \"../FormFields/Slider\";\r\n\r\n// TODO: Change broker to autocomplete field for selecting a broker\r\n// TODO: Update data structure once autocomplete is added\r\nconst Broker = ({ getValues, errors, register, represents}) => {\r\n    const [isEXP, setIsExp] = React.useState(false);\r\n\r\n    const handleIsExp = () => {\r\n        return (\r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>Listing Broker</S.FieldTitle>\r\n                <S.MultiContainer>\r\n                    <InputField\r\n                        required={true}\r\n                        getValues={getValues}\r\n                        name={`${represents}.broker.companyName`}\r\n                        label=\"Company\"\r\n                        errors={errors[`${represents}`]?.broker?.company}\r\n                        register={register}\r\n                        value=\"eXp\"\r\n                        disabled={true}\r\n                    />\r\n                    <InputField\r\n                        required={true}\r\n                        getValues={getValues}\r\n                        name={`${represents}.broker.address`}\r\n                        label=\"Address\"\r\n                        errors={errors[`${represents}`]?.broker?.address}\r\n                        register={register}\r\n                        value=\"P.O. Box 10665 Holyoke Ma 01041\"\r\n                        disabled={true}\r\n                    />\r\n                </S.MultiContainer>\r\n            </S.FieldWrapper>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>Is eXp your broker?\r\n                    <Slider\r\n                    isChecked={isEXP}\r\n                    setIsChecked={setIsExp}\r\n                    name=\"property.buyerHasSubmittedAdditionalOffer\"\r\n                    register={register}\r\n                    required={false}\r\n                    />\r\n                </S.FieldTitle>\r\n            </S.FieldWrapper>\r\n            {isEXP ? handleIsExp() : \r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>Listing Broker</S.FieldTitle>\r\n                <S.MultiContainer>\r\n                    <InputField\r\n                    required={true}\r\n                    getValues={getValues}\r\n                    name=\"listing.broker.company\"\r\n                    label=\"Company\"\r\n                    errors={errors?.listing?.Broker?.company}\r\n                    register={register}\r\n                    />\r\n                    <S.AddressWrapper>\r\n                    <Address\r\n                    required={true}\r\n                    getValues={getValues}\r\n                    name=\"listing.broker.address\"\r\n                    label=\"Address\"\r\n                    errors={errors?.listingBroker?.address}\r\n                    register={register}\r\n                    />\r\n                    </S.AddressWrapper>\r\n                </S.MultiContainer>\r\n            </S.FieldWrapper>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Broker\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { ListingBrokerValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, MORTGAGE_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport Broker from \"./Broker\";\r\n\r\n// In my notes ListingBroker === ListingBroker and ListingAgent pages\r\nconst ListingBroker = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType, state } = useCustomFormHook(ListingBrokerValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Attorney/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                if (state.details.mortgage.typeOfMortgage === MORTGAGE_TYPES.CASH) {\r\n                    push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n                } else {\r\n                    push(handleDeploymentPath(\"/Lenders\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // This was done because the field will be wrapped different html elements depending on agentType\r\n    const phoneNumberField = () => {\r\n        return (\r\n            <InputField\r\n                getValues={getValues}\r\n                name=\"listing.agent.phoneNumber\"\r\n                label=\"Phone Number\"\r\n                errors={errors?.listing?.Agent?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <Broker \r\n                    getValues={getValues}\r\n                    register={register}\r\n                    errors={errors}\r\n                />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Listing Agent</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors?.listing?.agent?.firstName}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors?.listing?.agent?.lastName}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.email\"\r\n                            label=\"Email\"\r\n                            errors={errors?.listing?.Agent?.email}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listing.agent.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors?.listing?.agent?.emailVerification}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    {state.details.agentType === AGENT_TYPES.SELLERS || state.details.agentType === AGENT_TYPES.BOTH ?\r\n                        <S.MultiContainer>\r\n                            {phoneNumberField()}\r\n                            <InputField\r\n                                required={true}\r\n                                getValues={getValues}\r\n                                name=\"listing.agent.mlsID\"\r\n                                label=\"MLS ID\"\r\n                                errors={errors?.listing?.agent?.mlsID}\r\n                                register={register}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        :\r\n                        <div>\r\n                            {phoneNumberField()}\r\n                        </div>\r\n                    }\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ListingBroker\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { LendersValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Lenders = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(LendersValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n        }\r\n    }\r\n    \r\n    // TODO: Lender info is required\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Lender Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors.lender?.firstName}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors.lender?.lastName}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.companyName\"\r\n                            label=\"Company Name\"\r\n                            errors={errors.lender?.company}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.phoneNumber\"\r\n                            label=\"Phone Number\"\r\n                            errors={errors.lender?.phoneNumber}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.email\"\r\n                            label=\"Email\"\r\n                            errors={errors.lender?.email}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors.lender?.emailVerification}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Lenders\r\n","import React from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { TestAttorneyValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\n// TODO Create recommendation fields once google sheet complete is done\r\n// If introduction give list of attorneys. ( cleint choose and send email to this attorney)\r\n// I think a drop down list would be the best choice\r\nconst Attorney = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(TestAttorneyValidation);\r\n    const { represents } = useParams();\r\n    const [hasAttorney, sethasAttorney] = React.useState(true);\r\n    const [wantsRecommendation, setWantsRecommendation] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action({ attorney: data });\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n\r\n            if (represents === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(`/Client/${AGENT_TYPES.BUYERS}`));\r\n\r\n            } else if (represents === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/FSBO\"));\r\n        }\r\n    }\r\n\r\n    const askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot = () => {\r\n        if ((agentType === AGENT_TYPES.SELLERS && represents === AGENT_TYPES.SELLERS) ||\r\n            (agentType === AGENT_TYPES.BUYERS && represents === AGENT_TYPES.BUYERS)) {\r\n            return (\r\n                <React.Fragment>\r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>\r\n                            Do you have an attorney?\r\n                            <Slider\r\n                                isChecked={hasAttorney}\r\n                                setIsChecked={sethasAttorney}\r\n                                name={`${represents}.hasAttorney`}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper>\r\n                    {hasAttorney ? null : \r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>\r\n                            Would you like a recommendation and introduction?\r\n                            <Slider \r\n                                isChecked={wantsRecommendation}\r\n                                setIsChecked={setWantsRecommendation}\r\n                                name={`${represents}.wantsRecommendationAndIntroduction`}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper>\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    const attorneyInformation = () => {\r\n        if(hasAttorney){\r\n        return (\r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>{represents}'s Attorney Information</S.FieldTitle>\r\n                <S.MultiContainer>\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`${represents}.firstName`}\r\n                        label=\"First Name\"\r\n                        errors={errors[represents]?.firstName}\r\n                        required={true}\r\n                        register={register}\r\n                    />\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`${represents}.lastName`}\r\n                        label=\"Last Name\"\r\n                        errors={errors[represents]?.lastName}\r\n                        required={true}\r\n                        register={register}\r\n                    />\r\n                </S.MultiContainer>\r\n                <S.MultiContainer>\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`${represents}.emailAddress`}\r\n                        label=\"Email\"\r\n                        errors={errors[represents]?.emailAddress}\r\n                        required={true}\r\n                        register={register}\r\n                    />\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`${represents}.emailAddressVerification`}\r\n                        label=\"Email Verification\"\r\n                        errors={errors[represents]?.emailAddressVerification}\r\n                        required={true}\r\n                        register={register}\r\n                    />\r\n                </S.MultiContainer>\r\n                <S.MultiContainer>\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`${represents}.firmName`}\r\n                        label=\"Attorney Firm Name\"\r\n                        errors={errors[represents]?.firmName}\r\n                        required={false}\r\n                        register={register}\r\n                    />\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`${represents}.phoneNumber`}\r\n                        label=\"Phone number\"\r\n                        errors={errors[represents]?.phoneNumber}\r\n                        required={false}\r\n                        register={register}\r\n                    />\r\n                </S.MultiContainer>\r\n            </S.FieldWrapper>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)} >\r\n                <FormHeader />\r\n                {askFilingClientIfTheyHaveAttorneyAndTheyWantRecommendationIfNot()}\r\n                {attorneyInformation()}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Attorney\r\n","import React from 'react';\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { FSBOValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst ForSaleByOwner = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(FSBOValidation);\r\n    const [isFSBO, setIsFSBO] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/ListingBroker\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>For Sale Buy Owner\r\n                        <Slider\r\n                            isChecked={isFSBO}\r\n                            setIsChecked={setIsFSBO}\r\n                            register={register}\r\n                            name=\"FSBO.isForSaleByOwner\"\r\n                            required={false} />\r\n                    </S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {isFSBO ?\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Buyer's Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors[\"FSBO\"]?.firstName}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors[\"FSBO\"]?.sellerLastName}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.email\"\r\n                            label=\"Email Address\"\r\n                            errors={errors[\"FSBO\"]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"FSBO.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors[\"FSBO\"]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                : null}\r\n                {isFSBO ?\r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>Attorney Information (This Attorney will be holding Escrow )</S.FieldTitle>\r\n                        <S.MultiContainer>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.firstName\"\r\n                                label=\"First Name\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.firstName}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.lastName\"\r\n                                label=\"Last Name\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.firstName}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        <S.MultiContainer>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.email\"\r\n                                label=\"Email\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.email}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.emailVerification\"\r\n                                label=\"Email Verification\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.emailVerification}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"FSBO.attorney.phoneNumber\"\r\n                                label=\"Phone Number\"\r\n                                errors={errors[\"FSBO\"]?.attorney?.phoneNumber}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ForSaleByOwner\r\n","import React from 'react'\r\nimport { BuyerFormOneValidation } from \"../../validation\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport { MORTGAGE_TYPES } from \"../../shared\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Mortgage = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(BuyerFormOneValidation);\r\n\r\n    const onSubmit = data => {\r\n        action({ mortgage: data });\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Client/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Client/Buyer\"))\r\n            }\r\n        }\r\n    }\r\n\r\n    const [currMortgageType, setCurrMortgageType] = React.useState(\"\");\r\n    const [isConcessions, setIsConcessions] = React.useState(false);\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper error={errors?.typeOfMortgage}>\r\n                    <S.FieldTitle>What Type of Mortgage</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Mortgage Types\"\r\n                        name=\"typeOfMortgage\"\r\n                        label=\"Select a Mortgage Type\"\r\n                        errors={errors?.typeOfMortgage}\r\n                        options={Object.values(MORTGAGE_TYPES)}\r\n                        register={register}\r\n                        isValue={currMortgageType}\r\n                        setValue={setCurrMortgageType}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.purchasePrice}>\r\n                    <S.FieldTitle>Purchase Price</S.FieldTitle>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"purchasePrice\"\r\n                            label=\"Purchase price?\"\r\n                            errors={errors?.purchasePrice}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.firstDeposit || errors?.secondDeposit}>\r\n                    <S.FieldTitle>Deposit Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"firstDeposit\"\r\n                            label=\"First Deposit Amount?\"\r\n                            errors={errors?.firstDeposit}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"secondDeposit\"\r\n                            label=\"Second Deposit Amount?\"\r\n                            errors={errors.secondDeposit}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.areConcessions || errors?.concessions}>\r\n                    <S.FieldTitle>Are there concessions?\r\n                        <Slider\r\n                            isChecked={isConcessions}\r\n                            setIsChecked={setIsConcessions}\r\n                            name=\"areConcessions\"\r\n                            required={false}\r\n                            register={register}\r\n                        />\r\n                    </S.FieldTitle>\r\n                    {isConcessions ?\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"concessions\"\r\n                                label=\"What are the concessions?\"\r\n                                errors={errors?.concessions}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                        : null}\r\n                </S.FieldWrapper>\r\n                {getValues(`typeOfMortgage`) !== MORTGAGE_TYPES.CASH ?\r\n                    <S.FieldWrapper error={errors?.mortgageCommitmentDeadline}>\r\n                        <S.FieldTitle>Mortgage Commitment Deadline</S.FieldTitle>\r\n                        <CustomDatePicker\r\n                            control={control}\r\n                            getValues={getValues}\r\n                            name=\"mortgageCommitmentDeadline\"\r\n                            label=\"Select Mortgage Commitment Date\"\r\n                            required={true}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors?.houseClosingDate}>\r\n                    <S.FieldTitle>Closing Date</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        control={control}\r\n                        getValues={getValues}\r\n                        name=\"houseClosingDate\"\r\n                        label=\"Select Closing Date\"\r\n                        required={true}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Mortgage\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { Next } from \"../FormFields/SharedButtons\";\r\nimport { AgentTypeValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst AgentType = () => {\r\n    const { register, handleSubmit, errors, action, push } = useCustomFormHook(AgentTypeValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Property\"));\r\n        }\r\n    }\r\n\r\n    const handleTestingButton = () => {\r\n        push(handleDeploymentPath(\"/Testing\"))\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper error={errors.agentType}>\r\n                    <S.FieldTitle>Please Select who you will be representing.</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"agentType\"\r\n                        array={Object.values(AGENT_TYPES)}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <button onClick={handleTestingButton}>Testing</button>\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AgentType\r\n","import React, { useState } from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\n// import InputField from \"../FormFields/InputField\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport Slider from \"../FormFields/Slider\";\r\n// import { yupResolver } from '@hookform/resolvers';\r\n// import { AdditionalInformationValidation } from \"../../validation\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\nconst AdditionalInformation = () => {\r\n    const { handleSubmit, action, push, register, getValues, watch } = useCustomFormHook();\r\n    const [withTracyGagne, setWithTracyGagne] = useState(false)\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Additional Information</S.FieldTitle>\r\n                    {/* TODO: Make field: Are you currently part of the tracy gagne team? */}\r\n                    {/* TODO: Need Additional field --> create text area field to allow for longer input */}\r\n                    {/* TODO: This is for an outside referral NOT with the Tracy Gagne Team. Is there a refereall to be paid on this transaction. */}\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Are you with the Tracy Gagne Team? <Slider isChecked={withTracyGagne} setIsChecked={setWithTracyGagne} /></S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                {withTracyGagne ? <S.FieldWrapper>\r\n                    <S.FieldTitle>Team lead or Sphere Not split with eXp only with the Tracy Gagne Team</S.FieldTitle>\r\n                    <RadioSelector \r\n                    register={register}\r\n                    array={[\"75/25\", \"100\"]} \r\n                    name=\"additionalInformation.finalPaymentSplit\"\r\n                    other={true}\r\n                    getValues={getValues}\r\n                    watch={watch}\r\n                    />\r\n                </S.FieldWrapper> : null}\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AdditionalInformation\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from '../../hooks/useCustomFormHook';\r\nimport { ClientValidation } from \"../../validation\";\r\nimport AutoComplete from '../FormFields/AutoComplete';\r\nimport Address from \"../FormFields/Address\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport InputField from \"../FormFields/InputField\";\r\n\r\nconst Testing = () => {\r\n    const { control, register, handleSubmit, errors, action, push, getValues } = useCustomFormHook(ClientValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        push(handleDeploymentPath(\"/result\"));\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>AutoComplete Test</S.FieldTitle>\r\n                    <AutoComplete\r\n                        suggestions={[\r\n                            \"George\",\r\n                            \"Kate\",\r\n                            \"Luna\",\r\n                            \"finnick\"\r\n                        ]}\r\n                        getValues={getValues}\r\n                        name=\"testing.findValue\"\r\n                        label=\"Search Here\"\r\n                        errors={errors?.testing?.findValue}\r\n                        register={register}\r\n                        required={false}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Testing</S.FieldTitle>\r\n                    <Address\r\n                        getValues={getValues}\r\n                        name=\"testing.address\"\r\n                        label=\"Search for an address\"\r\n                        errors={errors?.testing?.address}\r\n                        register={register}\r\n                        required={false}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.dateHouseBuilt}>\r\n                    <S.FieldTitle>Year Built</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        getValues={getValues}\r\n                        showYearPicker={true}\r\n                        control={control}\r\n                        name=\"property.dateHouseBuilt\"\r\n                        label=\"Select Date Built\"\r\n                        required={true}\r\n                        dateFormat=\"yyyy\"\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.MultiContainer>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.mlsNumber\"\r\n                label=\"MLS Number\" \r\n                errors={errors[\"property\"]?.mlsNumber} \r\n                register={register} \r\n                required={true}/>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.deedReference\"\r\n                label=\"Deed Reference (Book)\" \r\n                errors={errors[\"property\"]?.deedReference} \r\n                register={register} \r\n                required={true} />\r\n            </S.MultiContainer>\r\n                <br />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Testing\r\n","import React from 'react';\r\nimport InputField from \"./InputField\";\r\nimport * as S from \"./FormStyled\"\r\nimport { ordinal_suffix_of } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\nconst MAX_BUYERS = 5;\r\nconst GeneralClientInformation = ({ errors, register, getValues, title }) => {\r\n    const [count, setCount] = React.useState(1);\r\n\r\n    React.useEffect(() => {\r\n        let newCount;\r\n        if (getValues && (newCount = parseInt(getValues(`client.${title}.count`))) !== undefined) {\r\n            setCount(newCount);\r\n        }\r\n    }, [getValues, title]);\r\n\r\n    const increaseCount = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (count < MAX_BUYERS) {\r\n            setCount(count => count + 1);\r\n        }\r\n    }\r\n\r\n    const decreaseCount = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setCount(count => count - 1);\r\n    }\r\n\r\n    const fieldCount = () => {\r\n        let fields = [];\r\n        for (let i = 0; i < count; i++) {\r\n            if (i === MAX_BUYERS) break;\r\n\r\n            let error =\r\n                errors[title]?.[i]?.firstName ||\r\n                errors[title]?.[i]?.lastName ||\r\n                errors[title]?.[i]?.email ||\r\n                errors[title]?.[i]?.emailVerification ||\r\n                errors[title]?.[i]?.phoneNumber ||\r\n                errors[title]?.[i]?.fullAddress;\r\n\r\n            fields.push(\r\n                <S.FieldWrapper key={i} error={error}>\r\n                    <S.FieldTitle>{ordinal_suffix_of(i + 1)} {title}</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.firstName`}\r\n                            label=\"First Name\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.firstName}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <InputField\r\n                            name={`client.${title}.${i}.lastName`}\r\n                            label=\"Last Name\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.lastName}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.email`}\r\n                            label=\"Email Address\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <InputField\r\n                            name={`client.${title}.${i}.emailVerification`}\r\n                            label=\"Email Address Verification\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            name={`client.${title}.${i}.phoneNumber`}\r\n                            label=\"Phone Number\"\r\n                            errors={errors[`client`]?.[title]?.[i]?.phoneNumber}\r\n                            register={register}\r\n                            required={true}\r\n                            getValues={getValues} />\r\n                        <S.AddressWrapper>\r\n                            <Address\r\n                                name={`client.${title}.${i}.address`}\r\n                                label=\"Full Address\"\r\n                                errors={errors[`client`]?.[title]?.[i]?.address}\r\n                                register={register}\r\n                                required={true}\r\n                                getValues={getValues}\r\n                            />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n            )\r\n        }\r\n        return fields;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: \"none\" }}>\r\n                <input\r\n                    value={count}\r\n                    onChange={(e) => {\r\n                        e.stopPropagation();\r\n                    }}\r\n                    name={`client.${title}.count`}\r\n                    ref={register}\r\n                />\r\n            </div>\r\n            {fieldCount().map(value => value)}\r\n            { count === MAX_BUYERS ? <S.Button>Max Buyer Count Reached</S.Button> : <S.Button onClick={increaseCount}>Add {title}</S.Button>}\r\n            { count > 0 || MAX_BUYERS === count ? <S.Button style={{ float: \"right\" }} onClick={decreaseCount}>Remove {title}</S.Button> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GeneralClientInformation","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport GeneralClientInformation from \"../FormFields/GeneralClientInformation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { ClientValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Client = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(ClientValidation);\r\n    const { clientType } = useParams();\r\n\r\n    console.log(\"client re rendered\")\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n            if (clientType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/ListingBroker\"));\r\n            } else if (clientType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n            }\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <GeneralClientInformation title={clientType} getValues={getValues} errors={errors} register={register} />\r\n                <br />\r\n                <Back />\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Client\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Property from \"../Forms/Property\";\r\nimport Agent from \"../Forms/Agent\";\r\nimport Result from \"../Result\";\r\nimport ListingBroker from \"../Forms/ListingBroker\";\r\nimport Lenders from \"../Forms/Lenders\";\r\nimport Attorney from '../Forms/Attorney';\r\nimport ForSaleByOwner from '../Forms/ForSaleByOwner';\r\nimport Mortgage from \"../Forms/Mortgage\";\r\nimport AgentType from \"../Forms/AgentType\";\r\nimport AdditionalInformation from \"../Forms/AdditionalInformation\";\r\nimport Testing from \"../Forms/Testing\";\r\nimport Client from \"../Forms/Client\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst index = () => {\r\n    return (\r\n        <Router>\r\n            <Route exact path={handleDeploymentPath(\"/\")} component={AgentType} />\r\n            <Route path={handleDeploymentPath(\"/Client/:clientType\")} component={Client} />\r\n            <Route path={handleDeploymentPath(\"/Property\")} component={Property} />\r\n            <Route path={handleDeploymentPath(\"/Agent/:represents\")} component={Agent} />\r\n            <Route path={handleDeploymentPath(\"/Attorney/:represents\")} component={Attorney} />\r\n            <Route path={handleDeploymentPath(\"/FSBO\")} component={ForSaleByOwner} />\r\n            <Route path={handleDeploymentPath(\"/ListingBroker\")} component={ListingBroker} />\r\n            <Route path={handleDeploymentPath(\"/Lenders\")} component={Lenders} />\r\n            <Route path={handleDeploymentPath(\"/Mortgage\")} component={Mortgage} />\r\n            <Route path={handleDeploymentPath(\"/AdditionalInformation\")} component={AdditionalInformation} />\r\n            <Route path={handleDeploymentPath(\"/result\")} component={Result} />\r\n            <Route path={handleDeploymentPath(\"/Testing\")} component={Testing} />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default index\r\n","import React from 'react';\r\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\r\nimport { DevTool } from \"little-state-machine-devtools\";\r\nimport Route from \"./components/Routes\";\r\n\r\ncreateStore({\r\n  details: {}\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <StateMachineProvider>\r\n      <DevTool />\r\n      <Route />\r\n    </StateMachineProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}