{"version":3,"sources":["components/FormFields/FormStyled.js","components/FormFields/InputFieldStyled.js","hooks/useCheckFieldValue.js","components/FormFields/InputField.js","components/FormFields/FormHeaderStyled.js","components/FormFields/FormHeader.js","components/FormFields/DropDownListStyled.js","components/FormFields/DropDownList.js","components/FormFields/SliderStyled.js","components/FormFields/Slider.js","shared.js","components/FormFields/PropertyInfo.js","components/FormFields/DatePicker.js","components/FormFields/RadioSelectorStyled.js","components/FormFields/RadioSelector.js","validation/index.js","components/FormFields/SharedButtons.js","state/updateState.js","hooks/useCustomFormHook.js","components/Forms/Property.js","components/FormFields/AutoCompleteStyled.js","components/FormFields/AutoComplete.js","components/FormFields/Address.js","components/Forms/Agent.js","components/Result.js","components/Forms/Broker.js","components/Forms/ListingBroker.js","components/Forms/Lenders.js","components/Forms/Attorney.js","components/Forms/ForSaleByOwner.js","components/Forms/Mortgage.js","components/Forms/AgentType.js","components/Forms/AdditionalInformation.js","components/Forms/Testing.js","components/FormFields/GeneralClientInformation.js","components/Forms/Client.js","components/Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","FieldTitle","FieldWrapper","props","error","Button","Input","input","MultiContainer","AddressWrapper","InputField","isEmpty","useCheckFieldValue","name","getValues","React","useState","setIsEmpty","useEffect","isFieldEmpty","value","undefined","memo","label","className","style","required","register","errors","onKeyDown","classVal","text","setText","ref","onKeyPress","e","handleonkeypress","onBlur","target","handleonblur","onChange","message","Title","p","FormHeader","Select","select","DropDownList","placeholder","options","setValue","isValue","rest","defaultValue","event","preventDefault","disabled","hidden","map","key","Label","Span","span","checked","Slider","isChecked","setIsChecked","type","onClick","handleDeploymentPath","params","process","concat","MORTGAGE_TYPES","CONVENTIONAL","FHA","VA","CASH","AGENT_TYPES","SELLERS","BUYERS","BOTH","PROPERTY_TYPES","SINGLE_FAMILY","MULTI_FAMILY","CONDO","ordinal_suffix_of","i","j","k","PropertyInfo","agentType","propertyInformation","mlsNumber","deedReference","address","city","state","zipCode","mapReferences","CustomDatePicker","control","showYearPicker","dateFormat","render","placeholderText","startDate","selected","Date","onFocus","stopPropagation","closeOnScroll","RadioSelector","array","selectedVal","createRef","defaultChecked","mapRules","rule","Object","keys","reduce","newMap","PHONE_REG_EXP","REQUIRED","VALID_EMAIL","AgentTypeValidation","yup","shape","BuyerFormOneValidation","property","typeError","test","val","length","propertyType","oneOf","values","condoManagementCompany","when","is","then","dateHouseBuilt","titleOrTownSewer","publicOrTownWater","inspectionDeadline","buyerhasSubmittedAdditionalOffer","notRequired","loxBoxCode","vacentOrOccupied","TestAttorneyValidation","obj","firstName","lastName","emailAddress","email","emailAddressVerification","firmName","phoneNumber","matches","FSBOValidation","forSaleByOwner","sellerFirstName","sellerLastName","sellerEmail","sellerEmailVerification","attorneyfirstName","attorneylastName","attorneyEmail","attorneyEmailVerification","attorneyPhoneNumber","ListingBrokerValidation","listingBroker","company","listingAgent","emailVerification","mlsID","LendersValidation","lender","companyName","AdditionalInformationValidation","ClientValidation","obj2","Array","isArray","of","fullAddress","AgentAndBrokerValidation","broker","agent","MLSNumber","compensationPerMLS","Back","goBack","useHistory","Next","updateAction","payload","details","useCustomFormHook","validationRules","useStateMachine","action","push","useForm","defaultValues","mode","reValidateMode","resolver","handleSubmit","Property","currPropertyType","setCurrentPropertyType","additionalOffer","setAdditionalOffer","inspectionWaved","setInspectionWaved","onSubmit","data","buyerHasSubmittedAdditionalOffer","AutoCompleteWrapper","AutoComplete","suggestions","howToFilter","filterValues","status","onSelect","useOnclickOutside","handleOnBlur","activeSuggestion","filteredSuggestions","showSuggestions","userInput","suggestionState","setSuggestionState","handleSelect","currentTarget","innerText","filter","suggestion","toLowerCase","indexOf","keyCode","index","suggestionsListComponent","Address","disable","usePlacesAutocomplete","ready","clearSuggestions","getDescriptions","description","Agent","represents","useParams","isEXP","setIsExp","loadAgentPhoneNumber","loadFieldsBasedOnAgent","Result","JSON","stringify","Broker","Fragment","handleIsExp","ListingBroker","phoneNumberField","mortgage","typeOfMortgage","Lenders","Attorney","attorney","ForSaleByOwner","isFSBO","setIsFSBO","FSBO","Mortgage","currMortgageType","setCurrMortgageType","isConcessions","setIsConcessions","purchasePrice","firstDeposit","secondDeposit","areConcessions","concessions","mortgageCommitmentDeadline","houseClosingDate","AgentType","AdditionalInformation","yupResolver","Testing","testing","findValue","GeneralClientInformation","title","count","setCount","fields","fieldCount","float","Client","clientType","client","exact","path","component","createStore","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.c853dc43.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #e7ecee;\r\n    padding-top: .5rem;\r\n    min-height: 99vh;\r\n    height: 100%;\r\n\r\n    form {\r\n        width: 40rem;\r\n        margin: 0 auto;\r\n        background: transparent;\r\n\r\n        @media only screen and (max-device-width : 640px) {\r\n            width: 95%;\r\n        }\r\n\r\n    }\r\n`;\r\n\r\nexport const FieldTitle = styled.div`\r\n    font-family: Helvetica, Arial, sans-serif; \r\n    position: relative;\r\n    margin-bottom: .5rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    position: relative;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    padding: 1.5rem;\r\n    border-radius: .75rem;\r\n    border: ${props => props.error ? \"1px solid #d93025\" : \"1px solid #d3d3d3\" };\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const Button = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    display: inline-block;\r\n    position: relative;\r\n    font-size: 12pt;\r\n    font-weight: 500;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    background: #fff;\r\n    padding: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    margin-bottom: .5rem;\r\n    border-radius: .5rem;\r\n    margin-right: .5rem;\r\n`;\r\n\r\nexport const MultiContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    \r\n    @media only screen and (max-device-width : 425px) {\r\n        flex-direction: column;\r\n    }\r\n    \r\n`;\r\n\r\n// Should only be used when inside MultiContainer\r\nexport const AddressWrapper = styled.div`\r\n    padding-left: 1rem;\r\n`;","import styled from \"styled-components\";\r\n\r\nconst highlightColor = \"#16abf0\";\r\nconst paddingHorizontal = \"8px\";\r\n\r\nexport const InputField = styled.div`\r\n    position: relative;\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n    \r\n    /* This is so there can be multiple fields side by side \r\n        Start-block\r\n    */\r\n    padding-left: 1rem;\r\n\r\n    @media only screen and (max-device-width : 425px) {\r\n        padding-left: 0;\r\n    }\r\n\r\n    :last-child label {\r\n        padding-left: 1rem;\r\n        \r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n\r\n    :first-child {\r\n        padding-left: 0;\r\n        label {\r\n            padding-left: 0;\r\n        \r\n        }\r\n\r\n        @media only screen and (max-device-width : 425px) {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n    /* end-block */\r\n\r\n    input {\r\n        font-family: Helvetica, Arial, sans-serif;\r\n        font-size: 12pt;\r\n        width: 15.4375rem;\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 2.6em;\r\n        line-height: 2.6em;\r\n        margin-top: .5em;\r\n        border: none;\r\n        outline: none;\r\n        position: relative;\r\n        top: 0;\r\n        left: 0;\r\n        display: block;\r\n        background: transparent;\r\n        z-index: 2;\r\n        border-bottom: 1px solid #ccc;\r\n        text-indent: ${paddingHorizontal};\r\n    }\r\n\r\n    input:focus+label {\r\n        color: ${highlightColor}\r\n    }\r\n\r\n    label {\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        left: ${ props => props.isEmpty ? \"0px\" : paddingHorizontal};\r\n        font-size: 12pt;\r\n        z-index: 1;\r\n        transform-origin: 0, 0.0em;\r\n        transition: transform 500ms, color 300ms;\r\n        transform: ${props => props.isEmpty ? 'scale(0.85, 0.85) rotateY(0)' :  'scale(1,1) rotateY(0)'};\r\n        line-height: ${props => props.isEmpty ? '.25em' : '3em'};\r\n        color: #696969;\r\n    }\r\n\r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n\r\n    .react-datepicker-popper {\r\n        z-index: 4;\r\n    }\r\n\r\n`;\r\n\r\n","import React from \"react\";\r\n\r\nconst useCheckFieldValue = (name, getValues) => {\r\n    \r\n    const [isEmpty, setIsEmpty] = React.useState(false);\r\n    \r\n    const isFieldEmpty = (value) => {\r\n        if(value === \"\" || value === undefined || value === null){\r\n            setIsEmpty(false);\r\n        }else{\r\n            setIsEmpty(true);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if(getValues && getValues(`${name}`)) {\r\n            setIsEmpty(true);\r\n        }\r\n    }, [name, getValues]);\r\n\r\n    return {\r\n        isFieldEmpty,\r\n        setIsEmpty,\r\n        isEmpty\r\n    }\r\n}\r\n\r\nexport default useCheckFieldValue","import React from 'react'\r\nimport * as S from \"./InputFieldStyled\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\";\r\n\r\n// TODO: Create API docs for field\r\nconst InputField = React.memo(({ name, label, className, style, required, register, getValues, errors, value, onKeyDown, ...props}) => {\r\n    const classVal = required ? `${className} required-field`: className;\r\n    const { isEmpty, isFieldEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n    const [text, setText] = React.useState(\"\");\r\n\r\n    const handleOnKeyPress = e => {\r\n        setIsEmpty(true)\r\n        if(props.handleonkeypress){\r\n            props.handleonkeypress(e);\r\n        }\r\n    }\r\n\r\n    const handleOnBlur = e => {\r\n        isFieldEmpty(e.target.value);\r\n        if(props.handleonblur){\r\n            props.handleonblur(e);\r\n        }\r\n    }\r\n    \r\n    const handleOnChange = e => {\r\n        setText(e.target.value);\r\n        setIsEmpty(false);\r\n    }\r\n\r\n    // TODO: Test input as a controlled field. This may allow address field to work as intended.\r\n    // See Docs for Details: https://reactjs.org/docs/forms.html#controlled-components\r\n    return (\r\n        <S.InputField style={style} isEmpty={isEmpty || value}>\r\n            <input\r\n            value={value || text}\r\n            name={name}\r\n            ref={register}\r\n            onKeyPress={handleOnKeyPress}\r\n            onBlur={handleOnBlur}\r\n            onChange={props.onChange || handleOnChange}\r\n            onKeyDown={onKeyDown}\r\n            {...props}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {errors ? <span>{errors?.message}</span> : null}\r\n        </S.InputField>\r\n    )\r\n})\r\n\r\nexport default InputField\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.div`\r\n    margin: 0 0 .125rem 0;\r\n    padding: 0px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 16pt;\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const message = styled.p`\r\n    margin: 0;\r\n    padding: 0;\r\n    /* text-align: left; */\r\n\r\n    @media only screen and (max-device-width : 640px) {\r\n        font-size: 12pt;\r\n    }\r\n\r\n    @media only screen and (max-device-width: 560px){\r\n        font-size: 10pt;\r\n    }\r\n`;\r\n\r\nexport const FieldWrapper = styled.div`\r\n    padding: 1rem;\r\n    background-color: #fff;\r\n    margin-bottom: .75rem;\r\n    border-radius: .75rem;\r\n    border: 1px solid #d3d3d3;\r\n    min-height: 7.125rem;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n`;","import React from 'react';\r\nimport * as S from \"./FormHeaderStyled\";\r\n\r\nconst FormHeader = React.memo(() => {\r\n    return (\r\n        <S.FieldWrapper>\r\n            <S.Title>Massachusetts Real Estate Transaction Form </S.Title>\r\n            <S.message>Please ensure that all information is filled out correctly as this information will be utilized throughout the transaction process.</S.message>\r\n        </S.FieldWrapper>\r\n    )\r\n})\r\n\r\nexport default FormHeader\r\n","import styled from \"styled-components\";\r\n\r\nexport const Select = styled.select`\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    font-size: 12pt;\r\n    width: 12.4375rem;\r\n    border: none;\r\n    border-bottom: 1px solid #ccc;\r\n    margin: 1rem 0 0 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    span {\r\n        position: relative;\r\n        color: red;\r\n        /* line-height: 10em; */\r\n        font-size: 8pt;\r\n        right: 0;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./DropDownListStyled\"\r\n\r\nconst DropDownList = React.memo(({ placeholder, options, register, setValue, isValue, errors, ...rest }) => {\r\n    \r\n    const handleChange = (event) => {\r\n        event.preventDefault();\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Select defaultValue={isValue} onChange={handleChange} ref={register} {...rest}>\r\n                <option value=\"\" disabled hidden>{placeholder}</option>\r\n                {options.map(value => (\r\n                    <option key={value} value={value}>\r\n                        {value}\r\n                    </option>\r\n                ))}\r\n            </S.Select>\r\n            {errors && \r\n            ( errors.message !== null || errors.message !== undefined \r\n            ? <span>{errors.message}</span>\r\n            : null\r\n            )}\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default DropDownList\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    position: relative;\r\n    display: inline-block;\r\n    margin-left: 1rem;\r\n    top: .25rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 2.625rem;\r\n    height: 1.25rem;\r\n    /* line-height: 1.5rem; */\r\n\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n    display: none;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: ${ props => props.checked ? \"#16abf0\" : \"#c9c9c9\"};\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n    border-radius: 30px;\r\n\r\n    ::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        border-radius: 50%;\r\n        height: .8125rem;\r\n        width: .8125rem;\r\n        left: 4px;\r\n        bottom: 4px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 50%;\r\n        -webkit-transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n        -ms-transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n        transform: ${props => props.checked ? \"translateX(21px)\" : null };\r\n    }\r\n\r\n    ::after {\r\n        /* content: \"\" + ; */\r\n        content: '${props => props.checked ? \"YES\" : \"NO\"}';\r\n        color: ${ props => props.checked ? \"#ccc\" : \"#16abf0\"};\r\n        display: block;\r\n        position: absolute;\r\n        transform: translate(-50%, -50%);\r\n        top: 50%;\r\n        left: ${props => props.checked ? \"30%\" : \"70%\"};\r\n        font-size: 10px;\r\n        font-family: Arial, Helvetica, sans-serif;\r\n    }\r\n`;","import React from 'react'\r\nimport * as S from \"./SliderStyled\";\r\n\r\nconst Slider = React.memo(({ isChecked, setIsChecked, name, required, register }) => {\r\n\r\n    return (\r\n        <S.Container>\r\n            <S.Label>\r\n                <S.Input value={isChecked} type=\"checkbox\" name={name} ref={register({ required: required })} />\r\n                <S.Span checked={isChecked} onClick={() => setIsChecked(isChecked => !isChecked)} />\r\n            </S.Label>\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default Slider\r\n","export const deploy = process.env.REACT_APP_DEPLOY_TO_GITHUB_PAGES;\r\nexport const path = process.env.REACT_APP_BASE_PATH;\r\n\r\nexport const handleDeploymentPath = (params) => {\r\n    return deploy === \"true\" ? path.concat(params) : params;\r\n}\r\n\r\nexport const MORTGAGE_TYPES = {\r\n    CONVENTIONAL: \"Conventional\",\r\n    FHA: \"FHA\",\r\n    VA: \"VA\",\r\n    CASH: \"Cash\",\r\n}\r\nexport const AGENT_TYPES = {\r\n    SELLERS: \"Seller\",\r\n    BUYERS: \"Buyer\",\r\n    BOTH: \"Both\"\r\n}\r\n\r\nexport const PROPERTY_TYPES = {\r\n    SINGLE_FAMILY: \"Single Family\",\r\n    MULTI_FAMILY: \"Multi Family\",\r\n    CONDO: \"Condo\"\r\n}\r\n\r\n// What an ordinal suffix is: https://en.wikipedia.org/wiki/Ordinal_numeral\r\nexport function ordinal_suffix_of(i) {\r\n    var j = i % 10,\r\n        k = i % 100;\r\n    if (j === 1 && k !== 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j === 2 && k !== 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j === 3 && k !== 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport InputField from \"./InputField\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\n\r\nconst PropertyInfo = ({ register, errors, getValues, agentType }) => {\r\n\r\n    const propertyInformation =\r\n    errors[\"property\"]?.mlsNumber ||\r\n    errors[\"property\"]?.deedReference ||\r\n    errors[\"property\"]?.address ||\r\n    errors[\"property\"]?.city ||\r\n    errors[\"property\"]?.state ||\r\n    errors[\"property\"]?.zipCode ||\r\n    errors[\"property\"]?.mapReferences;\r\n\r\n    return (\r\n        <S.FieldWrapper error={propertyInformation}>\r\n            <S.FieldTitle>Property Information</S.FieldTitle>\r\n            <S.MultiContainer>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.address\"\r\n                label=\"Address\" \r\n                errors={errors[\"property\"]?.address} \r\n                register={register} \r\n                required={true} />\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.city\" \r\n                label=\"City\" \r\n                errors={errors[\"property\"]?.city} \r\n                register={register} \r\n                required={true} />\r\n            </S.MultiContainer>\r\n            <S.MultiContainer>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.state\" \r\n                label=\"State\" \r\n                errors={errors[\"property\"]?.state} \r\n                register={register} \r\n                required={true} />\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.zipCode\" \r\n                label=\"Zip Code\" \r\n                errors={errors[\"property\"]?.zipCode} \r\n                register={register} \r\n                required={true} />\r\n            </S.MultiContainer>\r\n            <S.MultiContainer>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.mlsNumber\"\r\n                label=\"MLS Number\" \r\n                errors={errors[\"property\"]?.mlsNumber} \r\n                register={register} \r\n                required={true}/>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.deedReference\"\r\n                label=\"Deed Reference (Book)\" \r\n                errors={errors[\"property\"]?.deedReference} \r\n                register={register} \r\n                required={true} />\r\n            </S.MultiContainer>\r\n            {\r\n                agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ?\r\n                <div>\r\n                    <InputField\r\n                    getValues={getValues}\r\n                    name=\"property.mapReferences\"\r\n                    label=\"Map References (Page)\"\r\n                    errors={errors[\"property\"]?.mapReferences}\r\n                    register={register}\r\n                    required={true} />\r\n                </div> : null\r\n            }\r\n        </S.FieldWrapper>\r\n    )\r\n}\r\n\r\nexport default PropertyInfo\r\n","import React from 'react';\r\nimport * as S from \"./InputFieldStyled\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport useCheckFieldValue from \"../../hooks/useCheckFieldValue\"\r\n\r\nconst CustomDatePicker = ({ control, name, label, errors, required, className, showYearPicker, dateFormat=\"MM/dd/yyyy\", getValues, ...rest }) => {\r\n    const classVal = required ? `${className} required-field`: className;\r\n    const { isEmpty, setIsEmpty } = useCheckFieldValue(name, getValues);\r\n    \r\n    return (\r\n        <S.InputField isEmpty={isEmpty}>\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                defaultValue={null}\r\n                {...rest}\r\n                render={(props) => {\r\n                return <DatePicker\r\n                    showYearPicker={showYearPicker}\r\n                    dateFormat={dateFormat}\r\n                    defaultValue={null}\r\n                    placeholderText={null}\r\n                    startDate={null}\r\n                    className=\"input\"\r\n                    selected={ props.value !== null ? new Date(props.value) : null}\r\n                    onChange={(e) => {\r\n                        props.onChange(e)\r\n                        setIsEmpty(true);\r\n                        if(e === null){\r\n                            setIsEmpty(false)\r\n                        }\r\n                    }}\r\n                    onBlur={(e) => {\r\n                        if(e.target.value === \"\"){\r\n                            setIsEmpty(false);\r\n                        }\r\n                        e.preventDefault();\r\n                    }}\r\n                    onFocus={(e) => {\r\n                        setIsEmpty(true)\r\n                        e.stopPropagation();\r\n                    }}\r\n                    closeOnScroll={true}\r\n                />\r\n                }}\r\n            />\r\n            <label className={classVal}>{label}</label>\r\n            {required && errors && <span>Required Field</span>}\r\n        </S.InputField>  \r\n    )\r\n}\r\n\r\nexport default CustomDatePicker\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 1em;\r\n\r\n    div {\r\n        margin: .5rem;\r\n    }\r\n\r\n    input {\r\n        width: 1rem;\r\n        height: 1rem;\r\n    }\r\n\r\n    label {\r\n        margin: .25em;\r\n        font-weight: 450;\r\n        padding-left: .25rem;\r\n    }\r\n`;","import React from 'react';\r\nimport * as S from \"./RadioSelectorStyled\";\r\n\r\nconst RadioSelector = React.memo(({ register, name, array }) => {\r\n    const selectedVal = React.createRef();\r\n\r\n    // To create a radio group you must used uncontrolled components.\r\n    // Documentation: https://reactjs.org/docs/uncontrolled-components.html\r\n    return (\r\n        <S.Container>\r\n            {array.map((value) => (\r\n                <div key={`input-${value}`}>\r\n                    <input name={name} type=\"radio\" value={value} defaultChecked={selectedVal === \"test2\"} ref={register} />\r\n                    <label>\r\n                        {value}\r\n                    </label>\r\n                </div>\r\n            ))}\r\n        </S.Container>\r\n    )\r\n})\r\n\r\nexport default RadioSelector\r\n","import * as yup from \"yup\";\r\nimport { AGENT_TYPES, PROPERTY_TYPES } from \"../shared\";\r\n\r\n// This is used in lazy validation rules found here: https://github.com/jquense/yup/issues/130#issuecomment-578392176\r\nconst mapRules = (map, rule) => Object.keys(map).reduce((newMap, key) => ({...newMap, [key]: rule}), {});\r\n\r\n// TODO: Find solution to replace regular expression\r\n// Regular Express to Verify phone numbers taken from: https://www.sitepoint.com/community/t/phone-number-regular-expression-validation/2204/4\r\nconst PHONE_REG_EXP = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\nconst REQUIRED = \"Required\";\r\nconst VALID_EMAIL = \"Must be a Valid Email!\";\r\nconst NUMBER_ERROR_MESSAGE = \"Can only contain numbers\";\r\n\r\n\r\nexport const AgentTypeValidation = (agentType) => yup.object().shape({\r\n    agentType: yup.string().required(REQUIRED),\r\n});\r\n\r\nexport const BuyerFormOneValidation = (agentType) => yup.object().shape({\r\n    property: yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        city: yup.string().required(REQUIRED),\r\n        state: yup.string().required(REQUIRED),\r\n        zipCode: yup.number().required().typeError(REQUIRED),\r\n        mlsNumber: yup.string().test('len', 'Must be exactly 7 digits', val => val.length === 7),\r\n        deedReference: yup.string().required(REQUIRED).test('len', 'Must be in format XXXX-XXXXXXX', val => val.length === 11).required(REQUIRED),\r\n        propertyType: yup.string().required(REQUIRED).oneOf([...Object.values(PROPERTY_TYPES)], \"Select a valid Property type.\"),\r\n        condoManagementCompany: yup.string()\r\n        .when(\r\n            \"propertyType\",\r\n        { is: val => val === PROPERTY_TYPES.CONDO,\r\n            then: yup.string().required(REQUIRED)\r\n        }),\r\n        dateHouseBuilt: yup.string().required(REQUIRED),\r\n        titleOrTownSewer: yup.string().required(REQUIRED),\r\n        publicOrTownWater: yup.string().required(REQUIRED),\r\n        inspectionDeadline: yup.string().required(REQUIRED),\r\n        buyerhasSubmittedAdditionalOffer: agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n        loxBoxCode: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.number().required(REQUIRED).typeError(NUMBER_ERROR_MESSAGE) : yup.mixed().notRequired(),\r\n        vacentOrOccupied: agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ? yup.string().required(REQUIRED) : yup.string().notRequired(),\r\n})});\r\n\r\nexport const AttorneyValidation = (agentType) => yup.object().shape({\r\n    firstName: yup.string().required(REQUIRED),\r\n    lastName: yup.string().required(REQUIRED),\r\n    emailAddress: yup.string().required(REQUIRED),\r\n    emailAddressVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('emailAddress'), null], \"Email Addresses Must Match\"),\r\n    firmName: yup.string().notRequired(),\r\n    phoneNumber: yup.string().notRequired().matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n});\r\n\r\nexport const TestAttorneyValidation = (agentType) => yup.lazy(obj => \r\n    yup.object(mapRules(obj, yup.object({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        emailAddress: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailAddressVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('emailAddress'), null], \"Email Addresses Must Match\"),\r\n        firmName: yup.string().required(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    })))\r\n)\r\n\r\nexport const FSBOValidation = (agentType) => yup.object().shape({\r\n    forSaleByOwner: yup.string().required(REQUIRED),\r\n    sellerFirstName: yup.string().notRequired(),\r\n    sellerLastName: yup.string().notRequired(),\r\n    sellerEmail: yup.string().notRequired(),\r\n    sellerEmailVerification: yup.string().notRequired().oneOf([yup.ref('sellerEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyfirstName: yup.string().notRequired(),\r\n    attorneylastName: yup.string().notRequired(),\r\n    attorneyEmail: yup.string().notRequired(),\r\n    attorneyEmailVerification: yup.string().notRequired().oneOf([yup.ref('attorneyEmail'), null], \"Email Addresses Must Match\"),\r\n    attorneyPhoneNumber: yup.string().notRequired(),\r\n});\r\n\r\nexport const ListingBrokerValidation = (agentType) => yup.object().shape({\r\n    listingBroker: yup.object().shape({\r\n        company: yup.string().required(REQUIRED),\r\n        address: yup.string().notRequired(),\r\n    }),\r\n    listingAgent: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"),\r\n        phoneNumber: yup.string().required(REQUIRED),\r\n        mlsID: yup.string().required(REQUIRED)\r\n    }),\r\n});\r\n\r\nexport const LendersValidation = (agentType) => yup.object().shape({\r\n    lender: yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        lastName: yup.string().required(REQUIRED),\r\n        companyName: yup.string().notRequired(REQUIRED),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n    }),\r\n});\r\n\r\nexport const AdditionalInformationValidation = (agentType) => yup.object().shape({\r\n\r\n});\r\n\r\n/* \r\n    This object validation rule can be utilized to define a lazy array\r\n*/\r\nexport const ClientValidation = (agentType) => yup.lazy(obj =>\r\n    yup.object(mapRules(obj, yup.lazy(obj2 =>\r\n        {\r\n            if(Array.isArray(obj2)){\r\n                return yup.array().of(\r\n                    yup.object().shape({\r\n                        firstName: yup.string().required(REQUIRED),\r\n                        lastName: yup.string().required(REQUIRED),\r\n                        fullAddress: yup.string().required(REQUIRED),\r\n                        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n                        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n                        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n                    })\r\n                );\r\n            }\r\n            return yup.mixed().notRequired();\r\n        }\r\n    ))));\r\n\r\nexport const AgentAndBrokerValidation = (agentType) =>  yup.object().shape({\r\n    broker: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        address: yup.string().required(REQUIRED),\r\n        companyName: yup.string().required(REQUIRED),\r\n    })))),\r\n    agent: yup.lazy(obj => yup.object(mapRules(obj, yup.object().shape({\r\n        firstName: yup.string().required(REQUIRED),\r\n        MLSNumber: yup.string().required(REQUIRED),\r\n        email: yup.string().email(VALID_EMAIL).required(REQUIRED),\r\n        emailVerification: yup.string().email(VALID_EMAIL).required(REQUIRED).oneOf([yup.ref('email'), null], \"Email Addresses Must Match\"), \r\n        compensationPerMLS: agentType === AGENT_TYPES.SELLERS ? yup.string().required(REQUIRED) : yup.mixed().notRequired(),\r\n        phoneNumber: yup.string().required(REQUIRED).matches(PHONE_REG_EXP, 'This is not a valid phone number.'),\r\n    }))))\r\n});","import React from 'react';\r\nimport * as S from \"./FormStyled\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Back = () => {\r\n    const { goBack } = useHistory();\r\n    return ( <S.Input type=\"button\" value=\"Back\" onClick={() => goBack()} /> )\r\n}\r\n\r\nexport const Next = () => {\r\n    return (\r\n        <S.Input type=\"submit\" value=\"Next\" />\r\n    )\r\n}\r\n\r\n","export default function updateAction(state, payload) {\r\n    return {\r\n      ...state,\r\n      details: {\r\n        ...state.details,\r\n        ...payload\r\n      }\r\n    };\r\n  }\r\n  ","import React from \"react\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStateMachine } from 'little-state-machine';\r\nimport updateAction from '../state/updateState';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers\";\r\n\r\n\r\nconst useCustomFormHook =  (validationRules ) => {\r\n    const { state, action } = useStateMachine(updateAction);\r\n    const agentType = state.details.agentType ? state.details.agentType : null\r\n    const { push } = useHistory();\r\n    const { register, handleSubmit, getValues, errors, control } = useForm({\r\n        defaultValues: state.details,\r\n        mode: 'onChange',\r\n        reValidateMode: 'onChange',\r\n        resolver: validationRules && process.env.REACT_APP_ENABLE_VALIDATION === 'true' ? yupResolver(validationRules(agentType)) : null\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        return () => {\r\n            \r\n        }\r\n\r\n    }, [])\r\n    \r\n    return {\r\n        register,\r\n        control,\r\n        handleSubmit,\r\n        getValues,\r\n        errors,\r\n        action,\r\n        push,\r\n        state,\r\n        agentType\r\n    }\r\n} \r\n\r\nexport default useCustomFormHook","import React from 'react';\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport PropertyInfo from \"../FormFields/PropertyInfo\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { BuyerFormOneValidation } from \"../../validation\";\r\nimport { PROPERTY_TYPES, AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\n\r\nconst Property = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(BuyerFormOneValidation);\r\n\r\n    const [currPropertyType, setCurrentPropertyType] = React.useState(\"\");\r\n    const [additionalOffer, setAdditionalOffer] = React.useState(false);\r\n    const [inspectionWaved, setInspectionWaved] = React.useState(false);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Mortgage\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <PropertyInfo agentType={agentType} getValues={getValues} errors={errors} register={register} />\r\n                <S.FieldWrapper error={errors[\"property\"]?.propertyType}>\r\n                    <S.FieldTitle>Property Type</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Property Types\"\r\n                        name=\"property.propertyType\"\r\n                        label=\"Select a Property Type\"\r\n                        errors={errors[\"property\"]?.propertyType}\r\n                        options={Object.values(PROPERTY_TYPES)}\r\n                        register={register}\r\n                        isValue={currPropertyType}\r\n                        setValue={setCurrentPropertyType} />\r\n                </S.FieldWrapper>\r\n                {currPropertyType === \"Condo\" ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.condoManagementCompany}>\r\n                        <S.FieldTitle>Who is the Condo Management Company</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.condoManagementCompany\"\r\n                                label=\"Management Company\"\r\n                                errors={errors[\"property\"]?.condoManagementCompany}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null\r\n                }\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.vacentOrOccupied}>\r\n                        <S.FieldTitle>Is the house vacant or occupied?</S.FieldTitle>\r\n                        <RadioSelector\r\n                            register={register}\r\n                            name=\"property.vacentOrOccupied\"\r\n                            array={[\"Vacant\", \"Occupied\"]}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors[\"property\"]?.dateHouseBuilt}>\r\n                    <S.FieldTitle>Year Built</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        getValues={getValues}\r\n                        showYearPicker={true}\r\n                        control={control}\r\n                        name=\"property.dateHouseBuilt\"\r\n                        label=\"Select Date Built\"\r\n                        required={true}\r\n                        dateFormat=\"yyyy\"\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.titleOrTownSewer} >\r\n                    <S.FieldTitle>Is there a Title V or Town Sewer</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.titleOrTownSewer\"\r\n                        array={[\"Title V\", \"Public Sewer\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.publicOrTownWater} >\r\n                    <S.FieldTitle>Public or Town Water</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"property.publicOrTownWater\"\r\n                        array={[\"Town Water\", \"Private Water\"]}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.inspectionWaved || errors[\"property\"]?.inspectionDeadline}>\r\n                    <S.FieldTitle>Inspection Waved\r\n                            <Slider\r\n                            isChecked={inspectionWaved}\r\n                            setIsChecked={setInspectionWaved}\r\n                            name=\"property.isInspectionWaved\"\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.FieldTitle>\r\n                    {inspectionWaved ? null :\r\n                        <CustomDatePicker\r\n                            getValues={getValues}\r\n                            control={control}\r\n                            name=\"property.inspectionDeadline\"\r\n                            label=\"Select Inspection Deadline\"\r\n                            required={true}\r\n                        />}\r\n                </S.FieldWrapper>\r\n                {agentType === AGENT_TYPES.SELLERS || agentType === AGENT_TYPES.BOTH\r\n                    ? <S.FieldWrapper error={errors[\"property\"]?.loxBoxCode}>\r\n                        <S.FieldTitle>Lox Box Code</S.FieldTitle>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"property.loxBoxCode\"\r\n                                label=\"Lox Box Code\"\r\n                                errors={errors[\"property\"]?.loxBoxCode}\r\n                                required={true}\r\n                                register={register}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper> : null}\r\n                {/* TODO: This is currently used to determine what type of email should be sent.\r\n                    Note: Refer to Wendy Email for Message differences.\r\n                */}\r\n                {agentType === AGENT_TYPES.BUYERS || agentType === AGENT_TYPES.BOTH ?\r\n                    <S.FieldWrapper error={errors[\"property\"]?.buyerHasSubmittedAdditionalOffer}>\r\n                        <S.FieldTitle>Has The buyer Submitted an offer for another property?\r\n                        <Slider\r\n                                isChecked={additionalOffer}\r\n                                setIsChecked={setAdditionalOffer}\r\n                                name=\"property.buyerHasSubmittedAdditionalOffer\"\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.FieldTitle>\r\n                    </S.FieldWrapper> : null}\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    );\r\n}\r\n\r\nexport default Property","import styled from \"styled-components\";\r\n// TODO update styles\r\n\r\nexport const AutoCompleteWrapper = styled.div`\r\n    && > div {\r\n        margin-bottom: 0;\r\n        padding-bottom: 0;\r\n    }\r\n\r\n  .no-suggestions {\r\n    color: #999;\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestions {\r\n    position: absolute;\r\n    border: 1px solid #999;\r\n    border-top-width: 0;\r\n    list-style: none;\r\n    margin-top: 0;\r\n    max-height: 143px;\r\n    overflow-y: auto;\r\n    padding-left: 0;\r\n    /* width: 15.4375rem; */\r\n    width: calc(300px + 1rem);\r\n    z-index: 1000;\r\n    background-color: #FFF;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .suggestions li {\r\n    padding: 0.5rem;\r\n  }\r\n  \r\n  .suggestion-active,\r\n  .suggestions li:hover {\r\n    background-color: #16abf0;\r\n    color: #FFF;\r\n    cursor: pointer;\r\n    font-weight: 700;\r\n  }\r\n  \r\n  .suggestions li:not(:last-of-type) {\r\n    border-bottom: 1px solid #999;\r\n  }\r\n`","import React from 'react'\r\nimport InputField from './InputField';\r\nimport * as S from \"./AutoCompleteStyled\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\n// TODO: Add auto scrolling to keep active item into focus\r\n\r\n/*\r\n  TODO: Create api docs\r\n  handleonblur = onBlur\r\n  handleonkeypress = onKeyPress\r\n  onSelect = handleSelect for list of rendered items\r\n  filterValues = allows you to turn off filtering the list\r\n  status = is if the component is ready to render the list\r\n  howToFilter = custom filter for the list\r\n  suggestions = an array of strings to render and search\r\n  onChange = onChange\r\n*/\r\n\r\nconst AutoComplete = React.memo(({ \r\n  suggestions = [], \r\n  howToFilter,\r\n  handleonblur,\r\n  handleonkeypress, \r\n  filterValues = true, \r\n  status = true, \r\n  onChange, \r\n  onSelect,\r\n  getValues,\r\n  name,\r\n  errors,\r\n  register,\r\n  required,\r\n  label,\r\n  ...props }) => {\r\n    const ref = useOnclickOutside(() => {\r\n      handleOnBlur();\r\n    });\r\n    \r\n    const [suggestionState, setSuggestionState] = React.useState({\r\n        // The active suggestion's index\r\n        activeSuggestion: 0,\r\n        // The suggestions that match the user's input\r\n        filteredSuggestions: [],\r\n        // Whether or no the suggestion list is shown\r\n        showSuggestions: false,\r\n        // What the user has entered\r\n        userInput: '',\r\n    });\r\n\r\n    // This is required because AutoComplete is using InputField as a controlled component\r\n    React.useEffect(() => {\r\n      if(getValues && getValues(`${name}`)){\r\n        setSuggestionState({userInput: getValues(`${name}`)})\r\n      }\r\n    }, [name, getValues])\r\n    \r\n    const handleOnBlur = (e) => {\r\n      if(handleonblur){\r\n        handleonblur(e);\r\n      }\r\n      setSuggestionState(state => {\r\n        return {\r\n        ...state,\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n      }});\r\n    }\r\n\r\n    const handleOnChange = e => {\r\n      e.stopPropagation();\r\n      const userInput = e.currentTarget.value;\r\n      \r\n      // Filter our suggestions that don't contain the user's input\r\n      let filteredSuggestions;\r\n      if(filterValues){\r\n        if(howToFilter){\r\n          filteredSuggestions = howToFilter(suggestions);\r\n        }else {\r\n          filteredSuggestions = suggestions.filter(\r\n            suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n            );\r\n          }\r\n        }else {\r\n          filteredSuggestions = suggestions;\r\n        }\r\n        \r\n        setSuggestionState({\r\n          activeSuggestion: 0,\r\n          filteredSuggestions,\r\n          showSuggestions: true,\r\n          userInput: userInput,\r\n        });\r\n        \r\n        if(onChange){\r\n          onChange(e);\r\n        }\r\n      };\r\n\r\n    const handleSelect = e => {\r\n      \r\n      e.stopPropagation();\r\n      setSuggestionState({\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n        userInput: e.currentTarget.innerText,\r\n      });\r\n\r\n      if(onSelect){\r\n        onSelect(e)\r\n      }\r\n    };\r\n\r\n    const handleOnKeyDown = e => {\r\n      const { activeSuggestion, filteredSuggestions } = suggestionState;\r\n\r\n      // User pressed the enter key\r\n      if (e.keyCode === 13) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setSuggestionState(state => { \r\n          return {\r\n            ...state,\r\n            activeSuggestion: 0,\r\n            showSuggestions: false,\r\n            userInput: filteredSuggestions[activeSuggestion]\r\n          }\r\n        });\r\n      }\r\n      \r\n      // User pressed the up arrow\r\n      else if (e.keyCode === 38) {\r\n        if (activeSuggestion === 0) {\r\n          return;\r\n        }\r\n        setSuggestionState(state => { \r\n          return { ...state, activeSuggestion: activeSuggestion - 1} \r\n        });\r\n      }\r\n      \r\n\r\n      // User pressed the down arrow\r\n      else if (e.keyCode === 40) {\r\n      \r\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n          return;\r\n        }\r\n      \r\n        \r\n        setSuggestionState(state => { \r\n          return { ...state, activeSuggestion: activeSuggestion + 1} \r\n        });\r\n      };\r\n      e.stopPropagation();\r\n    };\r\n    \r\n    const suggestionsListComponent = () => {\r\n      const { showSuggestions, filteredSuggestions, userInput, activeSuggestion } = suggestionState; \r\n\r\n      if (showSuggestions && userInput) {\r\n        if (filteredSuggestions.length) {\r\n\r\n\r\n          return (\r\n            <ul className=\"suggestions\">\r\n                  {filteredSuggestions.map((suggestion, index) => {\r\n                    let className;\r\n\r\n                    if (index === activeSuggestion) {\r\n                      className = \"suggestion-active\";\r\n                    }\r\n      \r\n                    return (\r\n                      <li className={className} key={suggestion} onClick={handleSelect}>\r\n                        {suggestion}\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              );\r\n            } else {\r\n              return (\r\n                <div className=\"no-suggestions\">\r\n                  <em>No suggestions</em>\r\n                </div>\r\n              );\r\n            }\r\n        }    \r\n    }\r\n    \r\n\r\n    return (\r\n        <S.AutoCompleteWrapper ref={ref}>\r\n          <InputField\r\n            value={suggestionState.userInput}\r\n            onChange={handleOnChange}\r\n            onKeyDown={handleOnKeyDown}\r\n            getValues={getValues}\r\n            name={name}\r\n            errors={errors}\r\n            register={register}\r\n            required={required}\r\n            label={label}\r\n            {...props}\r\n          />\r\n          {suggestionsListComponent()}\r\n      </S.AutoCompleteWrapper>\r\n    )\r\n})\r\n\r\nexport default AutoComplete\r\n","import React from 'react'\r\nimport usePlacesAutocomplete from \"use-places-autocomplete\";\r\nimport AutoComplete from './AutoComplete';\r\n\r\n// TODO: Create API Docs\r\nconst Address = ({ disable=false, value, ...props }) => {\r\n    const {\r\n        ready,\r\n        suggestions: { status, data },\r\n        setValue,\r\n        clearSuggestions,\r\n      } = usePlacesAutocomplete();\r\n   \r\n      const handleInput = (e) => {\r\n        setValue(e.target.value);\r\n        if(value){\r\n          setValue(value);\r\n          return;\r\n        }\r\n      };\r\n     \r\n      const handleSelect = (e) => () => {\r\n        setValue(e.currentTarget.innerText, false);\r\n        clearSuggestions();\r\n      };\r\n\r\n      const handleOnBlur = () => {\r\n        clearSuggestions();\r\n      }\r\n\r\n      const getDescriptions = data.map(({description}) => description);\r\n\r\n      return (\r\n          <AutoComplete\r\n            onSelect={handleSelect}\r\n            onChange={handleInput}\r\n            disabled={disable || !ready}\r\n            handleonblur={handleOnBlur}\r\n            suggestions={getDescriptions}\r\n            status={status}\r\n            filterValues={false}\r\n            {...props}\r\n          />\r\n      );\r\n}\r\n\r\nexport default Address\r\n","import React from 'react'\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Address from \"../FormFields/Address\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { AgentAndBrokerValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { useParams } from 'react-router-dom';\r\nimport Slider from \"../FormFields/Slider\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Agent = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(AgentAndBrokerValidation);\r\n    const { represents } = useParams();\r\n    const [isEXP, setIsExp] = React.useState(false);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(`/Attorney/${AGENT_TYPES.BUYERS}`));\r\n        }\r\n    }\r\n\r\n    const loadAgentPhoneNumber = () => {\r\n        return (\r\n            <InputField\r\n                getValues={getValues}\r\n                name={`agent.${represents}.phoneNumber`}\r\n                label=\"Phone Number\"\r\n                errors={errors?.agent?.[represents]?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    const loadFieldsBasedOnAgent = () => {\r\n        if (AGENT_TYPES.BUYERS === agentType) {\r\n            return (\r\n                <div>\r\n                    {loadAgentPhoneNumber()}\r\n                </div>\r\n            )\r\n        } else if (AGENT_TYPES.SELLERS === agentType) {\r\n            return (\r\n                <S.MultiContainer>\r\n                    {loadAgentPhoneNumber()}\r\n                    <InputField\r\n                        getValues={getValues}\r\n                        name={`agent.${represents}.compensationPerMLS`}\r\n                        label=\"Agency Compensation per MLS\"\r\n                        errors={errors?.agent?.[represents]?.compensationPerMLS}\r\n                        register={register}\r\n                        required={true}\r\n                    />\r\n                </S.MultiContainer>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleFieldsForIsExp = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper >\r\n                    <S.FieldTitle>{represents}'s Agent</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.firstName`}\r\n                            label=\"First Name\"\r\n                            errors={errors?.agent?.[represents]?.firstName}\r\n                            required={true}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.MLSNumber`}\r\n                            label=\"Agent MLS Number\"\r\n                            errors={errors?.agent?.[represents]?.MLSNumber}\r\n                            required={true}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.email`}\r\n                            label=\"Email Address\"\r\n                            errors={errors?.agent?.[represents]?.email}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`agent.${represents}.emailVerification`}\r\n                            label=\"Email Address Verification\"\r\n                            errors={errors?.agent?.[represents]?.emailVerification}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    {loadFieldsBasedOnAgent()}\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Is eXp your broker?\r\n                    <Slider\r\n                            isChecked={isEXP}\r\n                            setIsChecked={setIsExp}\r\n                            name=\"property.buyerHasSubmittedAdditionalOffer\"\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                    </S.FieldTitle>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper>\r\n                    {/* TODO: Finish breaking this out into a method based on isExp */}\r\n                    <S.FieldTitle>{represents}'s Broker</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`broker.${represents}.companyName`}\r\n                            label=\"Broker Company\"\r\n                            errors={errors?.broker?.[represents]?.companyName}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                        {/* TODO: Can be pre filled if eXp with --> eXp Address = P.O. Box 10665 Holyoke Ma 01041*/}\r\n                        <S.AddressWrapper>\r\n                            <Address\r\n                                getValues={getValues}\r\n                                name={`broker.${represents}.address`}\r\n                                label=\"Broker Address\"\r\n                                errors={errors?.broker?.[represents]?.address}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </S.AddressWrapper>\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Agent\r\n","import React from \"react\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"../state/updateState\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Result = props => {\r\n  const { state } = useStateMachine(updateAction);\r\n  const { goBack } = useHistory();\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Result</h2>\r\n      <pre>{JSON.stringify(state, null, 2)}</pre>\r\n      <button onClick={() => goBack()}>Back</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Address from \"../FormFields/Address\";\r\nimport Slider from \"../FormFields/Slider\";\r\n\r\nconst Broker = ({ getValues, errors, register }) => {\r\n    const [isEXP, setIsExp] = React.useState(false);\r\n\r\n    const handleIsExp = () => {\r\n        return (\r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>Listing Broker</S.FieldTitle>\r\n                <S.MultiContainer>\r\n                    <InputField\r\n                        required={true}\r\n                        getValues={getValues}\r\n                        name=\"listingBroker.company\"\r\n                        label=\"Company\"\r\n                        errors={errors?.listingBroker?.company}\r\n                        register={register}\r\n                        value=\"eXp\"\r\n                        disabled={true}\r\n                    />\r\n                    <InputField\r\n                        required={true}\r\n                        getValues={getValues}\r\n                        name=\"listingBroker.address\"\r\n                        label=\"Address\"\r\n                        errors={errors?.listingBroker?.address}\r\n                        register={register}\r\n                        value=\"P.O. Box 10665 Holyoke Ma 01041\"\r\n                        disabled={true}\r\n                    />\r\n                </S.MultiContainer>\r\n            </S.FieldWrapper>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>Is eXp your broker?\r\n                    <Slider\r\n                    isChecked={isEXP}\r\n                    setIsChecked={setIsExp}\r\n                    name=\"property.buyerHasSubmittedAdditionalOffer\"\r\n                    register={register}\r\n                    required={false}\r\n                    />\r\n                </S.FieldTitle>\r\n            </S.FieldWrapper>\r\n            {isEXP ? handleIsExp() : \r\n            <S.FieldWrapper>\r\n                <S.FieldTitle>Listing Broker</S.FieldTitle>\r\n                <S.MultiContainer>\r\n                    {/* TODO: Sellers Side this should default to eXp and not be displayed */}\r\n                    <InputField\r\n                    required={true}\r\n                    getValues={getValues}\r\n                    name=\"listingBroker.company\"\r\n                    label=\"Company\"\r\n                    errors={errors?.listingBroker?.company}\r\n                    register={register}\r\n                    />\r\n                    <S.AddressWrapper>\r\n                    <Address\r\n                    required={true}\r\n                    getValues={getValues}\r\n                    name=\"listingBroker.address\"\r\n                    label=\"Address\"\r\n                    errors={errors?.listingBroker?.address}\r\n                    register={register}\r\n                    />\r\n                    </S.AddressWrapper>\r\n                </S.MultiContainer>\r\n            </S.FieldWrapper>}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Broker\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { ListingBrokerValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, MORTGAGE_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport Broker from \"./Broker\";\r\n\r\n// In my notes ListingBroker === ListingBroker and ListingAgent pages\r\nconst ListingBroker = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType, state } = useCustomFormHook(ListingBrokerValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT !== \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Attorney/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                if (state.details.mortgage.typeOfMortgage === MORTGAGE_TYPES.CASH) {\r\n                    push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n                } else {\r\n                    push(handleDeploymentPath(\"/Lenders\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // This was done because the field will be wrapped different html elements depending on agentType\r\n    const phoneNumberField = () => {\r\n        return (\r\n            <InputField\r\n                getValues={getValues}\r\n                name=\"listingAgent.phoneNumber\"\r\n                label=\"Phone Number\"\r\n                errors={errors.listingAgent?.phoneNumber}\r\n                register={register}\r\n                required={true}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <Broker \r\n                    getValues={getValues}\r\n                    register={register}\r\n                    errors={errors}\r\n                />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Listing Agent</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listingAgent.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors.listingAgent?.firstName}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listingAgent.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors.listingAgent?.lastName}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listingAgent.email\"\r\n                            label=\"Email\"\r\n                            errors={errors.listingAgent?.email}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            required={true}\r\n                            getValues={getValues}\r\n                            name=\"listingAgent.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors.listingAgent?.emailVerification}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    {state.details.agentType === AGENT_TYPES.SELLERS || state.details.agentType === AGENT_TYPES.BOTH ?\r\n                        <S.MultiContainer>\r\n                            {phoneNumberField()}\r\n                            <InputField\r\n                                required={true}\r\n                                getValues={getValues}\r\n                                name=\"listingAgent.mlsID\"\r\n                                label=\"MLS ID\"\r\n                                errors={errors.listingAgent?.mlsID}\r\n                                register={register}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        :\r\n                        <div>\r\n                            {phoneNumberField()}\r\n                        </div>\r\n                    }\r\n                </S.FieldWrapper>\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ListingBroker\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { LendersValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Lenders = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(LendersValidation);\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT !== \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Lender Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.firstName\"\r\n                            label=\"First Name\"\r\n                            errors={errors.lender?.firstName}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.lastName\"\r\n                            label=\"Last Name\"\r\n                            errors={errors.lender?.lastName}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.companyName\"\r\n                            label=\"Company Name\"\r\n                            errors={errors.lender?.company}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.phoneNumber\"\r\n                            label=\"Phone Number\"\r\n                            errors={errors.lender?.phoneNumber}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.email\"\r\n                            label=\"Email\"\r\n                            errors={errors.lender?.email}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"lender.emailVerification\"\r\n                            label=\"Email Verification\"\r\n                            errors={errors.lender?.emailVerification}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Lenders\r\n","import React from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { TestAttorneyValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\n/* This field represents Buyers Attorney In both notebook flows */\r\nconst Attorney = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(TestAttorneyValidation);\r\n    const { represents } = useParams();\r\n    const onSubmit = data => {\r\n        action({ attorney: data });\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n\r\n            if (represents === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(`/Client/${AGENT_TYPES.BUYERS}`));\r\n\r\n            } else if (represents === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/AdditionalInformation\"));\r\n\r\n            }\r\n\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/FSBO\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)} >\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>{represents}'s Attorney Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`${represents}.firstName`}\r\n                            label=\"First Name\"\r\n                            errors={errors[represents]?.firstName}\r\n                            required={true}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`${represents}.lastName`}\r\n                            label=\"Last Name\"\r\n                            errors={errors[represents]?.lastName}\r\n                            required={true}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`${represents}.emailAddress`}\r\n                            label=\"Email\"\r\n                            errors={errors[represents]?.emailAddress}\r\n                            required={true}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`${represents}.emailAddressVerification`}\r\n                            label=\"Email Verification\"\r\n                            errors={errors[represents]?.emailAddressVerification}\r\n                            required={true}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`${represents}.firmName`}\r\n                            label=\"Attorney Firm Name\"\r\n                            errors={errors[represents]?.firmName}\r\n                            required={false}\r\n                            register={register}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name={`${represents}.phoneNumber`}\r\n                            label=\"Phone number\"\r\n                            errors={errors[represents]?.phoneNumber}\r\n                            required={false}\r\n                            register={register}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Attorney\r\n","import React from 'react';\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport InputField from \"../FormFields/InputField\";\r\nimport { FSBOValidation } from \"../../validation\";\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst ForSaleByOwner = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(FSBOValidation);\r\n    const [isFSBO, setIsFSBO] = React.useState(true);\r\n\r\n    const onSubmit = data => {\r\n        action({ FSBO: data });\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT !== \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/ListingBroker\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>For Sale Buy Owner\r\n                        <Slider\r\n                            isChecked={isFSBO}\r\n                            setIsChecked={setIsFSBO}\r\n                            register={register}\r\n                            name=\"forSaleByOwner\"\r\n                            required={false} />\r\n                    </S.FieldTitle>\r\n                    {\r\n                        isFSBO ?\r\n                            <React.Fragment>\r\n                                <S.MultiContainer>\r\n                                    <InputField\r\n                                        getValues={getValues}\r\n                                        name=\"sellerFirstName\"\r\n                                        label=\"Sellers First Name\"\r\n                                        errors={errors.sellerFirstName}\r\n                                        register={register}\r\n                                        required={false}\r\n                                    />\r\n                                    <InputField\r\n                                        getValues={getValues}\r\n                                        name=\"sellerLastName\"\r\n                                        label=\"Sellers Last Name\"\r\n                                        errors={errors.sellerLastName}\r\n                                        register={register}\r\n                                        required={false}\r\n                                    />\r\n                                </S.MultiContainer>\r\n                                <S.MultiContainer>\r\n                                    <InputField\r\n                                        getValues={getValues}\r\n                                        name=\"sellerEmail\"\r\n                                        label=\"Sellers Email Address\"\r\n                                        errors={errors.sellerEmail}\r\n                                        register={register}\r\n                                        required={false}\r\n                                    />\r\n                                    <InputField\r\n                                        getValues={getValues}\r\n                                        name=\"sellerEmailVerification\"\r\n                                        label=\"Seller Email Verification\"\r\n                                        errors={errors.sellerEmailVerification}\r\n                                        register={register}\r\n                                        required={false}\r\n                                    />\r\n                                </S.MultiContainer>\r\n                            </React.Fragment>\r\n                            : null\r\n                    }\r\n                </S.FieldWrapper>\r\n                {isFSBO ?\r\n                    <S.FieldWrapper>\r\n                        <S.FieldTitle>Attorney Information (This Attorney will be holding Escrow )</S.FieldTitle>\r\n                        <S.MultiContainer>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"attorneyfirstName\"\r\n                                label=\"First Name\"\r\n                                errors={errors.attorneyfirstName}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"attorneylastName\"\r\n                                label=\"Last Name\"\r\n                                errors={errors.firstName}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        <S.MultiContainer>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"attorneyEmail\"\r\n                                label=\"Email\"\r\n                                errors={errors.attorneyEmail}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"attorneyEmailVerification\"\r\n                                label=\"Email Verification\"\r\n                                errors={errors.attorneyEmailVerification}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </S.MultiContainer>\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"attorneyPhoneNumber\"\r\n                                label=\"Phone Number\"\r\n                                errors={errors.attorneyPhoneNumber}\r\n                                register={register}\r\n                                required={false}\r\n                            />\r\n                        </div>\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default ForSaleByOwner\r\n","import React from 'react'\r\nimport { BuyerFormOneValidation } from \"../../validation\";\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport DropDownList from \"../FormFields/DropDownList\";\r\nimport { MORTGAGE_TYPES } from \"../../shared\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport InputField from \"../FormFields/InputField\";\r\nimport Slider from \"../FormFields/Slider\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Mortgage = () => {\r\n    const { register, control, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(BuyerFormOneValidation);\r\n\r\n    const onSubmit = data => {\r\n        action({ mortgage: data });\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT !== \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            if (agentType === AGENT_TYPES.SELLERS) {\r\n                push(handleDeploymentPath(\"/Client/Seller\"));\r\n            }\r\n            if (agentType === AGENT_TYPES.BUYERS) {\r\n                push(handleDeploymentPath(\"/Client/Buyer\"))\r\n            }\r\n        }\r\n    }\r\n\r\n    const [currMortgageType, setCurrMortgageType] = React.useState(\"\");\r\n    const [isConcessions, setIsConcessions] = React.useState(false);\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper error={errors?.typeOfMortgage}>\r\n                    <S.FieldTitle>What Type of Mortgage</S.FieldTitle>\r\n                    <DropDownList\r\n                        placeholder=\"Mortgage Types\"\r\n                        name=\"typeOfMortgage\"\r\n                        label=\"Select a Mortgage Type\"\r\n                        errors={errors?.typeOfMortgage}\r\n                        options={Object.values(MORTGAGE_TYPES)}\r\n                        register={register}\r\n                        isValue={currMortgageType}\r\n                        setValue={setCurrMortgageType}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.purchasePrice}>\r\n                    <S.FieldTitle>Purchase Price</S.FieldTitle>\r\n                    <div>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"purchasePrice\"\r\n                            label=\"Purchase price?\"\r\n                            errors={errors?.purchasePrice}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </div>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.firstDeposit || errors?.secondDeposit}>\r\n                    <S.FieldTitle>Deposit Information</S.FieldTitle>\r\n                    <S.MultiContainer>\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"firstDeposit\"\r\n                            label=\"First Deposit Amount?\"\r\n                            errors={errors?.firstDeposit}\r\n                            register={register}\r\n                            required={false}\r\n                        />\r\n                        <InputField\r\n                            getValues={getValues}\r\n                            name=\"secondDeposit\"\r\n                            label=\"Second Deposit Amount?\"\r\n                            errors={errors.secondDeposit}\r\n                            register={register}\r\n                            required={true}\r\n                        />\r\n                    </S.MultiContainer>\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors?.areConcessions || errors?.concessions}>\r\n                    <S.FieldTitle>Are there concessions?\r\n                        <Slider\r\n                            isChecked={isConcessions}\r\n                            setIsChecked={setIsConcessions}\r\n                            name=\"areConcessions\"\r\n                            required={false}\r\n                            register={register}\r\n                        />\r\n                    </S.FieldTitle>\r\n                    {isConcessions ?\r\n                        <div>\r\n                            <InputField\r\n                                getValues={getValues}\r\n                                name=\"concessions\"\r\n                                label=\"What are the concessions?\"\r\n                                errors={errors?.concessions}\r\n                                register={register}\r\n                                required={true}\r\n                            />\r\n                        </div>\r\n                        : null}\r\n                </S.FieldWrapper>\r\n                {getValues(`typeOfMortgage`) !== MORTGAGE_TYPES.CASH ?\r\n                    <S.FieldWrapper error={errors?.mortgageCommitmentDeadline}>\r\n                        <S.FieldTitle>Mortgage Commitment Deadline</S.FieldTitle>\r\n                        <CustomDatePicker\r\n                            control={control}\r\n                            getValues={getValues}\r\n                            name=\"mortgageCommitmentDeadline\"\r\n                            label=\"Select Mortgage Commitment Date\"\r\n                            required={true}\r\n                        />\r\n                    </S.FieldWrapper>\r\n                    : null}\r\n                <S.FieldWrapper error={errors?.houseClosingDate}>\r\n                    <S.FieldTitle>Closing Date</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        control={control}\r\n                        getValues={getValues}\r\n                        name=\"houseClosingDate\"\r\n                        label=\"Select Closing Date\"\r\n                        required={true}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Mortgage\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from '../FormFields/FormHeader';\r\nimport { AGENT_TYPES } from \"../../shared\";\r\nimport RadioSelector from \"../FormFields/RadioSelector\";\r\nimport { Next } from \"../FormFields/SharedButtons\";\r\nimport { AgentTypeValidation } from \"../../validation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst AgentType = () => {\r\n    const { register, handleSubmit, errors, action, push } = useCustomFormHook(AgentTypeValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else {\r\n            push(handleDeploymentPath(\"/Property\"));\r\n        }\r\n    }\r\n\r\n    const handleTestingButton = () => {\r\n        push(handleDeploymentPath(\"/Testing\"))\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper error={errors.agentType}>\r\n                    <S.FieldTitle>Please Select who you will be representing.</S.FieldTitle>\r\n                    <RadioSelector\r\n                        register={register}\r\n                        name=\"agentType\"\r\n                        array={Object.values(AGENT_TYPES)}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <button onClick={handleTestingButton}>Testing</button>\r\n                <Next />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AgentType\r\n","import React from 'react'\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStateMachine } from 'little-state-machine';\r\nimport updateAction from '../../state/updateState';\r\nimport * as S from \"../FormFields/FormStyled\";\r\n// import InputField from \"../FormFields/InputField\";\r\nimport { yupResolver } from '@hookform/resolvers';\r\nimport { AdditionalInformationValidation } from \"../../validation\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\n\r\nconst AdditionalInformation = () => {\r\n    const { state, action } = useStateMachine(updateAction);\r\n    const { push } = useHistory();\r\n    const { handleSubmit } = useForm({\r\n        defaultValues: state.details,\r\n        mode: 'onChange',\r\n        reValidateMode: 'onChange',\r\n        resolver: yupResolver(AdditionalInformationValidation),\r\n    });\r\n\r\n    const onSubmit = data => {\r\n        action(data);\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT === \"false\") {\r\n            push(\"/result\");\r\n        } else {\r\n            push(\"/result\");\r\n            // TODO: Determine what the final steps will be here\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Additional Information</S.FieldTitle>\r\n                    {/*  */}\r\n                    {/* TODO: Make field: Are you currently part of the tracy gagne team? */}\r\n                    {/* TODO: Need Additional field --> create text area field to allow for longer input */}\r\n                    {/* TODO: This is for an outside referral NOT with the Tracy Gagne Team. Is there a refereall to be paid on this transaction. */}\r\n                </S.FieldWrapper>\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default AdditionalInformation\r\n","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport useCustomFormHook from '../../hooks/useCustomFormHook';\r\nimport { ClientValidation } from \"../../validation\";\r\nimport AutoComplete from '../FormFields/AutoComplete';\r\nimport Address from \"../FormFields/Address\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\nimport CustomDatePicker from '../FormFields/DatePicker';\r\nimport InputField from \"../FormFields/InputField\";\r\n\r\nconst Testing = () => {\r\n    const { control, register, handleSubmit, errors, action, push, getValues } = useCustomFormHook(ClientValidation);\r\n    const onSubmit = data => {\r\n        action(data);\r\n        push(handleDeploymentPath(\"/result\"));\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>AutoComplete Test</S.FieldTitle>\r\n                    <AutoComplete\r\n                        suggestions={[\r\n                            \"George\",\r\n                            \"Kate\",\r\n                            \"Luna\",\r\n                            \"finnick\"\r\n                        ]}\r\n                        getValues={getValues}\r\n                        name=\"testing.findValue\"\r\n                        label=\"Search Here\"\r\n                        errors={errors?.testing?.findValue}\r\n                        register={register}\r\n                        required={false}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper>\r\n                    <S.FieldTitle>Testing</S.FieldTitle>\r\n                    <Address\r\n                        getValues={getValues}\r\n                        name=\"testing.address\"\r\n                        label=\"Search for an address\"\r\n                        errors={errors?.testing?.address}\r\n                        register={register}\r\n                        required={false}\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.FieldWrapper error={errors[\"property\"]?.dateHouseBuilt}>\r\n                    <S.FieldTitle>Year Built</S.FieldTitle>\r\n                    <CustomDatePicker\r\n                        getValues={getValues}\r\n                        showYearPicker={true}\r\n                        control={control}\r\n                        name=\"property.dateHouseBuilt\"\r\n                        label=\"Select Date Built\"\r\n                        required={true}\r\n                        dateFormat=\"yyyy\"\r\n                    />\r\n                </S.FieldWrapper>\r\n                <S.MultiContainer>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.mlsNumber\"\r\n                label=\"MLS Number\" \r\n                errors={errors[\"property\"]?.mlsNumber} \r\n                register={register} \r\n                required={true}/>\r\n                <InputField\r\n                getValues={getValues}\r\n                name=\"property.deedReference\"\r\n                label=\"Deed Reference (Book)\" \r\n                errors={errors[\"property\"]?.deedReference} \r\n                register={register} \r\n                required={true} />\r\n            </S.MultiContainer>\r\n                <br />\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Testing\r\n","import React from 'react';\r\nimport InputField from \"./InputField\";\r\nimport * as S from \"./FormStyled\"\r\nimport { ordinal_suffix_of } from \"../../shared\";\r\nimport Address from \"../FormFields/Address\";\r\n\r\n// TODO: ** BUG ** When returning to this page the count is reset to 1. Determine how to fix this.\r\nconst MAX_BUYERS = 5;\r\nconst GeneralClientInformation = ({errors, register, getValues, title }) => {\r\n    const [count, setCount] = React.useState(1);\r\n\r\n    const increaseCount = (event) => {\r\n        event.preventDefault();\r\n        if(count < MAX_BUYERS){\r\n            setCount(count => count + 1);\r\n        }\r\n    }\r\n\r\n    const decreaseCount = (event) => {\r\n        event.preventDefault();\r\n        setCount(count => count - 1);\r\n    }\r\n\r\n    const fieldCount = () => {\r\n        let fields = [];\r\n        for(let i = 0; i < count; i++){\r\n            \r\n            let error =\r\n            errors[title]?.[i]?.firstName ||\r\n            errors[title]?.[i]?.lastName ||\r\n            errors[title]?.[i]?.email ||\r\n            errors[title]?.[i]?.emailVerification ||\r\n            errors[title]?.[i]?.phoneNumber || \r\n            errors[title]?.[i]?.fullAddress;\r\n\r\n            fields.push(\r\n                <S.FieldWrapper key={i} error={error}>\r\n                        <S.FieldTitle>{ordinal_suffix_of(i + 1)} {title}</S.FieldTitle>\r\n                        <S.MultiContainer>\r\n                            <InputField name={`${title}.${i}.firstName`} label=\"First Name\" errors={errors[title]?.[i]?.firstName} register={register} required={true} getValues={getValues}/>\r\n                            <InputField name={`${title}.${i}.lastName`} label=\"Last Name\" errors={errors[title]?.[i]?.lastName} register={register} required={true} getValues={getValues}/>\r\n                        </S.MultiContainer>\r\n                        <S.MultiContainer>\r\n                            <InputField name={`${title}.${i}.email`} label=\"Email Address\" errors={errors[title]?.[i]?.email} register={register} required={true} getValues={getValues}/>\r\n                            <InputField name={`${title}.${i}.emailVerification`} label=\"Email Address Verification\" errors={errors[title]?.[i]?.emailVerification} register={register} required={true} getValues={getValues}/>\r\n                        </S.MultiContainer>\r\n                        <S.MultiContainer>\r\n                            <InputField name={`${title}.${i}.phoneNumber`} label=\"Phone Number\" errors={errors[title]?.[i]?.phoneNumber} register={register} required={true} getValues={getValues}/>\r\n                            <S.AddressWrapper>\r\n                                <Address \r\n                                name={`${title}.${i}.fullAddress`}\r\n                                label=\"Full Address\" \r\n                                errors={errors[title]?.[i]?.fullAddress} \r\n                                register={register}\r\n                                required={true} \r\n                                getValues={getValues}\r\n                                />\r\n                            </S.AddressWrapper>\r\n                        </S.MultiContainer>\r\n            </S.FieldWrapper>\r\n            )\r\n        }\r\n        return fields;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {fieldCount().map(value => value)}\r\n            { count === MAX_BUYERS ? <S.Button>Max Buyer Count Reached</S.Button> : <S.Button  onClick={increaseCount}>Add Buyer</S.Button> }\r\n            { count > 0 || MAX_BUYERS === count ? <S.Button style={{ float: \"right\" }} onClick={decreaseCount}>Remove Buyer</S.Button> : null }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GeneralClientInformation","import React from 'react'\r\nimport * as S from \"../FormFields/FormStyled\";\r\nimport { Next, Back } from \"../FormFields/SharedButtons\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormHeader from \"../FormFields/FormHeader\";\r\nimport GeneralClientInformation from \"../FormFields/GeneralClientInformation\";\r\nimport useCustomFormHook from \"../../hooks/useCustomFormHook\";\r\nimport { ClientValidation } from \"../../validation\";\r\nimport { AGENT_TYPES, handleDeploymentPath } from \"../../shared\";\r\n\r\nconst Client = () => {\r\n    const { register, handleSubmit, errors, action, push, getValues, agentType } = useCustomFormHook(ClientValidation);\r\n    const { clientType } = useParams();\r\n\r\n    const onSubmit = data => {\r\n        action({ client: data });\r\n        push(handleDeploymentPath(\"/result\"))\r\n        if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_ENABLE_REDIRECT !== \"false\") {\r\n            push(handleDeploymentPath(\"/result\"));\r\n        } else if (agentType === AGENT_TYPES.SELLERS) {\r\n            push(handleDeploymentPath(\"/ListingBroker\"));\r\n        } else if (agentType === AGENT_TYPES.BUYERS) {\r\n            push(handleDeploymentPath(\"/Agent/Buyer\"));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormHeader />\r\n                <GeneralClientInformation title={clientType} getValues={getValues} errors={errors} register={register} />\r\n                <br />\r\n                <Next />\r\n                <Back />\r\n            </form>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Client\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Property from \"../Forms/Property\";\r\nimport Agent from \"../Forms/Agent\";\r\nimport Result from \"../Result\";\r\nimport ListingBroker from \"../Forms/ListingBroker\";\r\nimport Lenders from \"../Forms/Lenders\";\r\nimport Attorney from '../Forms/Attorney';\r\nimport ForSaleByOwner from '../Forms/ForSaleByOwner';\r\nimport Mortgage from \"../Forms/Mortgage\";\r\nimport AgentType from \"../Forms/AgentType\";\r\nimport AdditionalInformation from \"../Forms/AdditionalInformation\";\r\nimport Testing from \"../Forms/Testing\";\r\nimport Client from \"../Forms/Client\";\r\nimport { handleDeploymentPath } from \"../../shared\";\r\n\r\nconst index = () => {\r\n    return (\r\n        <Router>\r\n            <Route exact path={handleDeploymentPath(\"/\")} component={AgentType} />\r\n            <Route path={handleDeploymentPath(\"/Client/:clientType\")} component={Client} />\r\n            <Route path={handleDeploymentPath(\"/Property\")} component={Property} />\r\n            <Route path={handleDeploymentPath(\"/Agent/:represents\")} component={Agent} />\r\n            <Route path={handleDeploymentPath(\"/Attorney/:represents\")} component={Attorney} />\r\n            <Route path={handleDeploymentPath(\"/FSBO\")} component={ForSaleByOwner} />\r\n            <Route path={handleDeploymentPath(\"/ListingBroker\")} component={ListingBroker} />\r\n            <Route path={handleDeploymentPath(\"/Lenders\")} component={Lenders} />\r\n            <Route path={handleDeploymentPath(\"/result\")} component={Result} />\r\n            <Route path={handleDeploymentPath(\"/Mortgage\")} component={Mortgage} />\r\n            <Route path={handleDeploymentPath(\"/AdditionalInformation\")} component={AdditionalInformation} />\r\n            <Route path={handleDeploymentPath(\"/Testing\")} component={Testing} />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default index\r\n","import React from 'react';\r\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\r\nimport { DevTool } from \"little-state-machine-devtools\";\r\nimport Route from \"./components/Routes\";\r\n\r\ncreateStore({\r\n  details: {}\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <StateMachineProvider>\r\n      <DevTool />\r\n      <Route />\r\n    </StateMachineProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}